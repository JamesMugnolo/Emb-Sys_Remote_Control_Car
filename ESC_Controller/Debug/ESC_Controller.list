
ESC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d80  080134ac  080134ac  000234ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801622c  0801622c  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  0801622c  0801622c  0002622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016234  08016234  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016234  08016234  00026234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016238  08016238  00026238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0801623c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059d0  20000104  08016340  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ad4  08016340  00035ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042845  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075c0  00000000  00000000  00072979  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000031d8  00000000  00000000  00079f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ec8  00000000  00000000  0007d118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c648  00000000  00000000  0007ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c983  00000000  00000000  0008c628  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe2d2  00000000  00000000  000b8fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b727d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d8b0  00000000  00000000  001b72f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000104 	.word	0x20000104
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013494 	.word	0x08013494

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000108 	.word	0x20000108
 800021c:	08013494 	.word	0x08013494

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <CheckFlags>:
float MappedVals[MAP_VALS_SIZE] = {MAP_MID,MAP_MID,MAP_MID,MAP_MID,MAP_SWITCH_LOW,MAP_SWITCH_LOW,MAP_SWITCH_LOW,MAP_SWITCH_LOW};//Value of inputs as percentage. Values within MAP_* or SWITCH_*.
int MotorVals[MOTOR_VALS_SIZE] = {DUTY_CYCLE_DISARM, DUTY_CYCLE_DISARM, DUTY_CYCLE_DISARM, DUTY_CYCLE_DISARM}; //2 or 4 size (how many signals). Length of duty cycle in microsec.
bool FlagBuffer[FLAG_BUFF_SIZE] = {0, 0, 0, 1, 0};//Flags! See *_FG defines.

bool CheckFlags()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	return FlagBuffer[ARM_FG] && FlagBuffer[RX_CON_FG]
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <CheckFlags+0x3c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
		&& FlagBuffer[RX_FAILSAFE_FG] && FlagBuffer[BAT_LVL_FG];
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00d      	beq.n	80005e8 <CheckFlags+0x28>
	return FlagBuffer[ARM_FG] && FlagBuffer[RX_CON_FG]
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <CheckFlags+0x3c>)
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d009      	beq.n	80005e8 <CheckFlags+0x28>
		&& FlagBuffer[RX_FAILSAFE_FG] && FlagBuffer[BAT_LVL_FG];
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <CheckFlags+0x3c>)
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <CheckFlags+0x28>
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <CheckFlags+0x3c>)
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <CheckFlags+0x28>
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <CheckFlags+0x2a>
 80005e8:	2300      	movs	r3, #0
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000010 	.word	0x20000010

08000600 <MapRxToSwitch>:

int MapRxToSwitch(uint16_t swVal)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
	if(swVal < RX_SWITCH_LOW_THRESH)
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000610:	d201      	bcs.n	8000616 <MapRxToSwitch+0x16>
		return MAP_SWITCH_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	e007      	b.n	8000626 <MapRxToSwitch+0x26>
	else if(swVal > RX_SWITCH_HIGH_THRESH)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800061c:	4293      	cmp	r3, r2
 800061e:	d901      	bls.n	8000624 <MapRxToSwitch+0x24>
		return MAP_SWITCH_HIGH;
 8000620:	2302      	movs	r3, #2
 8000622:	e000      	b.n	8000626 <MapRxToSwitch+0x26>
	else
		return MAP_SWITCH_MID;
 8000624:	2301      	movs	r3, #1
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <MapRxToPercent>:

float MapRxToPercent(uint16_t rxVal)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	float val = rxVal;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000648:	edc7 7a03 	vstr	s15, [r7, #12]

	//if we are within deadzone
	if (val <= (RX_MID_POINT + RX_DEADZONE_THRESH)
 800064c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000650:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80006a8 <MapRxToPercent+0x74>
 8000654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065c:	d80b      	bhi.n	8000676 <MapRxToPercent+0x42>
			&& val >= (RX_MID_POINT - RX_DEADZONE_THRESH))
 800065e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000662:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80006ac <MapRxToPercent+0x78>
 8000666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	db02      	blt.n	8000676 <MapRxToPercent+0x42>
	{
		return 0;
 8000670:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80006b0 <MapRxToPercent+0x7c>
 8000674:	e011      	b.n	800069a <MapRxToPercent+0x66>
	}
	else
	{
		return ((((val - RX_MIN) * (MAP_MAX - MAP_MIN))
 8000676:	edd7 7a03 	vldr	s15, [r7, #12]
 800067a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80006b4 <MapRxToPercent+0x80>
 800067e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000682:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80006b8 <MapRxToPercent+0x84>
 8000686:	ee27 7a87 	vmul.f32	s14, s15, s14
					/ (RX_MAX - RX_MIN)) + MAP_MIN);
 800068a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80006bc <MapRxToPercent+0x88>
 800068e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000692:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80006c0 <MapRxToPercent+0x8c>
 8000696:	ee77 7ac7 	vsub.f32	s15, s15, s14
	}
}
 800069a:	eeb0 0a67 	vmov.f32	s0, s15
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	447f8000 	.word	0x447f8000
 80006ac:	44708000 	.word	0x44708000
 80006b0:	00000000 	.word	0x00000000
 80006b4:	432c0000 	.word	0x432c0000
 80006b8:	43480000 	.word	0x43480000
 80006bc:	44ccc000 	.word	0x44ccc000
 80006c0:	42c80000 	.word	0x42c80000

080006c4 <MapPercentToMotor>:

int MapPercentToMotor(float perVal)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	ed87 0a01 	vstr	s0, [r7, #4]
	int retVal = DUTY_CYCLE_DISARM;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
	//If any critical flag is unset, do not arm.
	if (CheckFlags())
 80006d2:	f7ff ff75 	bl	80005c0 <CheckFlags>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d055      	beq.n	8000788 <MapPercentToMotor+0xc4>
	{
		float upperRange = DUTY_CYCLE_MAX - DUTY_CYCLE_THROTTLE_OFF;
 80006dc:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80006e0:	613b      	str	r3, [r7, #16]
		float lowerRange = DUTY_CYCLE_THROTTLE_OFF - DUTY_CYCLE_MIN;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MapPercentToMotor+0xd0>)
 80006e4:	60fb      	str	r3, [r7, #12]
		//If throttle scalar flag is set, normalize to scaled range.
		if(FlagBuffer[THROTTLE_FG])
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MapPercentToMotor+0xd4>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00f      	beq.n	800070e <MapPercentToMotor+0x4a>
		{
			upperRange = upperRange * THROTTLE_SCALAR;
 80006ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80006f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fa:	edc7 7a04 	vstr	s15, [r7, #16]
			lowerRange = lowerRange * THROTTLE_SCALAR;
 80006fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000702:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800070a:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		//If midpoint, turn off.
		if(perVal == MAP_MID)
 800070e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000712:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d103      	bne.n	8000724 <MapPercentToMotor+0x60>
		{
			retVal = DUTY_CYCLE_THROTTLE_OFF;
 800071c:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e031      	b.n	8000788 <MapPercentToMotor+0xc4>
		}
		//Reverse
		else if(perVal < MAP_MID)
 8000724:	edd7 7a01 	vldr	s15, [r7, #4]
 8000728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000730:	d517      	bpl.n	8000762 <MapPercentToMotor+0x9e>
		{
			retVal = ((((perVal - MAP_MIN) * lowerRange)
 8000732:	edd7 7a01 	vldr	s15, [r7, #4]
 8000736:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800079c <MapPercentToMotor+0xd8>
 800073a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800073e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000742:	ee27 7a27 	vmul.f32	s14, s14, s15
					/ (MAP_MID - MAP_MIN)) + DUTY_CYCLE_MIN);
 8000746:	eddf 6a15 	vldr	s13, [pc, #84]	; 800079c <MapPercentToMotor+0xd8>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007a0 <MapPercentToMotor+0xdc>
 8000752:	ee77 7a87 	vadd.f32	s15, s15, s14
			retVal = ((((perVal - MAP_MIN) * lowerRange)
 8000756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075a:	ee17 3a90 	vmov	r3, s15
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e012      	b.n	8000788 <MapPercentToMotor+0xc4>
		}
		//Forward
		else
		{
			retVal = ((((perVal - MAP_MID) * upperRange)
 8000762:	ed97 7a01 	vldr	s14, [r7, #4]
 8000766:	edd7 7a04 	vldr	s15, [r7, #16]
 800076a:	ee27 7a27 	vmul.f32	s14, s14, s15
					/ (MAP_MAX - MAP_MID)) + DUTY_CYCLE_THROTTLE_OFF);
 800076e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800079c <MapPercentToMotor+0xd8>
 8000772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000776:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80007a4 <MapPercentToMotor+0xe0>
 800077a:	ee77 7a87 	vadd.f32	s15, s15, s14
			retVal = ((((perVal - MAP_MID) * upperRange)
 800077e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000782:	ee17 3a90 	vmov	r3, s15
 8000786:	617b      	str	r3, [r7, #20]
		}
	}
	return retVal;
 8000788:	697b      	ldr	r3, [r7, #20]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	43f40000 	.word	0x43f40000
 8000798:	20000010 	.word	0x20000010
 800079c:	42c80000 	.word	0x42c80000
 80007a0:	447a0000 	.word	0x447a0000
 80007a4:	44ba0000 	.word	0x44ba0000

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f003 fb54 	bl	8003e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f8c6 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 fc94 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b8:	f000 fc72 	bl	80010a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80007bc:	f000 f960 	bl	8000a80 <MX_ADC1_Init>
  MX_DAC_Init();
 80007c0:	f000 f9b0 	bl	8000b24 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80007c4:	f000 f9d8 	bl	8000b78 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80007c8:	f000 fa0e 	bl	8000be8 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80007cc:	f000 fa76 	bl	8000cbc <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80007d0:	f000 fdfa 	bl	80013c8 <MX_FSMC_Init>
  MX_I2S2_Init();
 80007d4:	f000 fad6 	bl	8000d84 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80007d8:	f000 fb02 	bl	8000de0 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80007dc:	f000 fb2c 	bl	8000e38 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80007e0:	f000 fc0a 	bl	8000ff8 <MX_UART10_Init>
  MX_USART6_UART_Init();
 80007e4:	f000 fc32 	bl	800104c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 80007e8:	f000 fa9e 	bl	8000d28 <MX_I2C2_Init>
  MX_TIM3_Init();
 80007ec:	f000 fb54 	bl	8000e98 <MX_TIM3_Init>
  MX_UART7_Init();
 80007f0:	f000 fbd4 	bl	8000f9c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80007f4:	f002 fe79 	bl	80034ea <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80007f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007fc:	f002 ff40 	bl	8003680 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f002 fcbc 	bl	8003180 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <main+0x130>)
 800080a:	f002 ff1d 	bl	8003648 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800080e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000812:	f002 fef9 	bl	8003608 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800081a:	f002 ff05 	bl	8003628 <BSP_LCD_SetBackColor>
  //BSP_LCD_DisplayStringAtLine(1, "Hello");
  //BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800081e:	2104      	movs	r1, #4
 8000820:	482e      	ldr	r0, [pc, #184]	; (80008dc <main+0x134>)
 8000822:	f009 f8e7 	bl	80099f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000826:	2108      	movs	r1, #8
 8000828:	482c      	ldr	r0, [pc, #176]	; (80008dc <main+0x134>)
 800082a:	f009 f8e3 	bl	80099f4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800082e:	f00e fce3 	bl	800f1f8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of RadioReadTim */
  RadioReadTimHandle = osTimerNew(RadioReadTimCallBack, osTimerPeriodic, NULL, &RadioReadTim_attributes);
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <main+0x138>)
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	482a      	ldr	r0, [pc, #168]	; (80008e4 <main+0x13c>)
 800083a:	f00e fe6b 	bl	800f514 <osTimerNew>
 800083e:	4602      	mov	r2, r0
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <main+0x140>)
 8000842:	601a      	str	r2, [r3, #0]

  /* creation of LCDDelayTim */
  LCDDelayTimHandle = osTimerNew(LCDDelayTimCallback, osTimerPeriodic, NULL, &LCDDelayTim_attributes);
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <main+0x144>)
 8000846:	2200      	movs	r2, #0
 8000848:	2101      	movs	r1, #1
 800084a:	4829      	ldr	r0, [pc, #164]	; (80008f0 <main+0x148>)
 800084c:	f00e fe62 	bl	800f514 <osTimerNew>
 8000850:	4602      	mov	r2, r0
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <main+0x14c>)
 8000854:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(RadioReadTimHandle, RADIO_READ_PERIOD);
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <main+0x140>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2114      	movs	r1, #20
 800085c:	4618      	mov	r0, r3
 800085e:	f00e fedd 	bl	800f61c <osTimerStart>
  osTimerStart(LCDDelayTimHandle, LCD_WRITE_PERIOD);
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <main+0x14c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800086a:	4618      	mov	r0, r3
 800086c:	f00e fed6 	bl	800f61c <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Run_Motors */
  Run_MotorsHandle = osThreadNew(Start_Run_Motors, NULL, &Run_Motors_attributes);
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <main+0x150>)
 8000872:	2100      	movs	r1, #0
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <main+0x154>)
 8000876:	f00e fd29 	bl	800f2cc <osThreadNew>
 800087a:	4602      	mov	r2, r0
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <main+0x158>)
 800087e:	601a      	str	r2, [r3, #0]

  /* creation of Radio_Receiver */
  Radio_ReceiverHandle = osThreadNew(Receive_Radio_Signal, NULL, &Radio_Receiver_attributes);
 8000880:	4a20      	ldr	r2, [pc, #128]	; (8000904 <main+0x15c>)
 8000882:	2100      	movs	r1, #0
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <main+0x160>)
 8000886:	f00e fd21 	bl	800f2cc <osThreadNew>
 800088a:	4602      	mov	r2, r0
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <main+0x164>)
 800088e:	601a      	str	r2, [r3, #0]

  /* creation of Rx_Mapping */
  Rx_MappingHandle = osThreadNew(Start_Rx_Mapping, NULL, &Rx_Mapping_attributes);
 8000890:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <main+0x168>)
 8000892:	2100      	movs	r1, #0
 8000894:	481f      	ldr	r0, [pc, #124]	; (8000914 <main+0x16c>)
 8000896:	f00e fd19 	bl	800f2cc <osThreadNew>
 800089a:	4602      	mov	r2, r0
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <main+0x170>)
 800089e:	601a      	str	r2, [r3, #0]

  /* creation of Battery_Monitor */
  Battery_MonitorHandle = osThreadNew(Start_Battery_Monitor, NULL, &Battery_Monitor_attributes);
 80008a0:	4a1e      	ldr	r2, [pc, #120]	; (800091c <main+0x174>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	481e      	ldr	r0, [pc, #120]	; (8000920 <main+0x178>)
 80008a6:	f00e fd11 	bl	800f2cc <osThreadNew>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <main+0x17c>)
 80008ae:	601a      	str	r2, [r3, #0]

  /* creation of Data_To_LCD */
  Data_To_LCDHandle = osThreadNew(Start_Data_To_LCD, NULL, &Data_To_LCD_attributes);
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <main+0x180>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	481d      	ldr	r0, [pc, #116]	; (800092c <main+0x184>)
 80008b6:	f00e fd09 	bl	800f2cc <osThreadNew>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <main+0x188>)
 80008be:	601a      	str	r2, [r3, #0]

  /* creation of Map_To_Motors */
  Map_To_MotorsHandle = osThreadNew(Start_Map_To_Motors, NULL, &Map_To_Motors_attributes);
 80008c0:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <main+0x18c>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <main+0x190>)
 80008c6:	f00e fd01 	bl	800f2cc <osThreadNew>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <main+0x194>)
 80008ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008d0:	f00e fcc6 	bl	800f260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x12c>
 80008d6:	bf00      	nop
 80008d8:	20000064 	.word	0x20000064
 80008dc:	20004c9c 	.word	0x20004c9c
 80008e0:	080136ac 	.word	0x080136ac
 80008e4:	080019f5 	.word	0x080019f5
 80008e8:	20004e98 	.word	0x20004e98
 80008ec:	080136bc 	.word	0x080136bc
 80008f0:	08001a3d 	.word	0x08001a3d
 80008f4:	20005154 	.word	0x20005154
 80008f8:	080135d4 	.word	0x080135d4
 80008fc:	08001545 	.word	0x08001545
 8000900:	20005188 	.word	0x20005188
 8000904:	080135f8 	.word	0x080135f8
 8000908:	08001561 	.word	0x08001561
 800090c:	20004b04 	.word	0x20004b04
 8000910:	0801361c 	.word	0x0801361c
 8000914:	08001729 	.word	0x08001729
 8000918:	20004bdc 	.word	0x20004bdc
 800091c:	08013640 	.word	0x08013640
 8000920:	080017e5 	.word	0x080017e5
 8000924:	20004be0 	.word	0x20004be0
 8000928:	08013664 	.word	0x08013664
 800092c:	080017fd 	.word	0x080017fd
 8000930:	2000518c 	.word	0x2000518c
 8000934:	08013688 	.word	0x08013688
 8000938:	080019a5 	.word	0x080019a5
 800093c:	2000516c 	.word	0x2000516c

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0aa      	sub	sp, #168	; 0xa8
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f012 f99b 	bl	8012c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2258      	movs	r2, #88	; 0x58
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f012 f98c 	bl	8012c8a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <SystemClock_Config+0x138>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a3f      	ldr	r2, [pc, #252]	; (8000a78 <SystemClock_Config+0x138>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <SystemClock_Config+0x138>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <SystemClock_Config+0x13c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a39      	ldr	r2, [pc, #228]	; (8000a7c <SystemClock_Config+0x13c>)
 8000998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <SystemClock_Config+0x13c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009aa:	2303      	movs	r3, #3
 80009ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ba:	2310      	movs	r3, #16
 80009bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80009ce:	230f      	movs	r3, #15
 80009d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80009d4:	2390      	movs	r3, #144	; 0x90
 80009d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009e0:	2305      	movs	r3, #5
 80009e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 ff89 	bl	8008908 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009fc:	f001 f840 	bl	8001a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a04:	2300      	movs	r3, #0
 8000a06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f007 f99a 	bl	8007d54 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a26:	f001 f82b 	bl	8001a80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000a2a:	f240 1371 	movw	r3, #369	; 0x171
 8000a2e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000a30:	2332      	movs	r3, #50	; 0x32
 8000a32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000a34:	230c      	movs	r3, #12
 8000a36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 fb76 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000a6a:	f001 f809 	bl	8001a80 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	37a8      	adds	r7, #168	; 0xa8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40007000 	.word	0x40007000

08000a80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <MX_ADC1_Init+0x9c>)
 8000a96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <MX_ADC1_Init+0xa0>)
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000ae0:	f003 fa1e 	bl	8003f20 <HAL_ADC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 ffc9 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_ADC1_Init+0x98>)
 8000b00:	f003 fa52 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b0a:	f000 ffb9 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20004df0 	.word	0x20004df0
 8000b1c:	40012000 	.word	0x40012000
 8000b20:	0f000001 	.word	0x0f000001

08000b24 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_DAC_Init+0x4c>)
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <MX_DAC_Init+0x50>)
 8000b36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_DAC_Init+0x4c>)
 8000b3a:	f003 fd45 	bl	80045c8 <HAL_DAC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b44:	f000 ff9c 	bl	8001a80 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_DAC_Init+0x4c>)
 8000b58:	f003 fdac 	bl	80046b4 <HAL_DAC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b62:	f000 ff8d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200050f4 	.word	0x200050f4
 8000b74:	40007400 	.word	0x40007400

08000b78 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000b7e:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <MX_DFSDM1_Init+0x6c>)
 8000b80:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_DFSDM1_Init+0x68>)
 8000bcc:	f003 fdca 	bl	8004764 <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000bd6:	f000 ff53 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20004acc 	.word	0x20004acc
 8000be4:	40016020 	.word	0x40016020

08000be8 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000bee:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <MX_DFSDM2_Init+0xc8>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000c3a:	481c      	ldr	r0, [pc, #112]	; (8000cac <MX_DFSDM2_Init+0xc4>)
 8000c3c:	f003 fd92 	bl	8004764 <HAL_DFSDM_ChannelInit>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000c46:	f000 ff1b 	bl	8001a80 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <MX_DFSDM2_Init+0xd0>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_DFSDM2_Init+0xcc>)
 8000c9a:	f003 fd63 	bl	8004764 <HAL_DFSDM_ChannelInit>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000ca4:	f000 feec 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20004cdc 	.word	0x20004cdc
 8000cb0:	40016420 	.word	0x40016420
 8000cb4:	20004ba0 	.word	0x20004ba0
 8000cb8:	400164e0 	.word	0x400164e0

08000cbc <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_FMPI2C1_Init+0x64>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <MX_FMPI2C1_Init+0x68>)
 8000cca:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000cf8:	f004 fa18 	bl	800512c <HAL_FMPI2C_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000d02:	f000 febd 	bl	8001a80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_FMPI2C1_Init+0x60>)
 8000d0a:	f004 fa9e 	bl	800524a <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000d14:	f000 feb4 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20005108 	.word	0x20005108
 8000d20:	40006000 	.word	0x40006000
 8000d24:	00303d5b 	.word	0x00303d5b

08000d28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_I2C2_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_I2C2_Init+0x58>)
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_I2C2_Init+0x50>)
 8000d66:	f006 f957 	bl	8007018 <HAL_I2C_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 fe86 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20004b4c 	.word	0x20004b4c
 8000d7c:	40005800 	.word	0x40005800
 8000d80:	000186a0 	.word	0x000186a0

08000d84 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <MX_I2S2_Init+0x58>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000dac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000db0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_I2S2_Init+0x54>)
 8000dc6:	f006 fa5f 	bl	8007288 <HAL_I2S_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000dd0:	f000 fe56 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200052e0 	.word	0x200052e0
 8000ddc:	40003800 	.word	0x40003800

08000de0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <MX_QUADSPI_Init+0x54>)
 8000de8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_QUADSPI_Init+0x50>)
 8000e1c:	f006 fed8 	bl	8007bd0 <HAL_QSPI_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 fe2b 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20005328 	.word	0x20005328
 8000e34:	a0001000 	.word	0xa0001000

08000e38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_SDIO_SD_Init+0x5c>)
 8000e40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e68:	f007 ff90 	bl	8008d8c <HAL_SD_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000e72:	f000 fe05 	bl	8001a80 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_SDIO_SD_Init+0x58>)
 8000e7c:	f008 f9ba 	bl	80091f4 <HAL_SD_ConfigWideBusOperation>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000e86:	f000 fdfb 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200051e0 	.word	0x200051e0
 8000e94:	40012c00 	.word	0x40012c00

08000e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000eca:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <MX_TIM3_Init+0x100>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000edc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eee:	4829      	ldr	r0, [pc, #164]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000ef0:	f008 fcfc 	bl	80098ec <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000efa:	f000 fdc1 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4822      	ldr	r0, [pc, #136]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000f0c:	f008 ff7e 	bl	8009e0c <HAL_TIM_ConfigClockSource>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f16:	f000 fdb3 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f1a:	481e      	ldr	r0, [pc, #120]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000f1c:	f008 fd35 	bl	800998a <HAL_TIM_PWM_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f26:	f000 fdab 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	4619      	mov	r1, r3
 8000f38:	4816      	ldr	r0, [pc, #88]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000f3a:	f009 fb57 	bl	800a5ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f44:	f000 fd9c 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f48:	2360      	movs	r3, #96	; 0x60
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000f62:	f008 fe8d 	bl	8009c80 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f6c:	f000 fd88 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2208      	movs	r2, #8
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000f78:	f008 fe82 	bl	8009c80 <HAL_TIM_PWM_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f82:	f000 fd7d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM3_Init+0xfc>)
 8000f88:	f001 fa22 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 8000f8c:	bf00      	nop
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20004c9c 	.word	0x20004c9c
 8000f98:	40000400 	.word	0x40000400

08000f9c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_UART7_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <MX_UART7_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_UART7_Init+0x50>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_UART7_Init+0x58>)
 8000faa:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_UART7_Init+0x50>)
 8000fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_UART7_Init+0x50>)
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_UART7_Init+0x50>)
 8000fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_UART7_Init+0x50>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_UART7_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_UART7_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_UART7_Init+0x50>)
 8000fd8:	f009 fb98 	bl	800a70c <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fd4d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20004b08 	.word	0x20004b08
 8000ff0:	40007800 	.word	0x40007800
 8000ff4:	000186a0 	.word	0x000186a0

08000ff8 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_UART10_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_UART10_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_UART10_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_UART10_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_UART10_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_UART10_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_UART10_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_UART10_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_UART10_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_UART10_Init+0x4c>)
 8001030:	f009 fb6c 	bl	800a70c <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 800103a:	f000 fd21 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20004bf8 	.word	0x20004bf8
 8001048:	40011c00 	.word	0x40011c00

0800104c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART6_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001084:	f009 fb42 	bl	800a70c <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 fcf7 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20005264 	.word	0x20005264
 800109c:	40011400 	.word	0x40011400

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_DMA_Init+0x3c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <MX_DMA_Init+0x3c>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_DMA_Init+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	200e      	movs	r0, #14
 80010c8:	f003 fa54 	bl	8004574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010cc:	200e      	movs	r0, #14
 80010ce:	f003 fa6d 	bl	80045ac <HAL_NVIC_EnableIRQ>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	4bab      	ldr	r3, [pc, #684]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4aaa      	ldr	r2, [pc, #680]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4ba8      	ldr	r3, [pc, #672]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	4ba4      	ldr	r3, [pc, #656]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4aa3      	ldr	r2, [pc, #652]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4ba1      	ldr	r3, [pc, #644]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b9d      	ldr	r3, [pc, #628]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a9c      	ldr	r2, [pc, #624]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b9a      	ldr	r3, [pc, #616]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b96      	ldr	r3, [pc, #600]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a95      	ldr	r2, [pc, #596]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b93      	ldr	r3, [pc, #588]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b8f      	ldr	r3, [pc, #572]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a8e      	ldr	r2, [pc, #568]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b8c      	ldr	r3, [pc, #560]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a87      	ldr	r2, [pc, #540]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b85      	ldr	r3, [pc, #532]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80011a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b7e      	ldr	r3, [pc, #504]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b7a      	ldr	r3, [pc, #488]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a79      	ldr	r2, [pc, #484]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b77      	ldr	r3, [pc, #476]	; (80013a8 <MX_GPIO_Init+0x2c8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2138      	movs	r1, #56	; 0x38
 80011da:	4874      	ldr	r0, [pc, #464]	; (80013ac <MX_GPIO_Init+0x2cc>)
 80011dc:	f004 fa12 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	4872      	ldr	r0, [pc, #456]	; (80013b0 <MX_GPIO_Init+0x2d0>)
 80011e6:	f004 fa0d 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80011f0:	4870      	ldr	r0, [pc, #448]	; (80013b4 <MX_GPIO_Init+0x2d4>)
 80011f2:	f004 fa07 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80011fc:	486e      	ldr	r0, [pc, #440]	; (80013b8 <MX_GPIO_Init+0x2d8>)
 80011fe:	f004 fa01 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001208:	486c      	ldr	r0, [pc, #432]	; (80013bc <MX_GPIO_Init+0x2dc>)
 800120a:	f004 f9fb 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 800120e:	2338      	movs	r3, #56	; 0x38
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4861      	ldr	r0, [pc, #388]	; (80013ac <MX_GPIO_Init+0x2cc>)
 8001226:	f004 f85b 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800123a:	2303      	movs	r3, #3
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4859      	ldr	r0, [pc, #356]	; (80013ac <MX_GPIO_Init+0x2cc>)
 8001246:	f004 f84b 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800125c:	2302      	movs	r3, #2
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4856      	ldr	r0, [pc, #344]	; (80013c0 <MX_GPIO_Init+0x2e0>)
 8001268:	f004 f83a 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800126c:	2302      	movs	r3, #2
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001270:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <MX_GPIO_Init+0x2e4>)
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	484c      	ldr	r0, [pc, #304]	; (80013b0 <MX_GPIO_Init+0x2d0>)
 8001280:	f004 f82e 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001288:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <MX_GPIO_Init+0x2e4>)
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4849      	ldr	r0, [pc, #292]	; (80013bc <MX_GPIO_Init+0x2dc>)
 8001298:	f004 f822 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 800129c:	2320      	movs	r3, #32
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	4619      	mov	r1, r3
 80012b2:	483f      	ldr	r0, [pc, #252]	; (80013b0 <MX_GPIO_Init+0x2d0>)
 80012b4:	f004 f814 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80012b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <MX_GPIO_Init+0x2e4>)
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	483c      	ldr	r0, [pc, #240]	; (80013c0 <MX_GPIO_Init+0x2e0>)
 80012ce:	f004 f807 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80012e4:	2307      	movs	r3, #7
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4831      	ldr	r0, [pc, #196]	; (80013b4 <MX_GPIO_Init+0x2d4>)
 80012f0:	f003 fff6 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin PB8 */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8;
 80012f4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4829      	ldr	r0, [pc, #164]	; (80013b4 <MX_GPIO_Init+0x2d4>)
 800130e:	f003 ffe7 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001312:	f248 0380 	movw	r3, #32896	; 0x8080
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_GPIO_Init+0x2e4>)
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	4824      	ldr	r0, [pc, #144]	; (80013b8 <MX_GPIO_Init+0x2d8>)
 8001328:	f003 ffda 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13;
 800132c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MX_GPIO_Init+0x2d8>)
 8001346:	f003 ffcb 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800134a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_GPIO_Init+0x2dc>)
 8001364:	f003 ffbc 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8001368:	2310      	movs	r3, #16
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001378:	2306      	movs	r3, #6
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x2d4>)
 8001384:	f003 ffac 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_GPIO_Init+0x2e4>)
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_GPIO_Init+0x2d4>)
 800139c:	f003 ffa0 	bl	80052e0 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3738      	adds	r7, #56	; 0x38
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	10110000 	.word	0x10110000

080013c8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <MX_FSMC_Init+0x158>)
 80013e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013e8:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <MX_FSMC_Init+0x158>)
 80013ea:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <MX_FSMC_Init+0x15c>)
 80013ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013ee:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <MX_FSMC_Init+0x158>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <MX_FSMC_Init+0x158>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <MX_FSMC_Init+0x158>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001400:	4b47      	ldr	r3, [pc, #284]	; (8001520 <MX_FSMC_Init+0x158>)
 8001402:	2210      	movs	r2, #16
 8001404:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <MX_FSMC_Init+0x158>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800140c:	4b44      	ldr	r3, [pc, #272]	; (8001520 <MX_FSMC_Init+0x158>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001412:	4b43      	ldr	r3, [pc, #268]	; (8001520 <MX_FSMC_Init+0x158>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <MX_FSMC_Init+0x158>)
 800141a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001420:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_FSMC_Init+0x158>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <MX_FSMC_Init+0x158>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800142c:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_FSMC_Init+0x158>)
 800142e:	2200      	movs	r2, #0
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <MX_FSMC_Init+0x158>)
 8001434:	2200      	movs	r2, #0
 8001436:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001438:	4b39      	ldr	r3, [pc, #228]	; (8001520 <MX_FSMC_Init+0x158>)
 800143a:	2200      	movs	r2, #0
 800143c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <MX_FSMC_Init+0x158>)
 8001440:	2200      	movs	r2, #0
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <MX_FSMC_Init+0x158>)
 8001446:	2200      	movs	r2, #0
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800144a:	230f      	movs	r3, #15
 800144c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800144e:	230f      	movs	r3, #15
 8001450:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001452:	23ff      	movs	r3, #255	; 0xff
 8001454:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001456:	230f      	movs	r3, #15
 8001458:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800145a:	2310      	movs	r3, #16
 800145c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800145e:	2311      	movs	r3, #17
 8001460:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	482c      	ldr	r0, [pc, #176]	; (8001520 <MX_FSMC_Init+0x158>)
 800146e:	f008 f9f9 	bl	8009864 <HAL_SRAM_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001478:	f000 fb02 	bl	8001a80 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_FSMC_Init+0x160>)
 800147e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001482:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_FSMC_Init+0x160>)
 8001486:	4a27      	ldr	r2, [pc, #156]	; (8001524 <MX_FSMC_Init+0x15c>)
 8001488:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <MX_FSMC_Init+0x160>)
 800148c:	2204      	movs	r2, #4
 800148e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_FSMC_Init+0x160>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_FSMC_Init+0x160>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_FSMC_Init+0x160>)
 800149e:	2210      	movs	r2, #16
 80014a0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_FSMC_Init+0x160>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_FSMC_Init+0x160>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_FSMC_Init+0x160>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_FSMC_Init+0x160>)
 80014b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_FSMC_Init+0x160>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_FSMC_Init+0x160>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_FSMC_Init+0x160>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_FSMC_Init+0x160>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_FSMC_Init+0x160>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_FSMC_Init+0x160>)
 80014dc:	2200      	movs	r2, #0
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_FSMC_Init+0x160>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80014ea:	230f      	movs	r3, #15
 80014ec:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80014ee:	23ff      	movs	r3, #255	; 0xff
 80014f0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80014f2:	230f      	movs	r3, #15
 80014f4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80014f6:	2310      	movs	r3, #16
 80014f8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80014fa:	2311      	movs	r3, #17
 80014fc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_FSMC_Init+0x160>)
 800150a:	f008 f9ab 	bl	8009864 <HAL_SRAM_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001514:	f000 fab4 	bl	8001a80 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20004c4c 	.word	0x20004c4c
 8001524:	a0000104 	.word	0xa0000104
 8001528:	20005190 	.word	0x20005190

0800152c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	__NOP(); //checks if we receive all data
 8001534:	bf00      	nop
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <Start_Run_Motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Run_Motors */
void Start_Run_Motors(void *argument)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800154c:	f011 f856 	bl	80125fc <MX_USB_HOST_Init>
	  //itoa(motor1Val,buffer,10);
	  //BSP_LCD_SetTextColor(LCD_COLOR_RED);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,motor1Val);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,motor1Val);
	  osThreadSuspend(Run_MotorsHandle);
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <Start_Run_Motors+0x18>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f00d ff5f 	bl	800f418 <osThreadSuspend>
 800155a:	e7f9      	b.n	8001550 <Start_Run_Motors+0xc>
 800155c:	20005188 	.word	0x20005188

08001560 <Receive_Radio_Signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive_Radio_Signal */
void Receive_Radio_Signal(void *argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09a      	sub	sp, #104	; 0x68
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Receive_Radio_Signal */
	/* Infinite loop */
	//char buffer[20];
	//itoa(motor1Val,buffer,10);
	SBUS sbus;
	sbus.arm = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sbus.disarm = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	FlagBuffer[RX_CON_FG] = 0;
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 8001576:	2200      	movs	r2, #0
 8001578:	705a      	strb	r2, [r3, #1]
	FlagBuffer[RX_FAILSAFE_FG] = 0;
 800157a:	4b62      	ldr	r3, [pc, #392]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 800157c:	2200      	movs	r2, #0
 800157e:	709a      	strb	r2, [r3, #2]
	FlagBuffer[RX_ARM] = 0;
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 8001582:	2200      	movs	r2, #0
 8001584:	711a      	strb	r2, [r3, #4]
	int count = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	667b      	str	r3, [r7, #100]	; 0x64
	for(;;)
	{
		//BSP_LCD_ClearStringLine(3);
		//BSP_LCD_DisplayStringAtLine(3, "RECEIVE RADIO");
		if (RC_READ_SBUS(&huart7 ,&sbus))
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4619      	mov	r1, r3
 8001590:	485d      	ldr	r0, [pc, #372]	; (8001708 <Receive_Radio_Signal+0x1a8>)
 8001592:	f002 fac9 	bl	8003b28 <RC_READ_SBUS>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d053      	beq.n	8001644 <Receive_Radio_Signal+0xe4>
		{
			//verifying that sbus is reading properly and we are connected(not failsafing)
			//If we enter, we are connected now.
			if(!FlagBuffer[RX_CON_FG]){
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <Receive_Radio_Signal+0x50>
				FlagBuffer[RX_CON_FG] = 1;
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	705a      	strb	r2, [r3, #1]
			}
			if(!sbus.failsafe){
 80015b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <Receive_Radio_Signal+0x60>
				FlagBuffer[RX_FAILSAFE_FG] = 1;
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	709a      	strb	r2, [r3, #2]
 80015be:	e002      	b.n	80015c6 <Receive_Radio_Signal+0x66>
			}
			else{
				FlagBuffer[RX_FAILSAFE_FG] = 0;
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	709a      	strb	r2, [r3, #2]
			}


			for(int i = 0; i < CHAN_VALS_SIZE; i++ ) {
 80015c6:	2300      	movs	r3, #0
 80015c8:	663b      	str	r3, [r7, #96]	; 0x60
 80015ca:	e00d      	b.n	80015e8 <Receive_Radio_Signal+0x88>
				ChannelVals[i] = sbus.PWM_US_RC_CH[i];
 80015cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015d4:	4413      	add	r3, r2
 80015d6:	f833 1c5c 	ldrh.w	r1, [r3, #-92]
 80015da:	4a4c      	ldr	r2, [pc, #304]	; (800170c <Receive_Radio_Signal+0x1ac>)
 80015dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < CHAN_VALS_SIZE; i++ ) {
 80015e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e4:	3301      	adds	r3, #1
 80015e6:	663b      	str	r3, [r7, #96]	; 0x60
 80015e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ea:	2b07      	cmp	r3, #7
 80015ec:	ddee      	ble.n	80015cc <Receive_Radio_Signal+0x6c>
			}

			if(MapRxToSwitch(ChannelVals[RX_ARM]) == MAP_SWITCH_HIGH)
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <Receive_Radio_Signal+0x1ac>)
 80015f0:	891b      	ldrh	r3, [r3, #8]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f804 	bl	8000600 <MapRxToSwitch>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d103      	bne.n	8001606 <Receive_Radio_Signal+0xa6>
				FlagBuffer[ARM_FG] = true;
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e002      	b.n	800160c <Receive_Radio_Signal+0xac>
			else
				FlagBuffer[ARM_FG] = false;
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]

			//debug stuff
			position1Vals[count] = sbus.PWM_US_RC_CH[0];
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	4619      	mov	r1, r3
 8001610:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <Receive_Radio_Signal+0x1b0>)
 8001612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position2Vals[count] = sbus.PWM_US_RC_CH[1];
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	4619      	mov	r1, r3
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <Receive_Radio_Signal+0x1b4>)
 800161e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position3Vals[count] = sbus.PWM_US_RC_CH[2];
 8001624:	8a3b      	ldrh	r3, [r7, #16]
 8001626:	4619      	mov	r1, r3
 8001628:	4a3b      	ldr	r2, [pc, #236]	; (8001718 <Receive_Radio_Signal+0x1b8>)
 800162a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position4Vals[count] = sbus.PWM_US_RC_CH[3];
 8001630:	8a7b      	ldrh	r3, [r7, #18]
 8001632:	4619      	mov	r1, r3
 8001634:	4a39      	ldr	r2, [pc, #228]	; (800171c <Receive_Radio_Signal+0x1bc>)
 8001636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			count++;
 800163c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800163e:	3301      	adds	r3, #1
 8001640:	667b      	str	r3, [r7, #100]	; 0x64
 8001642:	e006      	b.n	8001652 <Receive_Radio_Signal+0xf2>
			//end debug stuff
	  	}
		//Too many frames without connection.
		else if(sbus.error) {
 8001644:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Receive_Radio_Signal+0xf2>
			FlagBuffer[RX_CON_FG] = 0;
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <Receive_Radio_Signal+0x1a4>)
 800164e:	2200      	movs	r2, #0
 8001650:	705a      	strb	r2, [r3, #1]
		}

		//more debug stuff
		if(count >= 50) {
 8001652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001654:	2b31      	cmp	r3, #49	; 0x31
 8001656:	dd4f      	ble.n	80016f8 <Receive_Radio_Signal+0x198>
			count = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	667b      	str	r3, [r7, #100]	; 0x64
			int tot1 = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	65fb      	str	r3, [r7, #92]	; 0x5c
			int tot2 = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	65bb      	str	r3, [r7, #88]	; 0x58
			int tot3 = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	657b      	str	r3, [r7, #84]	; 0x54
			int tot4 = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	653b      	str	r3, [r7, #80]	; 0x50
			for(int i=0; i< 50; i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001670:	e01e      	b.n	80016b0 <Receive_Radio_Signal+0x150>
				tot1 += position1Vals[i];
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <Receive_Radio_Signal+0x1b0>)
 8001674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800167c:	4413      	add	r3, r2
 800167e:	65fb      	str	r3, [r7, #92]	; 0x5c
				tot2 += position2Vals[i];
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <Receive_Radio_Signal+0x1b4>)
 8001682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800168a:	4413      	add	r3, r2
 800168c:	65bb      	str	r3, [r7, #88]	; 0x58
				tot3 += position3Vals[i];
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <Receive_Radio_Signal+0x1b8>)
 8001690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001698:	4413      	add	r3, r2
 800169a:	657b      	str	r3, [r7, #84]	; 0x54
				tot4 += position4Vals[i];
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <Receive_Radio_Signal+0x1bc>)
 800169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016a6:	4413      	add	r3, r2
 80016a8:	653b      	str	r3, [r7, #80]	; 0x50
			for(int i=0; i< 50; i++) {
 80016aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ac:	3301      	adds	r3, #1
 80016ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	2b31      	cmp	r3, #49	; 0x31
 80016b4:	dddd      	ble.n	8001672 <Receive_Radio_Signal+0x112>
			}
			tot1 = tot1 / 50;
 80016b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <Receive_Radio_Signal+0x1c0>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1112      	asrs	r2, r2, #4
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	65fb      	str	r3, [r7, #92]	; 0x5c
			tot2 = tot2 / 50;
 80016c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <Receive_Radio_Signal+0x1c0>)
 80016ca:	fb82 1203 	smull	r1, r2, r2, r3
 80016ce:	1112      	asrs	r2, r2, #4
 80016d0:	17db      	asrs	r3, r3, #31
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	65bb      	str	r3, [r7, #88]	; 0x58
			tot3 = tot3 / 50;
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	4a11      	ldr	r2, [pc, #68]	; (8001720 <Receive_Radio_Signal+0x1c0>)
 80016da:	fb82 1203 	smull	r1, r2, r2, r3
 80016de:	1112      	asrs	r2, r2, #4
 80016e0:	17db      	asrs	r3, r3, #31
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	657b      	str	r3, [r7, #84]	; 0x54
			tot4 = tot4 / 50;
 80016e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <Receive_Radio_Signal+0x1c0>)
 80016ea:	fb82 1203 	smull	r1, r2, r2, r3
 80016ee:	1112      	asrs	r2, r2, #4
 80016f0:	17db      	asrs	r3, r3, #31
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	653b      	str	r3, [r7, #80]	; 0x50
			__NOP();
 80016f6:	bf00      	nop
		}
		//end more debug stuff
		osThreadSuspend(Radio_ReceiverHandle);
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <Receive_Radio_Signal+0x1c4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00d fe8b 	bl	800f418 <osThreadSuspend>
		if (RC_READ_SBUS(&huart7 ,&sbus))
 8001702:	e742      	b.n	800158a <Receive_Radio_Signal+0x2a>
 8001704:	20000010 	.word	0x20000010
 8001708:	20004b08 	.word	0x20004b08
 800170c:	20000000 	.word	0x20000000
 8001710:	20004d28 	.word	0x20004d28
 8001714:	20004f64 	.word	0x20004f64
 8001718:	20004e9c 	.word	0x20004e9c
 800171c:	2000502c 	.word	0x2000502c
 8001720:	51eb851f 	.word	0x51eb851f
 8001724:	20004b04 	.word	0x20004b04

08001728 <Start_Rx_Mapping>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Rx_Mapping */
void Start_Rx_Mapping(void *argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Rx_Mapping */
	/* Infinite loop */
	for(;;)
	{
		//BSP_LCD_DisplayStringAtLine(4, "RX MAPPING");
		if(CheckFlags())
 8001730:	f7fe ff46 	bl	80005c0 <CheckFlags>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02d      	beq.n	8001796 <Start_Rx_Mapping+0x6e>
		{
			for(int i = 0; i < MAP_VALS_SIZE; i++ ) {
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e026      	b.n	800178e <Start_Rx_Mapping+0x66>
				if(i < 4) //First 4 channels are sticks, all others are switches
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b03      	cmp	r3, #3
 8001744:	dc0f      	bgt.n	8001766 <Start_Rx_Mapping+0x3e>
					MappedVals[i] = MapRxToPercent(ChannelVals[i]);
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <Start_Rx_Mapping+0xb0>)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff70 	bl	8000634 <MapRxToPercent>
 8001754:	eef0 7a40 	vmov.f32	s15, s0
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <Start_Rx_Mapping+0xb4>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	edc3 7a00 	vstr	s15, [r3]
 8001764:	e010      	b.n	8001788 <Start_Rx_Mapping+0x60>
				else
					MappedVals[i] = MapRxToSwitch(ChannelVals[i]);
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <Start_Rx_Mapping+0xb0>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ff46 	bl	8000600 <MapRxToSwitch>
 8001774:	ee07 0a90 	vmov	s15, r0
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <Start_Rx_Mapping+0xb4>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < MAP_VALS_SIZE; i++ ) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b07      	cmp	r3, #7
 8001792:	ddd5      	ble.n	8001740 <Start_Rx_Mapping+0x18>
 8001794:	e01a      	b.n	80017cc <Start_Rx_Mapping+0xa4>
			}
		}
		else //Flags are not good, set values to safe values
		{
			for(int i = 0; i < 8; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	e014      	b.n	80017c6 <Start_Rx_Mapping+0x9e>
			{
				if(i < 4) //First 4 channels are sticks, all others are switches
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	dc07      	bgt.n	80017b2 <Start_Rx_Mapping+0x8a>
					MappedVals[i] = MAP_MID;
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <Start_Rx_Mapping+0xb4>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e006      	b.n	80017c0 <Start_Rx_Mapping+0x98>
				else
					MappedVals[i] = MAP_SWITCH_LOW;
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <Start_Rx_Mapping+0xb4>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b07      	cmp	r3, #7
 80017ca:	dde7      	ble.n	800179c <Start_Rx_Mapping+0x74>
			}
		}
		//TODO:CALL MAP_TO_MOTOR WHEN VALUES CHANGE
		osThreadSuspend(Rx_MappingHandle);
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <Start_Rx_Mapping+0xb8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00d fe21 	bl	800f418 <osThreadSuspend>
		if(CheckFlags())
 80017d6:	e7ab      	b.n	8001730 <Start_Rx_Mapping+0x8>
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000120 	.word	0x20000120
 80017e0:	20004bdc 	.word	0x20004bdc

080017e4 <Start_Battery_Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Battery_Monitor */
void Start_Battery_Monitor(void *argument)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		//BSP_LCD_DisplayStringAtLine(5, "BATTERY");
		//__NOP();
		osThreadSuspend(Battery_MonitorHandle);
 80017ec:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <Start_Battery_Monitor+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fe11 	bl	800f418 <osThreadSuspend>
 80017f6:	e7f9      	b.n	80017ec <Start_Battery_Monitor+0x8>
 80017f8:	20004be0 	.word	0x20004be0

080017fc <Start_Data_To_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_To_LCD */
void Start_Data_To_LCD(void *argument)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b087      	sub	sp, #28
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Data_To_LCD */
  /* Infinite loop */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001804:	2000      	movs	r0, #0
 8001806:	f001 feff 	bl	8003608 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(10, MotorBuffer2);

		BSP_LCD_DisplayStringAtLine(12, FlagBufferChar);*/


		sprintf(ChanBuffer1, "ChanVals: 1:%04d", ChannelVals[0]);
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <Start_Data_To_LCD+0x150>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	494f      	ldr	r1, [pc, #316]	; (8001950 <Start_Data_To_LCD+0x154>)
 8001812:	4850      	ldr	r0, [pc, #320]	; (8001954 <Start_Data_To_LCD+0x158>)
 8001814:	f011 fafa 	bl	8012e0c <siprintf>
		sprintf(ChanBuffer2, "2:%04d 3:%04d", ChannelVals[1], ChannelVals[2]);
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <Start_Data_To_LCD+0x150>)
 800181a:	885b      	ldrh	r3, [r3, #2]
 800181c:	461a      	mov	r2, r3
 800181e:	4b4b      	ldr	r3, [pc, #300]	; (800194c <Start_Data_To_LCD+0x150>)
 8001820:	889b      	ldrh	r3, [r3, #4]
 8001822:	494d      	ldr	r1, [pc, #308]	; (8001958 <Start_Data_To_LCD+0x15c>)
 8001824:	484d      	ldr	r0, [pc, #308]	; (800195c <Start_Data_To_LCD+0x160>)
 8001826:	f011 faf1 	bl	8012e0c <siprintf>
		sprintf(ChanBuffer3, "4:%04d 5:%04d", ChannelVals[3], ChannelVals[4]);
 800182a:	4b48      	ldr	r3, [pc, #288]	; (800194c <Start_Data_To_LCD+0x150>)
 800182c:	88db      	ldrh	r3, [r3, #6]
 800182e:	461a      	mov	r2, r3
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <Start_Data_To_LCD+0x150>)
 8001832:	891b      	ldrh	r3, [r3, #8]
 8001834:	494a      	ldr	r1, [pc, #296]	; (8001960 <Start_Data_To_LCD+0x164>)
 8001836:	484b      	ldr	r0, [pc, #300]	; (8001964 <Start_Data_To_LCD+0x168>)
 8001838:	f011 fae8 	bl	8012e0c <siprintf>

		sprintf(MapBuffer1, "MappedVals: 1:%04d", (int)MappedVals[0]);
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <Start_Data_To_LCD+0x16c>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001846:	ee17 2a90 	vmov	r2, s15
 800184a:	4948      	ldr	r1, [pc, #288]	; (800196c <Start_Data_To_LCD+0x170>)
 800184c:	4848      	ldr	r0, [pc, #288]	; (8001970 <Start_Data_To_LCD+0x174>)
 800184e:	f011 fadd 	bl	8012e0c <siprintf>
		sprintf(MapBuffer2, "2:%04d 3:%04d", (int)MappedVals[1], (int)MappedVals[2]);
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <Start_Data_To_LCD+0x16c>)
 8001854:	edd3 7a01 	vldr	s15, [r3, #4]
 8001858:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <Start_Data_To_LCD+0x16c>)
 800185e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001866:	ee17 3a90 	vmov	r3, s15
 800186a:	ee17 2a10 	vmov	r2, s14
 800186e:	493a      	ldr	r1, [pc, #232]	; (8001958 <Start_Data_To_LCD+0x15c>)
 8001870:	4840      	ldr	r0, [pc, #256]	; (8001974 <Start_Data_To_LCD+0x178>)
 8001872:	f011 facb 	bl	8012e0c <siprintf>
		sprintf(MapBuffer3, "4:%04d 5:%04d", (int)MappedVals[3], (int)MappedVals[4]);
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <Start_Data_To_LCD+0x16c>)
 8001878:	edd3 7a03 	vldr	s15, [r3, #12]
 800187c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <Start_Data_To_LCD+0x16c>)
 8001882:	edd3 7a04 	vldr	s15, [r3, #16]
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	ee17 2a10 	vmov	r2, s14
 8001892:	4933      	ldr	r1, [pc, #204]	; (8001960 <Start_Data_To_LCD+0x164>)
 8001894:	4838      	ldr	r0, [pc, #224]	; (8001978 <Start_Data_To_LCD+0x17c>)
 8001896:	f011 fab9 	bl	8012e0c <siprintf>

		sprintf(MotorBuffer1, "1:%04d 2:%04d", MotorVals[0], MotorVals[1]);
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <Start_Data_To_LCD+0x180>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <Start_Data_To_LCD+0x180>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4937      	ldr	r1, [pc, #220]	; (8001980 <Start_Data_To_LCD+0x184>)
 80018a4:	4837      	ldr	r0, [pc, #220]	; (8001984 <Start_Data_To_LCD+0x188>)
 80018a6:	f011 fab1 	bl	8012e0c <siprintf>
		sprintf(MotorBuffer2, "3:%04d 4:%04d", MotorVals[2], MotorVals[3]);
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <Start_Data_To_LCD+0x180>)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <Start_Data_To_LCD+0x180>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4935      	ldr	r1, [pc, #212]	; (8001988 <Start_Data_To_LCD+0x18c>)
 80018b4:	4835      	ldr	r0, [pc, #212]	; (800198c <Start_Data_To_LCD+0x190>)
 80018b6:	f011 faa9 	bl	8012e0c <siprintf>

		sprintf(FlagBufferChar, "FgBuf:[%1d,%1d,%1d,%1d,%1d]", FlagBuffer[0], FlagBuffer[1], FlagBuffer[2], FlagBuffer[3], FlagBuffer[4]);
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <Start_Data_To_LCD+0x194>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <Start_Data_To_LCD+0x194>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	461c      	mov	r4, r3
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <Start_Data_To_LCD+0x194>)
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <Start_Data_To_LCD+0x194>)
 80018ce:	78db      	ldrb	r3, [r3, #3]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <Start_Data_To_LCD+0x194>)
 80018d4:	791b      	ldrb	r3, [r3, #4]
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	9101      	str	r1, [sp, #4]
 80018da:	9200      	str	r2, [sp, #0]
 80018dc:	4623      	mov	r3, r4
 80018de:	4602      	mov	r2, r0
 80018e0:	492c      	ldr	r1, [pc, #176]	; (8001994 <Start_Data_To_LCD+0x198>)
 80018e2:	482d      	ldr	r0, [pc, #180]	; (8001998 <Start_Data_To_LCD+0x19c>)
 80018e4:	f011 fa92 	bl	8012e0c <siprintf>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f001 fe8d 	bl	8003608 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(0, ChanBuffer1);
 80018ee:	4919      	ldr	r1, [pc, #100]	; (8001954 <Start_Data_To_LCD+0x158>)
 80018f0:	2000      	movs	r0, #0
 80018f2:	f001 ffb7 	bl	8003864 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(1, ChanBuffer2);
 80018f6:	4919      	ldr	r1, [pc, #100]	; (800195c <Start_Data_To_LCD+0x160>)
 80018f8:	2001      	movs	r0, #1
 80018fa:	f001 ffb3 	bl	8003864 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(2, ChanBuffer3);
 80018fe:	4919      	ldr	r1, [pc, #100]	; (8001964 <Start_Data_To_LCD+0x168>)
 8001900:	2002      	movs	r0, #2
 8001902:	f001 ffaf 	bl	8003864 <BSP_LCD_DisplayStringAtLine>

		BSP_LCD_DisplayStringAtLine(4, MapBuffer1);
 8001906:	491a      	ldr	r1, [pc, #104]	; (8001970 <Start_Data_To_LCD+0x174>)
 8001908:	2004      	movs	r0, #4
 800190a:	f001 ffab 	bl	8003864 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(5, MapBuffer2);
 800190e:	4919      	ldr	r1, [pc, #100]	; (8001974 <Start_Data_To_LCD+0x178>)
 8001910:	2005      	movs	r0, #5
 8001912:	f001 ffa7 	bl	8003864 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(6, MapBuffer3);
 8001916:	4918      	ldr	r1, [pc, #96]	; (8001978 <Start_Data_To_LCD+0x17c>)
 8001918:	2006      	movs	r0, #6
 800191a:	f001 ffa3 	bl	8003864 <BSP_LCD_DisplayStringAtLine>

		BSP_LCD_DisplayStringAtLine(8, "MotorVals:");
 800191e:	491f      	ldr	r1, [pc, #124]	; (800199c <Start_Data_To_LCD+0x1a0>)
 8001920:	2008      	movs	r0, #8
 8001922:	f001 ff9f 	bl	8003864 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, MotorBuffer1);
 8001926:	4917      	ldr	r1, [pc, #92]	; (8001984 <Start_Data_To_LCD+0x188>)
 8001928:	2009      	movs	r0, #9
 800192a:	f001 ff9b 	bl	8003864 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(10, MotorBuffer2);
 800192e:	4917      	ldr	r1, [pc, #92]	; (800198c <Start_Data_To_LCD+0x190>)
 8001930:	200a      	movs	r0, #10
 8001932:	f001 ff97 	bl	8003864 <BSP_LCD_DisplayStringAtLine>

		BSP_LCD_DisplayStringAtLine(12, FlagBufferChar);
 8001936:	4918      	ldr	r1, [pc, #96]	; (8001998 <Start_Data_To_LCD+0x19c>)
 8001938:	200c      	movs	r0, #12
 800193a:	f001 ff93 	bl	8003864 <BSP_LCD_DisplayStringAtLine>

		osThreadSuspend(Data_To_LCDHandle);
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <Start_Data_To_LCD+0x1a4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f00d fd68 	bl	800f418 <osThreadSuspend>
		sprintf(ChanBuffer1, "ChanVals: 1:%04d", ChannelVals[0]);
 8001948:	e75f      	b.n	800180a <Start_Data_To_LCD+0xe>
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000
 8001950:	0801351c 	.word	0x0801351c
 8001954:	200052a4 	.word	0x200052a4
 8001958:	08013530 	.word	0x08013530
 800195c:	20004c38 	.word	0x20004c38
 8001960:	08013540 	.word	0x08013540
 8001964:	20004be4 	.word	0x20004be4
 8001968:	20000120 	.word	0x20000120
 800196c:	08013550 	.word	0x08013550
 8001970:	20005170 	.word	0x20005170
 8001974:	20004ab8 	.word	0x20004ab8
 8001978:	20004d14 	.word	0x20004d14
 800197c:	20000140 	.word	0x20000140
 8001980:	08013564 	.word	0x08013564
 8001984:	20005158 	.word	0x20005158
 8001988:	08013574 	.word	0x08013574
 800198c:	200052cc 	.word	0x200052cc
 8001990:	20000010 	.word	0x20000010
 8001994:	08013584 	.word	0x08013584
 8001998:	200052b8 	.word	0x200052b8
 800199c:	080135a0 	.word	0x080135a0
 80019a0:	2000518c 	.word	0x2000518c

080019a4 <Start_Map_To_Motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Map_To_Motors */
void Start_Map_To_Motors(void *argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Map_To_Motors */
	/* Infinite loop */
	for(;;)
	{
		//BSP_LCD_DisplayStringAtLine(7, "MAP MOTORS");
		for(int i = 0; i < MOTOR_VALS_SIZE; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e011      	b.n	80019d6 <Start_Map_To_Motors+0x32>
		{
			MotorVals[i] = MapPercentToMotor(MappedVals[i]);
 80019b2:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <Start_Map_To_Motors+0x44>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f7fe fe7f 	bl	80006c4 <MapPercentToMotor>
 80019c6:	4601      	mov	r1, r0
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <Start_Map_To_Motors+0x48>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < MOTOR_VALS_SIZE; i++)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	ddea      	ble.n	80019b2 <Start_Map_To_Motors+0xe>
		}
		//BSP_LCD_DisplayStringAtLine(7, "MAP MOTORS");
		osThreadSuspend(Map_To_MotorsHandle);
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <Start_Map_To_Motors+0x4c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00d fd19 	bl	800f418 <osThreadSuspend>
		for(int i = 0; i < MOTOR_VALS_SIZE; i++)
 80019e6:	e7e1      	b.n	80019ac <Start_Map_To_Motors+0x8>
 80019e8:	20000120 	.word	0x20000120
 80019ec:	20000140 	.word	0x20000140
 80019f0:	2000516c 	.word	0x2000516c

080019f4 <RadioReadTimCallBack>:
  /* USER CODE END Start_Map_To_Motors */
}

/* RadioReadTimCallBack function */
void RadioReadTimCallBack(void *argument)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RadioReadTimCallBack */
	osThreadResume(Radio_ReceiverHandle);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <RadioReadTimCallBack+0x38>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00d fd3d 	bl	800f480 <osThreadResume>
	osThreadResume(Rx_MappingHandle);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <RadioReadTimCallBack+0x3c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00d fd38 	bl	800f480 <osThreadResume>
	osThreadResume(Map_To_MotorsHandle);
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <RadioReadTimCallBack+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00d fd33 	bl	800f480 <osThreadResume>
	osThreadResume(Run_MotorsHandle);
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <RadioReadTimCallBack+0x44>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00d fd2e 	bl	800f480 <osThreadResume>
  /* USER CODE END RadioReadTimCallBack */
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20004b04 	.word	0x20004b04
 8001a30:	20004bdc 	.word	0x20004bdc
 8001a34:	2000516c 	.word	0x2000516c
 8001a38:	20005188 	.word	0x20005188

08001a3c <LCDDelayTimCallback>:

/* LCDDelayTimCallback function */
void LCDDelayTimCallback(void *argument)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDDelayTimCallback */
	osThreadResume(Data_To_LCDHandle);
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <LCDDelayTimCallback+0x1c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f00d fd19 	bl	800f480 <osThreadResume>
  /* USER CODE END LCDDelayTimCallback */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000518c 	.word	0x2000518c

08001a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a6e:	f002 fa15 	bl	8003e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40001000 	.word	0x40001000

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <HAL_MspInit+0x4c>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_MspInit+0x4c>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_ADC_MspInit+0xe4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d15b      	bne.n	8001bba <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_ADC_MspInit+0xe8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001b72:	2311      	movs	r3, #17
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4811      	ldr	r0, [pc, #68]	; (8001bcc <HAL_ADC_MspInit+0xec>)
 8001b86:	f003 fbab 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001b8a:	2326      	movs	r3, #38	; 0x26
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <HAL_ADC_MspInit+0xf0>)
 8001b9e:	f003 fb9f 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <HAL_ADC_MspInit+0xf4>)
 8001bb6:	f003 fb93 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3730      	adds	r7, #48	; 0x30
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_DAC_MspInit+0x8c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12f      	bne.n	8001c5a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_DAC_MspInit+0x90>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_DAC_MspInit+0x90>)
 8001c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_DAC_MspInit+0x90>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_DAC_MspInit+0x90>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_DAC_MspInit+0x90>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_DAC_MspInit+0x90>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001c32:	2310      	movs	r3, #16
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4809      	ldr	r0, [pc, #36]	; (8001c6c <HAL_DAC_MspInit+0x94>)
 8001c46:	f003 fb4b 	bl	80052e0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2036      	movs	r0, #54	; 0x36
 8001c50:	f002 fc90 	bl	8004574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c54:	2036      	movs	r0, #54	; 0x36
 8001c56:	f002 fca9 	bl	80045ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40007400 	.word	0x40007400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000

08001c70 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_DFSDM_ChannelMspInit+0x40>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a76      	ldr	r2, [pc, #472]	; (8001e70 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_DFSDM_ChannelMspInit+0x40>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_DFSDM_ChannelMspInit+0x40>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d154      	bne.n	8001d5a <HAL_DFSDM_ChannelMspInit+0xea>
 8001cb0:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d150      	bne.n	8001d5a <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	4a6f      	ldr	r2, [pc, #444]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4a68      	ldr	r2, [pc, #416]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d1e:	2306      	movs	r3, #6
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4856      	ldr	r0, [pc, #344]	; (8001e84 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001d2a:	f003 fad9 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001d2e:	2340      	movs	r3, #64	; 0x40
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	484f      	ldr	r0, [pc, #316]	; (8001e88 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001d4a:	f003 fac9 	bl	80052e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001d56:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001d58:	e084      	b.n	8001e64 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a43      	ldr	r2, [pc, #268]	; (8001e6c <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d07f      	beq.n	8001e64 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d07a      	beq.n	8001e64 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d075      	beq.n	8001e64 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d070      	beq.n	8001e64 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d16c      	bne.n	8001e64 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4619      	mov	r1, r3
 8001e14:	481b      	ldr	r0, [pc, #108]	; (8001e84 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001e16:	f003 fa63 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4814      	ldr	r0, [pc, #80]	; (8001e88 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001e36:	f003 fa53 	bl	80052e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001e56:	f003 fa43 	bl	80052e0 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3738      	adds	r7, #56	; 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40016000 	.word	0x40016000
 8001e70:	40016020 	.word	0x40016020
 8001e74:	40016040 	.word	0x40016040
 8001e78:	40016060 	.word	0x40016060
 8001e7c:	20000150 	.word	0x20000150
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	20000154 	.word	0x20000154
 8001e90:	40020400 	.word	0x40020400

08001e94 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_FMPI2C_MspInit+0x84>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d12b      	bne.n	8001f0e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_FMPI2C_MspInit+0x88>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_FMPI2C_MspInit+0x88>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_FMPI2C_MspInit+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed6:	2312      	movs	r3, #18
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <HAL_FMPI2C_MspInit+0x8c>)
 8001eee:	f003 f9f7 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_FMPI2C_MspInit+0x88>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_FMPI2C_MspInit+0x88>)
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_FMPI2C_MspInit+0x88>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40006000 	.word	0x40006000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020800 	.word	0x40020800

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_I2C_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12c      	bne.n	8001fa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001f62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f68:	2312      	movs	r3, #18
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f74:	2304      	movs	r3, #4
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <HAL_I2C_MspInit+0x8c>)
 8001f80:	f003 f9ae 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40005800 	.word	0x40005800
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_I2S_MspInit+0x15c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	f040 8097 	bne.w	8002106 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4a45      	ldr	r2, [pc, #276]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6313      	str	r3, [r2, #48]	; 0x30
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <HAL_I2S_MspInit+0x160>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	6313      	str	r3, [r2, #48]	; 0x30
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_I2S_MspInit+0x160>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_I2S_MspInit+0x160>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a30      	ldr	r2, [pc, #192]	; (8002114 <HAL_I2S_MspInit+0x160>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <HAL_I2S_MspInit+0x160>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8002064:	2304      	movs	r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8002074:	2306      	movs	r3, #6
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4826      	ldr	r0, [pc, #152]	; (8002118 <HAL_I2S_MspInit+0x164>)
 8002080:	f003 f92e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8002084:	2308      	movs	r3, #8
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002094:	2305      	movs	r3, #5
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	481e      	ldr	r0, [pc, #120]	; (8002118 <HAL_I2S_MspInit+0x164>)
 80020a0:	f003 f91e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80020a4:	2308      	movs	r3, #8
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b4:	2305      	movs	r3, #5
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4817      	ldr	r0, [pc, #92]	; (800211c <HAL_I2S_MspInit+0x168>)
 80020c0:	f003 f90e 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80020c4:	2308      	movs	r3, #8
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d4:	2305      	movs	r3, #5
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4810      	ldr	r0, [pc, #64]	; (8002120 <HAL_I2S_MspInit+0x16c>)
 80020e0:	f003 f8fe 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80020e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f6:	2305      	movs	r3, #5
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <HAL_I2S_MspInit+0x170>)
 8002102:	f003 f8ed 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3730      	adds	r7, #48	; 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40003800 	.word	0x40003800
 8002114:	40023800 	.word	0x40023800
 8002118:	40020800 	.word	0x40020800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40020400 	.word	0x40020400

08002128 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08e      	sub	sp, #56	; 0x38
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a56      	ldr	r2, [pc, #344]	; (80022a0 <HAL_QSPI_MspInit+0x178>)
 8002146:	4293      	cmp	r3, r2
 8002148:	f040 80a6 	bne.w	8002298 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6393      	str	r3, [r2, #56]	; 0x38
 800215c:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	4b4d      	ldr	r3, [pc, #308]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a4c      	ldr	r2, [pc, #304]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 800218e:	f043 0320 	orr.w	r3, r3, #32
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6313      	str	r3, [r2, #48]	; 0x30
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_QSPI_MspInit+0x17c>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80021f4:	2304      	movs	r3, #4
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002204:	2309      	movs	r3, #9
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	4826      	ldr	r0, [pc, #152]	; (80022a8 <HAL_QSPI_MspInit+0x180>)
 8002210:	f003 f866 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8002214:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002226:	230a      	movs	r3, #10
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	4619      	mov	r1, r3
 8002230:	481e      	ldr	r0, [pc, #120]	; (80022ac <HAL_QSPI_MspInit+0x184>)
 8002232:	f003 f855 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8002236:	2304      	movs	r3, #4
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002246:	2309      	movs	r3, #9
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	4619      	mov	r1, r3
 8002250:	4817      	ldr	r0, [pc, #92]	; (80022b0 <HAL_QSPI_MspInit+0x188>)
 8002252:	f003 f845 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8002256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002268:	2309      	movs	r3, #9
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	4810      	ldr	r0, [pc, #64]	; (80022b4 <HAL_QSPI_MspInit+0x18c>)
 8002274:	f003 f834 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8002278:	2340      	movs	r3, #64	; 0x40
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002288:	230a      	movs	r3, #10
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <HAL_QSPI_MspInit+0x190>)
 8002294:	f003 f824 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3738      	adds	r7, #56	; 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	a0001000 	.word	0xa0001000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021800 	.word	0x40021800

080022bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a28      	ldr	r2, [pc, #160]	; (800237c <HAL_SD_MspInit+0xc0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d14a      	bne.n	8002374 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_SD_MspInit+0xc4>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <HAL_SD_MspInit+0xc4>)
 80022e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_SD_MspInit+0xc4>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_SD_MspInit+0xc4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_SD_MspInit+0xc4>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_SD_MspInit+0xc4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_SD_MspInit+0xc4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_SD_MspInit+0xc4>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_SD_MspInit+0xc4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8002332:	2340      	movs	r3, #64	; 0x40
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002342:	230c      	movs	r3, #12
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <HAL_SD_MspInit+0xc8>)
 800234e:	f002 ffc7 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8002352:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002356:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002364:	230c      	movs	r3, #12
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_SD_MspInit+0xcc>)
 8002370:	f002 ffb6 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020800 	.word	0x40020800

0800238c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_TIM_Base_MspInit+0x3c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10d      	bne.n	80023ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x40>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_TIM_Base_MspInit+0x40>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_TIM_Base_MspInit+0x40>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_TIM_MspPostInit+0x68>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d11d      	bne.n	800242e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_TIM_MspPostInit+0x6c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_TIM_MspPostInit+0x6c>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_TIM_MspPostInit+0x6c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800240e:	2321      	movs	r3, #33	; 0x21
 8002410:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800241e:	2302      	movs	r3, #2
 8002420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_TIM_MspPostInit+0x70>)
 800242a:	f002 ff59 	bl	80052e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40000400 	.word	0x40000400
 800243c:	40023800 	.word	0x40023800
 8002440:	40020400 	.word	0x40020400

08002444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a67      	ldr	r2, [pc, #412]	; (8002600 <HAL_UART_MspInit+0x1bc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d163      	bne.n	800252e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 8002470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a5e      	ldr	r2, [pc, #376]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 800248c:	f043 0320 	orr.w	r3, r3, #32
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249e:	23c0      	movs	r3, #192	; 0xc0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80024ae:	2308      	movs	r3, #8
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	4853      	ldr	r0, [pc, #332]	; (8002608 <HAL_UART_MspInit+0x1c4>)
 80024ba:	f002 ff11 	bl	80052e0 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024c0:	4a53      	ldr	r2, [pc, #332]	; (8002610 <HAL_UART_MspInit+0x1cc>)
 80024c2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024c6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80024ca:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024cc:	4b4f      	ldr	r3, [pc, #316]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d2:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024de:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e0:	4b4a      	ldr	r3, [pc, #296]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e6:	4b49      	ldr	r3, [pc, #292]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80024ec:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024f2:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f8:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <HAL_UART_MspInit+0x1c8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002500:	4842      	ldr	r0, [pc, #264]	; (800260c <HAL_UART_MspInit+0x1c8>)
 8002502:	f002 fa83 	bl	8004a0c <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800250c:	f7ff fab8 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3e      	ldr	r2, [pc, #248]	; (800260c <HAL_UART_MspInit+0x1c8>)
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
 8002516:	4a3d      	ldr	r2, [pc, #244]	; (800260c <HAL_UART_MspInit+0x1c8>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	2052      	movs	r0, #82	; 0x52
 8002522:	f002 f827 	bl	8004574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002526:	2052      	movs	r0, #82	; 0x52
 8002528:	f002 f840 	bl	80045ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800252c:	e064      	b.n	80025f8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART10)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_UART_MspInit+0x1d0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d12d      	bne.n	8002594 <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART10_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	4a30      	ldr	r2, [pc, #192]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 8002542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002546:	6453      	str	r3, [r2, #68]	; 0x44
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8002570:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257a:	2301      	movs	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8002582:	230b      	movs	r3, #11
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	4822      	ldr	r0, [pc, #136]	; (8002618 <HAL_UART_MspInit+0x1d4>)
 800258e:	f002 fea7 	bl	80052e0 <HAL_GPIO_Init>
}
 8002592:	e031      	b.n	80025f8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_UART_MspInit+0x1d8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12c      	bne.n	80025f8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 80025a8:	f043 0320 	orr.w	r3, r3, #32
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 80025c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_UART_MspInit+0x1c0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80025d6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025e8:	2308      	movs	r3, #8
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f0:	4619      	mov	r1, r3
 80025f2:	4809      	ldr	r0, [pc, #36]	; (8002618 <HAL_UART_MspInit+0x1d4>)
 80025f4:	f002 fe74 	bl	80052e0 <HAL_GPIO_Init>
}
 80025f8:	bf00      	nop
 80025fa:	3738      	adds	r7, #56	; 0x38
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40007800 	.word	0x40007800
 8002604:	40023800 	.word	0x40023800
 8002608:	40021400 	.word	0x40021400
 800260c:	20004e38 	.word	0x20004e38
 8002610:	40026058 	.word	0x40026058
 8002614:	40011c00 	.word	0x40011c00
 8002618:	40021800 	.word	0x40021800
 800261c:	40011400 	.word	0x40011400

08002620 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_FSMC_MspInit+0xc8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d151      	bne.n	80026e0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_FSMC_MspInit+0xc8>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_FSMC_MspInit+0xcc>)
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_FSMC_MspInit+0xcc>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6393      	str	r3, [r2, #56]	; 0x38
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_FSMC_MspInit+0xcc>)
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800265e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002662:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002670:	230c      	movs	r3, #12
 8002672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	4619      	mov	r1, r3
 8002678:	481d      	ldr	r0, [pc, #116]	; (80026f0 <HAL_FSMC_MspInit+0xd0>)
 800267a:	f002 fe31 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 800267e:	f240 433f 	movw	r3, #1087	; 0x43f
 8002682:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002690:	230c      	movs	r3, #12
 8002692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	4619      	mov	r1, r3
 8002698:	4816      	ldr	r0, [pc, #88]	; (80026f4 <HAL_FSMC_MspInit+0xd4>)
 800269a:	f002 fe21 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 800269e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80026a2:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026b0:	230c      	movs	r3, #12
 80026b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	480f      	ldr	r0, [pc, #60]	; (80026f8 <HAL_FSMC_MspInit+0xd8>)
 80026ba:	f002 fe11 	bl	80052e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80026be:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80026c2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026d0:	230c      	movs	r3, #12
 80026d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <HAL_FSMC_MspInit+0xdc>)
 80026da:	f002 fe01 	bl	80052e0 <HAL_GPIO_Init>
 80026de:	e000      	b.n	80026e2 <HAL_FSMC_MspInit+0xc2>
    return;
 80026e0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000158 	.word	0x20000158
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40021400 	.word	0x40021400
 80026f4:	40021800 	.word	0x40021800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40020c00 	.word	0x40020c00

08002700 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002708:	f7ff ff8a 	bl	8002620 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	2036      	movs	r0, #54	; 0x36
 800272a:	f001 ff23 	bl	8004574 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800272e:	2036      	movs	r0, #54	; 0x36
 8002730:	f001 ff3c 	bl	80045ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_InitTick+0xa0>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_InitTick+0xa0>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_InitTick+0xa0>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002750:	f107 0210 	add.w	r2, r7, #16
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f005 fcc6 	bl	80080ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002760:	f005 fc9c 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 8002764:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_InitTick+0xa4>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	3b01      	subs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_InitTick+0xa8>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_InitTick+0xac>)
 8002778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_InitTick+0xa8>)
 800277c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_InitTick+0xa8>)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_InitTick+0xa8>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_InitTick+0xa8>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_InitTick+0xa8>)
 8002796:	f007 f8a9 	bl	80098ec <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027a0:	4806      	ldr	r0, [pc, #24]	; (80027bc <HAL_InitTick+0xa8>)
 80027a2:	f007 f8ce 	bl	8009942 <HAL_TIM_Base_Start_IT>
 80027a6:	4603      	mov	r3, r0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3730      	adds	r7, #48	; 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	20005374 	.word	0x20005374
 80027c0:	40001000 	.word	0x40001000

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <MemManage_Handler+0x4>

080027de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <BusFault_Handler+0x4>

080027e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <UsageFault_Handler+0x4>

080027ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <DMA1_Stream3_IRQHandler+0x10>)
 80027fe:	f002 fa2d 	bl	8004c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20004e38 	.word	0x20004e38

0800280c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <TIM6_DAC_IRQHandler+0x14>)
 8002812:	f001 fefb 	bl	800460c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <TIM6_DAC_IRQHandler+0x18>)
 8002818:	f007 f92a 	bl	8009a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200050f4 	.word	0x200050f4
 8002824:	20005374 	.word	0x20005374

08002828 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <OTG_FS_IRQHandler+0x10>)
 800282e:	f003 f991 	bl	8005b54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000580c 	.word	0x2000580c

0800283c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <UART7_IRQHandler+0x10>)
 8002842:	f008 f831 	bl	800a8a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20004b08 	.word	0x20004b08

08002850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <_sbrk+0x5c>)
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <_sbrk+0x60>)
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <_sbrk+0x64>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <_sbrk+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002880:	f010 f9be 	bl	8012c00 <__errno>
 8002884:	4602      	mov	r2, r0
 8002886:	230c      	movs	r3, #12
 8002888:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e009      	b.n	80028a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <_sbrk+0x64>)
 80028a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20050000 	.word	0x20050000
 80028b0:	00000400 	.word	0x00000400
 80028b4:	2000015c 	.word	0x2000015c
 80028b8:	20005ad8 	.word	0x20005ad8

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <SystemInit+0x28>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <SystemInit+0x28>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <SystemInit+0x28>)
 80028d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d6:	609a      	str	r2, [r3, #8]
#endif
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80028ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028ee:	e003      	b.n	80028f8 <LoopCopyDataInit>

080028f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028f6:	3104      	adds	r1, #4

080028f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028f8:	480b      	ldr	r0, [pc, #44]	; (8002928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002900:	d3f6      	bcc.n	80028f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002904:	e002      	b.n	800290c <LoopFillZerobss>

08002906 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002908:	f842 3b04 	str.w	r3, [r2], #4

0800290c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800290e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002910:	d3f9      	bcc.n	8002906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002912:	f7ff ffd3 	bl	80028bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002916:	f010 f979 	bl	8012c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291a:	f7fd ff45 	bl	80007a8 <main>
  bx  lr    
 800291e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002920:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002924:	0801623c 	.word	0x0801623c
  ldr  r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800292c:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8002930:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 8002934:	20005ad4 	.word	0x20005ad4

08002938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC_IRQHandler>

0800293a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002940:	f000 fd6e 	bl	8003420 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2010      	movs	r0, #16
 800294a:	f000 f9e4 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800294e:	200a      	movs	r0, #10
 8002950:	f000 fd8d 	bl	800346e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	2001      	movs	r0, #1
 800295a:	f000 f9dc 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800295e:	20c8      	movs	r0, #200	; 0xc8
 8002960:	f000 fd85 	bl	800346e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2011      	movs	r0, #17
 800296a:	f000 f9d4 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800296e:	2078      	movs	r0, #120	; 0x78
 8002970:	f000 fd7d 	bl	800346e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002974:	2300      	movs	r3, #0
 8002976:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002978:	463b      	mov	r3, r7
 800297a:	2201      	movs	r2, #1
 800297c:	4619      	mov	r1, r3
 800297e:	2036      	movs	r0, #54	; 0x36
 8002980:	f000 f9c9 	bl	8002d16 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002984:	2305      	movs	r3, #5
 8002986:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002988:	463b      	mov	r3, r7
 800298a:	2201      	movs	r2, #1
 800298c:	4619      	mov	r1, r3
 800298e:	203a      	movs	r0, #58	; 0x3a
 8002990:	f000 f9c1 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	2021      	movs	r0, #33	; 0x21
 800299a:	f000 f9bc 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80029a6:	2300      	movs	r3, #0
 80029a8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80029aa:	23ef      	movs	r3, #239	; 0xef
 80029ac:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80029ae:	463b      	mov	r3, r7
 80029b0:	2204      	movs	r2, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	202a      	movs	r0, #42	; 0x2a
 80029b6:	f000 f9ae 	bl	8002d16 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80029ba:	2300      	movs	r3, #0
 80029bc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80029be:	2300      	movs	r3, #0
 80029c0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80029c2:	2300      	movs	r3, #0
 80029c4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80029c6:	23ef      	movs	r3, #239	; 0xef
 80029c8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80029ca:	463b      	mov	r3, r7
 80029cc:	2204      	movs	r2, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	202b      	movs	r0, #43	; 0x2b
 80029d2:	f000 f9a0 	bl	8002d16 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80029d6:	230c      	movs	r3, #12
 80029d8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80029da:	230c      	movs	r3, #12
 80029dc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80029e2:	2333      	movs	r3, #51	; 0x33
 80029e4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80029e6:	2333      	movs	r3, #51	; 0x33
 80029e8:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80029ea:	463b      	mov	r3, r7
 80029ec:	2205      	movs	r2, #5
 80029ee:	4619      	mov	r1, r3
 80029f0:	20b2      	movs	r0, #178	; 0xb2
 80029f2:	f000 f990 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80029f6:	2335      	movs	r3, #53	; 0x35
 80029f8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80029fa:	463b      	mov	r3, r7
 80029fc:	2201      	movs	r2, #1
 80029fe:	4619      	mov	r1, r3
 8002a00:	20b7      	movs	r0, #183	; 0xb7
 8002a02:	f000 f988 	bl	8002d16 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8002a06:	231f      	movs	r3, #31
 8002a08:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	20bb      	movs	r0, #187	; 0xbb
 8002a12:	f000 f980 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8002a16:	232c      	movs	r3, #44	; 0x2c
 8002a18:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4619      	mov	r1, r3
 8002a20:	20c0      	movs	r0, #192	; 0xc0
 8002a22:	f000 f978 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8002a26:	2301      	movs	r3, #1
 8002a28:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002a2a:	23c3      	movs	r3, #195	; 0xc3
 8002a2c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2202      	movs	r2, #2
 8002a32:	4619      	mov	r1, r3
 8002a34:	20c2      	movs	r0, #194	; 0xc2
 8002a36:	f000 f96e 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2201      	movs	r2, #1
 8002a42:	4619      	mov	r1, r3
 8002a44:	20c4      	movs	r0, #196	; 0xc4
 8002a46:	f000 f966 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2201      	movs	r2, #1
 8002a52:	4619      	mov	r1, r3
 8002a54:	20c6      	movs	r0, #198	; 0xc6
 8002a56:	f000 f95e 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002a5a:	23a4      	movs	r3, #164	; 0xa4
 8002a5c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002a5e:	23a1      	movs	r3, #161	; 0xa1
 8002a60:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002a62:	463b      	mov	r3, r7
 8002a64:	2201      	movs	r2, #1
 8002a66:	4619      	mov	r1, r3
 8002a68:	20d0      	movs	r0, #208	; 0xd0
 8002a6a:	f000 f954 	bl	8002d16 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002a6e:	23d0      	movs	r3, #208	; 0xd0
 8002a70:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002a72:	2308      	movs	r3, #8
 8002a74:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002a76:	2311      	movs	r3, #17
 8002a78:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002a7e:	230c      	movs	r3, #12
 8002a80:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002a82:	2315      	movs	r3, #21
 8002a84:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002a86:	2339      	movs	r3, #57	; 0x39
 8002a88:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002a8a:	2333      	movs	r3, #51	; 0x33
 8002a8c:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002a8e:	2350      	movs	r3, #80	; 0x50
 8002a90:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002a92:	2336      	movs	r3, #54	; 0x36
 8002a94:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002a96:	2313      	movs	r3, #19
 8002a98:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002a9a:	2314      	movs	r3, #20
 8002a9c:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002a9e:	2329      	movs	r3, #41	; 0x29
 8002aa0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002aa2:	232d      	movs	r3, #45	; 0x2d
 8002aa4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	220e      	movs	r2, #14
 8002aaa:	4619      	mov	r1, r3
 8002aac:	20e0      	movs	r0, #224	; 0xe0
 8002aae:	f000 f932 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002ab2:	23d0      	movs	r3, #208	; 0xd0
 8002ab4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8002aba:	2310      	movs	r3, #16
 8002abc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002aca:	2339      	movs	r3, #57	; 0x39
 8002acc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002ace:	2344      	movs	r3, #68	; 0x44
 8002ad0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002ad2:	2351      	movs	r3, #81	; 0x51
 8002ad4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002ad6:	230b      	movs	r3, #11
 8002ad8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002ada:	2316      	movs	r3, #22
 8002adc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002ade:	2314      	movs	r3, #20
 8002ae0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002ae2:	232f      	movs	r3, #47	; 0x2f
 8002ae4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002ae6:	2331      	movs	r3, #49	; 0x31
 8002ae8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8002aea:	463b      	mov	r3, r7
 8002aec:	220e      	movs	r2, #14
 8002aee:	4619      	mov	r1, r3
 8002af0:	20e1      	movs	r0, #225	; 0xe1
 8002af2:	f000 f910 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8002af6:	f000 f847 	bl	8002b88 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8002afa:	2300      	movs	r3, #0
 8002afc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002afe:	463b      	mov	r3, r7
 8002b00:	2201      	movs	r2, #1
 8002b02:	4619      	mov	r1, r3
 8002b04:	2035      	movs	r0, #53	; 0x35
 8002b06:	f000 f906 	bl	8002d16 <ST7789H2_WriteReg>

}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002b20:	2300      	movs	r3, #0
 8002b22:	723b      	strb	r3, [r7, #8]
 8002b24:	e025      	b.n	8002b72 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d120      	bne.n	8002b6e <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002b30:	2300      	movs	r3, #0
 8002b32:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002b34:	2301      	movs	r3, #1
 8002b36:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002b38:	23f0      	movs	r3, #240	; 0xf0
 8002b3a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002b40:	2300      	movs	r3, #0
 8002b42:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	2206      	movs	r2, #6
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2033      	movs	r0, #51	; 0x33
 8002b4e:	f000 f8e2 	bl	8002d16 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002b56:	2350      	movs	r3, #80	; 0x50
 8002b58:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4619      	mov	r1, r3
 8002b62:	2037      	movs	r0, #55	; 0x37
 8002b64:	f000 f8d7 	bl	8002d16 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002b68:	23c0      	movs	r3, #192	; 0xc0
 8002b6a:	723b      	strb	r3, [r7, #8]
 8002b6c:	e001      	b.n	8002b72 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002b6e:	2360      	movs	r3, #96	; 0x60
 8002b70:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	2201      	movs	r2, #1
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2036      	movs	r0, #54	; 0x36
 8002b7c:	f000 f8cb 	bl	8002d16 <ST7789H2_WriteReg>
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2029      	movs	r0, #41	; 0x29
 8002b92:	f000 f8c0 	bl	8002d16 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2011      	movs	r0, #17
 8002b9c:	f000 f8bb 	bl	8002d16 <ST7789H2_WriteReg>
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002baa:	23fe      	movs	r3, #254	; 0xfe
 8002bac:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	20bd      	movs	r0, #189	; 0xbd
 8002bb6:	f000 f8ae 	bl	8002d16 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2010      	movs	r0, #16
 8002bc0:	f000 f8a9 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002bc4:	200a      	movs	r0, #10
 8002bc6:	f000 fc52 	bl	800346e <LCD_IO_Delay>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002bd6:	23f0      	movs	r3, #240	; 0xf0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002be6:	23f0      	movs	r3, #240	; 0xf0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002bf6:	f000 fc13 	bl	8003420 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002bfa:	2004      	movs	r0, #4
 8002bfc:	f000 f8ad 	bl	8002d5a <ST7789H2_ReadReg>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29b      	uxth	r3, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460a      	mov	r2, r1
 8002c12:	80fb      	strh	r3, [r7, #6]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002c18:	2300      	movs	r3, #0
 8002c1a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3b11      	subs	r3, #17
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	2204      	movs	r2, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	202a      	movs	r0, #42	; 0x2a
 8002c3a:	f000 f86c 	bl	8002d16 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002c4c:	88bb      	ldrh	r3, [r7, #4]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3b11      	subs	r3, #17
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	202b      	movs	r0, #43	; 0x2b
 8002c60:	f000 f859 	bl	8002d16 <ST7789H2_WriteReg>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
 8002c76:	460b      	mov	r3, r1
 8002c78:	80bb      	strh	r3, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002c7e:	88ba      	ldrh	r2, [r7, #4]
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ffbf 	bl	8002c08 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	202c      	movs	r0, #44	; 0x2c
 8002c90:	f000 f841 	bl	8002d16 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fbc8 	bl	800342c <LCD_IO_WriteData>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	80fb      	strh	r3, [r7, #6]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002cb4:	88ba      	ldrh	r2, [r7, #4]
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ffa4 	bl	8002c08 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002cc0:	88ba      	ldrh	r2, [r7, #4]
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f9bd 	bl	8003046 <ST7789H2_ReadPixel_rgb888>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	733a      	strb	r2, [r7, #12]
 8002cd2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002cd6:	737a      	strb	r2, [r7, #13]
 8002cd8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002cdc:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002cde:	7b3b      	ldrb	r3, [r7, #12]
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002ce4:	7b7b      	ldrb	r3, [r7, #13]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	02db      	lsls	r3, r3, #11
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	7dbb      	ldrb	r3, [r7, #22]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	015b      	lsls	r3, r3, #5
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	7d7b      	ldrb	r3, [r7, #21]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	6039      	str	r1, [r7, #0]
 8002d20:	71fb      	strb	r3, [r7, #7]
 8002d22:	4613      	mov	r3, r2
 8002d24:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fb8c 	bl	8003446 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e00a      	b.n	8002d4a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fb74 	bl	800342c <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	3301      	adds	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	79bb      	ldrb	r3, [r7, #6]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3f0      	bcc.n	8002d34 <ST7789H2_WriteReg+0x1e>
  }
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fb6d 	bl	8003446 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002d6c:	f000 fb78 	bl	8003460 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002d70:	f000 fb76 	bl	8003460 <LCD_IO_ReadData>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b2db      	uxtb	r3, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002d80:	b490      	push	{r4, r7}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4604      	mov	r4, r0
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4623      	mov	r3, r4
 8002d90:	80fb      	strh	r3, [r7, #6]
 8002d92:	4603      	mov	r3, r0
 8002d94:	80bb      	strh	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	807b      	strh	r3, [r7, #2]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2bef      	cmp	r3, #239	; 0xef
 8002da2:	d803      	bhi.n	8002dac <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002da4:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <ST7789H2_SetDisplayWindow+0x94>)
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	8013      	strh	r3, [r2, #0]
 8002daa:	e002      	b.n	8002db2 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <ST7789H2_SetDisplayWindow+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	2bef      	cmp	r3, #239	; 0xef
 8002db6:	d803      	bhi.n	8002dc0 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002db8:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <ST7789H2_SetDisplayWindow+0x98>)
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	e002      	b.n	8002dc6 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <ST7789H2_SetDisplayWindow+0x98>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	4413      	add	r3, r2
 8002dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8002dce:	dc08      	bgt.n	8002de2 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002dd0:	887a      	ldrh	r2, [r7, #2]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <ST7789H2_SetDisplayWindow+0x9c>)
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e002      	b.n	8002de8 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <ST7789H2_SetDisplayWindow+0x9c>)
 8002de4:	22ef      	movs	r2, #239	; 0xef
 8002de6:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002de8:	883a      	ldrh	r2, [r7, #0]
 8002dea:	88bb      	ldrh	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	2bf0      	cmp	r3, #240	; 0xf0
 8002df0:	dc08      	bgt.n	8002e04 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002df2:	883a      	ldrh	r2, [r7, #0]
 8002df4:	88bb      	ldrh	r3, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <ST7789H2_SetDisplayWindow+0xa0>)
 8002e00:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002e02:	e002      	b.n	8002e0a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <ST7789H2_SetDisplayWindow+0xa0>)
 8002e06:	22ef      	movs	r2, #239	; 0xef
 8002e08:	801a      	strh	r2, [r3, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc90      	pop	{r4, r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000160 	.word	0x20000160
 8002e18:	20000162 	.word	0x20000162
 8002e1c:	20000054 	.word	0x20000054
 8002e20:	20000056 	.word	0x20000056

08002e24 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	80fb      	strh	r3, [r7, #6]
 8002e36:	4603      	mov	r3, r0
 8002e38:	80bb      	strh	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fedb 	bl	8002c08 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	202c      	movs	r0, #44	; 0x2c
 8002e58:	f7ff ff5d 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	81fb      	strh	r3, [r7, #14]
 8002e60:	e006      	b.n	8002e70 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fae1 	bl	800342c <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	81fb      	strh	r3, [r7, #14]
 8002e70:	89fa      	ldrh	r2, [r7, #14]
 8002e72:	883b      	ldrh	r3, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3f4      	bcc.n	8002e62 <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd90      	pop	{r4, r7, pc}

08002e80 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	80fb      	strh	r3, [r7, #6]
 8002e92:	4603      	mov	r3, r0
 8002e94:	80bb      	strh	r3, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	807b      	strh	r3, [r7, #2]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	88bb      	ldrh	r3, [r7, #4]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fead 	bl	8002c08 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	f7ff ff2f 	bl	8002d16 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	81fb      	strh	r3, [r7, #14]
 8002ebc:	e00b      	b.n	8002ed6 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	89fb      	ldrh	r3, [r7, #14]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fece 	bl	8002c6c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002ed0:	89fb      	ldrh	r3, [r7, #14]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	81fb      	strh	r3, [r7, #14]
 8002ed6:	89fa      	ldrh	r2, [r7, #14]
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3ef      	bcc.n	8002ebe <ST7789H2_DrawVLine+0x3e>
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
	...

08002ee8 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	603a      	str	r2, [r7, #0]
 8002ef2:	80fb      	strh	r3, [r7, #6]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <ST7789H2_DrawBitmap+0xdc>)
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <ST7789H2_DrawBitmap+0xe0>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <ST7789H2_DrawBitmap+0xe4>)
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <ST7789H2_DrawBitmap+0xe8>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3302      	adds	r3, #2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	461a      	mov	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	330a      	adds	r3, #10
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	461a      	mov	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002f6e:	88ba      	ldrh	r2, [r7, #4]
 8002f70:	89bb      	ldrh	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e01d      	b.n	8002fb4 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fe3f 	bl	8002c08 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b299      	uxth	r1, r3
 8002f92:	89fb      	ldrh	r3, [r7, #14]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	89fa      	ldrh	r2, [r7, #14]
 8002fa2:	88f8      	ldrh	r0, [r7, #6]
 8002fa4:	f000 f898 	bl	80030d8 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	88bb      	ldrh	r3, [r7, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d8dd      	bhi.n	8002f78 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000054 	.word	0x20000054
 8002fc8:	20000160 	.word	0x20000160
 8002fcc:	20000056 	.word	0x20000056
 8002fd0:	20000162 	.word	0x20000162

08002fd4 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80bb      	strh	r3, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	807b      	strh	r3, [r7, #2]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e019      	b.n	8003030 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fdff 	bl	8002c08 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	b299      	uxth	r1, r3
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	4413      	add	r3, r2
 800301c:	887a      	ldrh	r2, [r7, #2]
 800301e:	88f8      	ldrh	r0, [r7, #6]
 8003020:	f000 f85a 	bl	80030d8 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3301      	adds	r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	88ba      	ldrh	r2, [r7, #4]
 8003032:	883b      	ldrh	r3, [r7, #0]
 8003034:	4413      	add	r3, r2
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4293      	cmp	r3, r2
 800303c:	d3de      	bcc.n	8002ffc <ST7789H2_DrawRGBImage+0x28>
  }
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	460a      	mov	r2, r1
 8003050:	80fb      	strh	r3, [r7, #6]
 8003052:	4613      	mov	r3, r2
 8003054:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003056:	88ba      	ldrh	r2, [r7, #4]
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fdd3 	bl	8002c08 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	202e      	movs	r0, #46	; 0x2e
 8003068:	f7ff fe55 	bl	8002d16 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800306c:	f000 f9f8 	bl	8003460 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8003070:	f000 f9f6 	bl	8003460 <LCD_IO_ReadData>
 8003074:	4603      	mov	r3, r0
 8003076:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8003078:	f000 f9f2 	bl	8003460 <LCD_IO_ReadData>
 800307c:	4603      	mov	r3, r0
 800307e:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	121b      	asrs	r3, r3, #8
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 800308e:	8afb      	ldrh	r3, [r7, #22]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 800309a:	8abb      	ldrh	r3, [r7, #20]
 800309c:	121b      	asrs	r3, r3, #8
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f023 0303 	bic.w	r3, r3, #3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80030a8:	f107 0310 	add.w	r3, r7, #16
 80030ac:	f107 020c 	add.w	r2, r7, #12
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	4611      	mov	r1, r2
 80030b4:	8019      	strh	r1, [r3, #0]
 80030b6:	3302      	adds	r3, #2
 80030b8:	0c12      	lsrs	r2, r2, #16
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	7c3a      	ldrb	r2, [r7, #16]
 80030c0:	f362 0307 	bfi	r3, r2, #0, #8
 80030c4:	7c7a      	ldrb	r2, [r7, #17]
 80030c6:	f362 230f 	bfi	r3, r2, #8, #8
 80030ca:	7cba      	ldrb	r2, [r7, #18]
 80030cc:	f362 4317 	bfi	r3, r2, #16, #8
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	4603      	mov	r3, r0
 80030e2:	81fb      	strh	r3, [r7, #14]
 80030e4:	460b      	mov	r3, r1
 80030e6:	81bb      	strh	r3, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	202c      	movs	r0, #44	; 0x2c
 80030fa:	f7ff fe0c 	bl	8002d16 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e02a      	b.n	800315a <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <ST7789H2_DrawRGBHLine+0x98>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4293      	cmp	r3, r2
 800310e:	d321      	bcc.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <ST7789H2_DrawRGBHLine+0x9c>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	89ba      	ldrh	r2, [r7, #12]
 8003116:	429a      	cmp	r2, r3
 8003118:	d31c      	bcc.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <ST7789H2_DrawRGBHLine+0xa0>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4293      	cmp	r3, r2
 8003124:	d816      	bhi.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <ST7789H2_DrawRGBHLine+0xa4>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	89ba      	ldrh	r2, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d811      	bhi.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003130:	897a      	ldrh	r2, [r7, #10]
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	4413      	add	r3, r2
 8003136:	461a      	mov	r2, r3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f96f 	bl	800342c <LCD_IO_WriteData>
      }      
      i++;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3301      	adds	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	897a      	ldrh	r2, [r7, #10]
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	4413      	add	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4293      	cmp	r3, r2
 8003166:	d3cd      	bcc.n	8003104 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000160 	.word	0x20000160
 8003174:	20000162 	.word	0x20000162
 8003178:	20000054 	.word	0x20000054
 800317c:	20000056 	.word	0x20000056

08003180 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	460a      	mov	r2, r1
 800318a:	71fb      	strb	r3, [r7, #7]
 800318c:	4613      	mov	r3, r2
 800318e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <BSP_PB_Init+0xa0>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <BSP_PB_Init+0xa0>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6313      	str	r3, [r2, #48]	; 0x30
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <BSP_PB_Init+0xa0>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d111      	bne.n	80031d6 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80031b2:	2301      	movs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80031ba:	2302      	movs	r3, #2
 80031bc:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80031be:	2302      	movs	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4a17      	ldr	r2, [pc, #92]	; (8003224 <BSP_PB_Init+0xa4>)
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	f107 020c 	add.w	r2, r7, #12
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 f885 	bl	80052e0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d11d      	bne.n	8003218 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80031e0:	2302      	movs	r3, #2
 80031e2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e4:	2303      	movs	r3, #3
 80031e6:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <BSP_PB_Init+0xa8>)
 80031ea:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <BSP_PB_Init+0xa4>)
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	f107 020c 	add.w	r2, r7, #12
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 f870 	bl	80052e0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003200:	2306      	movs	r3, #6
 8003202:	b25b      	sxtb	r3, r3
 8003204:	2200      	movs	r2, #0
 8003206:	210f      	movs	r1, #15
 8003208:	4618      	mov	r0, r3
 800320a:	f001 f9b3 	bl	8004574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800320e:	2306      	movs	r3, #6
 8003210:	b25b      	sxtb	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f9ca 	bl	80045ac <HAL_NVIC_EnableIRQ>
  }
}
 8003218:	bf00      	nop
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	20000058 	.word	0x20000058
 8003228:	10110000 	.word	0x10110000

0800322c <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6393      	str	r3, [r2, #56]	; 0x38
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b33      	ldr	r3, [pc, #204]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a32      	ldr	r2, [pc, #200]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80032ca:	230c      	movs	r3, #12
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80032ce:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80032d2:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	4619      	mov	r1, r3
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <FMC_BANK3_MspInit+0xf8>)
 80032dc:	f002 f800 	bl	80052e0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80032e0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80032e4:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	480e      	ldr	r0, [pc, #56]	; (8003328 <FMC_BANK3_MspInit+0xfc>)
 80032ee:	f001 fff7 	bl	80052e0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80032f2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80032f6:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	480b      	ldr	r0, [pc, #44]	; (800332c <FMC_BANK3_MspInit+0x100>)
 8003300:	f001 ffee 	bl	80052e0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003304:	f240 433f 	movw	r3, #1087	; 0x43f
 8003308:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	4619      	mov	r1, r3
 8003310:	4807      	ldr	r0, [pc, #28]	; (8003330 <FMC_BANK3_MspInit+0x104>)
 8003312:	f001 ffe5 	bl	80052e0 <HAL_GPIO_Init>
}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40020c00 	.word	0x40020c00
 8003328:	40021000 	.word	0x40021000
 800332c:	40021400 	.word	0x40021400
 8003330:	40021800 	.word	0x40021800

08003334 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8003334:	b580      	push	{r7, lr}
 8003336:	b09c      	sub	sp, #112	; 0x70
 8003338:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 800333a:	f7ff ff77 	bl	800322c <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 800333e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003342:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <FMC_BANK3_Init+0x8c>)
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8003348:	2303      	movs	r3, #3
 800334a:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 800334c:	2301      	movs	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8003350:	2304      	movs	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8003354:	2301      	movs	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8003358:	2302      	movs	r3, #2
 800335a:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 800335c:	2302      	movs	r3, #2
 800335e:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8003364:	2304      	movs	r3, #4
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003370:	2310      	movs	r3, #16
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8003384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 800338e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003392:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 800339c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80033a6:	2300      	movs	r3, #0
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 80033aa:	1d3a      	adds	r2, r7, #4
 80033ac:	1d39      	adds	r1, r7, #4
 80033ae:	f107 0320 	add.w	r3, r7, #32
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 fa56 	bl	8009864 <HAL_SRAM_Init>
}
 80033b8:	bf00      	nop
 80033ba:	3770      	adds	r7, #112	; 0x70
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	a0000104 	.word	0xa0000104

080033c4 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80033ce:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033d6:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 80033f0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80033f4:	79fa      	ldrb	r2, [r7, #7]
 80033f6:	b292      	uxth	r2, r2
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 800340e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003412:	885b      	ldrh	r3, [r3, #2]
 8003414:	b29b      	uxth	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8003424:	f7ff ff86 	bl	8003334 <FMC_BANK3_Init>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffc3 	bl	80033c4 <FMC_BANK3_WriteData>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ffc7 	bl	80033e6 <FMC_BANK3_WriteReg>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8003464:	f7ff ffd1 	bl	800340a <FMC_BANK3_ReadData>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}

0800346e <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fd30 	bl	8003edc <HAL_Delay>
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 800348c:	f000 f80e 	bl	80034ac <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 80034a0:	f000 f80b 	bl	80034ba <BSP_AUDIO_OUT_Error_CallBack>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80034d0:	f000 f804 	bl	80034dc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80034ee:	2001      	movs	r0, #1
 80034f0:	f000 f804 	bl	80034fc <BSP_LCD_InitEx>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <BSP_LCD_InitEx+0xc0>)
 800350a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350e:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <BSP_LCD_InitEx+0xc0>)
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <BSP_LCD_InitEx+0xc4>)
 8003514:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <BSP_LCD_InitEx+0xc0>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 800351c:	f000 fa10 	bl	8003940 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003520:	2201      	movs	r2, #1
 8003522:	2120      	movs	r1, #32
 8003524:	4827      	ldr	r0, [pc, #156]	; (80035c4 <BSP_LCD_InitEx+0xc8>)
 8003526:	f002 f86d 	bl	8005604 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003530:	4825      	ldr	r0, [pc, #148]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003532:	f002 f867 	bl	8005604 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8003536:	2005      	movs	r0, #5
 8003538:	f000 fcd0 	bl	8003edc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 800353c:	2201      	movs	r2, #1
 800353e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003542:	4821      	ldr	r0, [pc, #132]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003544:	f002 f85e 	bl	8005604 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003548:	200a      	movs	r0, #10
 800354a:	f000 fcc7 	bl	8003edc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003554:	481c      	ldr	r0, [pc, #112]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003556:	f002 f855 	bl	8005604 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800355a:	2014      	movs	r0, #20
 800355c:	f000 fcbe 	bl	8003edc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003566:	4818      	ldr	r0, [pc, #96]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003568:	f002 f84c 	bl	8005604 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800356c:	200a      	movs	r0, #10
 800356e:	f000 fcb5 	bl	8003edc <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <BSP_LCD_InitEx+0xd0>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4798      	blx	r3
 8003578:	4603      	mov	r3, r0
 800357a:	2b85      	cmp	r3, #133	; 0x85
 800357c:	d118      	bne.n	80035b0 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <BSP_LCD_InitEx+0xd4>)
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <BSP_LCD_InitEx+0xd0>)
 8003582:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <BSP_LCD_InitEx+0xd4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff fabd 	bl	8002b12 <ST7789H2_SetOrientation>
 8003598:	e005      	b.n	80035a6 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d102      	bne.n	80035a6 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80035a0:	2002      	movs	r0, #2
 80035a2:	f7ff fab6 	bl	8002b12 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80035a6:	480b      	ldr	r0, [pc, #44]	; (80035d4 <BSP_LCD_InitEx+0xd8>)
 80035a8:	f000 f84e 	bl	8003648 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200053b4 	.word	0x200053b4
 80035c0:	2000005c 	.word	0x2000005c
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40020400 	.word	0x40020400
 80035cc:	2000001c 	.word	0x2000001c
 80035d0:	20000164 	.word	0x20000164
 80035d4:	2000006c 	.word	0x2000006c

080035d8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <BSP_LCD_GetXSize+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4798      	blx	r3
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000164 	.word	0x20000164

080035f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <BSP_LCD_GetYSize+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	4798      	blx	r3
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000164 	.word	0x20000164

08003608 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	4a03      	ldr	r2, [pc, #12]	; (8003624 <BSP_LCD_SetTextColor+0x1c>)
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	200053b4 	.word	0x200053b4

08003628 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	4a03      	ldr	r2, [pc, #12]	; (8003644 <BSP_LCD_SetBackColor+0x1c>)
 8003636:	6053      	str	r3, [r2, #4]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200053b4 	.word	0x200053b4

08003648 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <BSP_LCD_SetFont+0x1c>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6093      	str	r3, [r2, #8]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	200053b4 	.word	0x200053b4

08003668 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <BSP_LCD_GetFont+0x14>)
 800366e:	689b      	ldr	r3, [r3, #8]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	200053b4 	.word	0x200053b4

08003680 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <BSP_LCD_Clear+0x68>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <BSP_LCD_Clear+0x68>)
 800369c:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800369e:	f7ff ffa7 	bl	80035f0 <BSP_LCD_GetYSize>
 80036a2:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e00d      	b.n	80036c6 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	b29c      	uxth	r4, r3
 80036ae:	f7ff ff93 	bl	80035d8 <BSP_LCD_GetXSize>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	4621      	mov	r1, r4
 80036ba:	2000      	movs	r0, #0
 80036bc:	f000 f906 	bl	80038cc <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3ed      	bcc.n	80036aa <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <BSP_LCD_Clear+0x68>)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <BSP_LCD_Clear+0x68>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff94 	bl	8003608 <BSP_LCD_SetTextColor>
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	200053b4 	.word	0x200053b4

080036ec <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	80fb      	strh	r3, [r7, #6]
 80036f6:	460b      	mov	r3, r1
 80036f8:	80bb      	strh	r3, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <BSP_LCD_DisplayChar+0x50>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003708:	490c      	ldr	r1, [pc, #48]	; (800373c <BSP_LCD_DisplayChar+0x50>)
 800370a:	6889      	ldr	r1, [r1, #8]
 800370c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800370e:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <BSP_LCD_DisplayChar+0x50>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	3307      	adds	r3, #7
 800371a:	2b00      	cmp	r3, #0
 800371c:	da00      	bge.n	8003720 <BSP_LCD_DisplayChar+0x34>
 800371e:	3307      	adds	r3, #7
 8003720:	10db      	asrs	r3, r3, #3
 8003722:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003726:	441a      	add	r2, r3
 8003728:	88b9      	ldrh	r1, [r7, #4]
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f963 	bl	80039f8 <DrawChar>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200053b4 	.word	0x200053b4

08003740 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60ba      	str	r2, [r7, #8]
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	81fb      	strh	r3, [r7, #14]
 800374e:	460b      	mov	r3, r1
 8003750:	81bb      	strh	r3, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003756:	2301      	movs	r3, #1
 8003758:	83fb      	strh	r3, [r7, #30]
 800375a:	2300      	movs	r3, #0
 800375c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800376a:	e002      	b.n	8003772 <BSP_LCD_DisplayStringAt+0x32>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	3301      	adds	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	617a      	str	r2, [r7, #20]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f6      	bne.n	800376c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800377e:	f7ff ff2b 	bl	80035d8 <BSP_LCD_GetXSize>
 8003782:	4602      	mov	r2, r0
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <BSP_LCD_DisplayStringAt+0x120>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	889b      	ldrh	r3, [r3, #4]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d014      	beq.n	80037c0 <BSP_LCD_DisplayStringAt+0x80>
 8003796:	2b03      	cmp	r3, #3
 8003798:	d00f      	beq.n	80037ba <BSP_LCD_DisplayStringAt+0x7a>
 800379a:	2b01      	cmp	r3, #1
 800379c:	d11e      	bne.n	80037dc <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <BSP_LCD_DisplayStringAt+0x120>)
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	8892      	ldrh	r2, [r2, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	4413      	add	r3, r2
 80037b6:	83fb      	strh	r3, [r7, #30]
      break;
 80037b8:	e013      	b.n	80037e2 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	83fb      	strh	r3, [r7, #30]
      break;
 80037be:	e010      	b.n	80037e2 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <BSP_LCD_DisplayStringAt+0x120>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	889b      	ldrh	r3, [r3, #4]
 80037ce:	fb12 f303 	smulbb	r3, r2, r3
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	89fb      	ldrh	r3, [r7, #14]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	83fb      	strh	r3, [r7, #30]
      break;
 80037da:	e002      	b.n	80037e2 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	83fb      	strh	r3, [r7, #30]
      break;
 80037e0:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80037e2:	8bfb      	ldrh	r3, [r7, #30]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <BSP_LCD_DisplayStringAt+0xb0>
 80037e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da15      	bge.n	800381c <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80037f4:	e012      	b.n	800381c <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	89b9      	ldrh	r1, [r7, #12]
 80037fc:	8bfb      	ldrh	r3, [r7, #30]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff ff74 	bl	80036ec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003804:	4b16      	ldr	r3, [pc, #88]	; (8003860 <BSP_LCD_DisplayStringAt+0x120>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	889a      	ldrh	r2, [r3, #4]
 800380a:	8bfb      	ldrh	r3, [r7, #30]
 800380c:	4413      	add	r3, r2
 800380e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
    i++;
 8003816:	8bbb      	ldrh	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2dc      	uxtb	r4, r3
 800382a:	f7ff fed5 	bl	80035d8 <BSP_LCD_GetXSize>
 800382e:	4601      	mov	r1, r0
 8003830:	8bbb      	ldrh	r3, [r7, #28]
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <BSP_LCD_DisplayStringAt+0x120>)
 8003834:	6892      	ldr	r2, [r2, #8]
 8003836:	8892      	ldrh	r2, [r2, #4]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	1acb      	subs	r3, r1, r3
 800383e:	b29b      	uxth	r3, r3
 8003840:	4a07      	ldr	r2, [pc, #28]	; (8003860 <BSP_LCD_DisplayStringAt+0x120>)
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	8892      	ldrh	r2, [r2, #4]
 8003846:	4293      	cmp	r3, r2
 8003848:	bf2c      	ite	cs
 800384a:	2301      	movcs	r3, #1
 800384c:	2300      	movcc	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	4023      	ands	r3, r4
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ce      	bne.n	80037f6 <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8003858:	bf00      	nop
 800385a:	3724      	adds	r7, #36	; 0x24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	200053b4 	.word	0x200053b4

08003864 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003870:	f7ff fefa 	bl	8003668 <BSP_LCD_GetFont>
 8003874:	4603      	mov	r3, r0
 8003876:	88db      	ldrh	r3, [r3, #6]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	fb12 f303 	smulbb	r3, r2, r3
 800387e:	b299      	uxth	r1, r3
 8003880:	2303      	movs	r3, #3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	2000      	movs	r0, #0
 8003886:	f7ff ff5b 	bl	8003740 <BSP_LCD_DisplayStringAt>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
 800389e:	460b      	mov	r3, r1
 80038a0:	80bb      	strh	r3, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <BSP_LCD_DrawPixel+0x34>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <BSP_LCD_DrawPixel+0x34>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	88b9      	ldrh	r1, [r7, #4]
 80038ba:	88f8      	ldrh	r0, [r7, #6]
 80038bc:	4798      	blx	r3
  }
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000164 	.word	0x20000164

080038cc <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
 80038d6:	460b      	mov	r3, r1
 80038d8:	80bb      	strh	r3, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <BSP_LCD_DrawHLine+0x6c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <BSP_LCD_DrawHLine+0x6c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a1c      	ldr	r4, [r3, #32]
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <BSP_LCD_DrawHLine+0x70>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	b298      	uxth	r0, r3
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	88ba      	ldrh	r2, [r7, #4]
 80038fc:	88f9      	ldrh	r1, [r7, #6]
 80038fe:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003900:	e015      	b.n	800392e <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e00e      	b.n	8003926 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	b29a      	uxth	r2, r3
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	4413      	add	r3, r2
 8003910:	b298      	uxth	r0, r3
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <BSP_LCD_DrawHLine+0x70>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29a      	uxth	r2, r3
 8003918:	88bb      	ldrh	r3, [r7, #4]
 800391a:	4619      	mov	r1, r3
 800391c:	f7ff ffba 	bl	8003894 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3ec      	bcc.n	8003908 <BSP_LCD_DrawHLine+0x3c>
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	20000164 	.word	0x20000164
 800393c:	200053b4 	.word	0x200053b4

08003940 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <BSP_LCD_MspInit+0xac>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a20      	ldr	r2, [pc, #128]	; (80039ec <BSP_LCD_MspInit+0xac>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a19      	ldr	r2, [pc, #100]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003988:	f043 0310 	orr.w	r3, r3, #16
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <BSP_LCD_MspInit+0xac>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800399a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800399e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	4619      	mov	r1, r3
 80039b2:	480f      	ldr	r0, [pc, #60]	; (80039f0 <BSP_LCD_MspInit+0xb0>)
 80039b4:	f001 fc94 	bl	80052e0 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80039b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039bc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80039c2:	f107 030c 	add.w	r3, r7, #12
 80039c6:	4619      	mov	r1, r3
 80039c8:	4809      	ldr	r0, [pc, #36]	; (80039f0 <BSP_LCD_MspInit+0xb0>)
 80039ca:	f001 fc89 	bl	80052e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80039ce:	2320      	movs	r3, #32
 80039d0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039d2:	2301      	movs	r3, #1
 80039d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	4619      	mov	r1, r3
 80039dc:	4805      	ldr	r0, [pc, #20]	; (80039f4 <BSP_LCD_MspInit+0xb4>)
 80039de:	f001 fc7f 	bl	80052e0 <HAL_GPIO_Init>
}
 80039e2:	bf00      	nop
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40021000 	.word	0x40021000

080039f8 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	603a      	str	r2, [r7, #0]
 8003a02:	80fb      	strh	r3, [r7, #6]
 8003a04:	460b      	mov	r3, r1
 8003a06:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003a10:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <DrawChar+0x12c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	88db      	ldrh	r3, [r3, #6]
 8003a16:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8003a18:	4b42      	ldr	r3, [pc, #264]	; (8003b24 <DrawChar+0x12c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	889b      	ldrh	r3, [r3, #4]
 8003a1e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003a20:	8a3b      	ldrh	r3, [r7, #16]
 8003a22:	3307      	adds	r3, #7
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da00      	bge.n	8003a2a <DrawChar+0x32>
 8003a28:	3307      	adds	r3, #7
 8003a2a:	10db      	asrs	r3, r3, #3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8a3b      	ldrh	r3, [r7, #16]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e069      	b.n	8003b14 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003a40:	8a3b      	ldrh	r3, [r7, #16]
 8003a42:	3307      	adds	r3, #7
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da00      	bge.n	8003a4a <DrawChar+0x52>
 8003a48:	3307      	adds	r3, #7
 8003a4a:	10db      	asrs	r3, r3, #3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fb03 f302 	mul.w	r3, r3, r2
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003a5a:	8a3b      	ldrh	r3, [r7, #16]
 8003a5c:	3307      	adds	r3, #7
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da00      	bge.n	8003a64 <DrawChar+0x6c>
 8003a62:	3307      	adds	r3, #7
 8003a64:	10db      	asrs	r3, r3, #3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d002      	beq.n	8003a70 <DrawChar+0x78>
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d004      	beq.n	8003a78 <DrawChar+0x80>
 8003a6e:	e00c      	b.n	8003a8a <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	617b      	str	r3, [r7, #20]
      break;    
 8003a76:	e016      	b.n	8003aa6 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	3201      	adds	r2, #1
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
      break;
 8003a88:	e00d      	b.n	8003aa6 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	041a      	lsls	r2, r3, #16
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3301      	adds	r3, #1
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	3202      	adds	r2, #2
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
      break;
 8003aa4:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	e029      	b.n	8003b00 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003aac:	8a3a      	ldrh	r2, [r7, #16]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	1ad2      	subs	r2, r2, r3
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	2201      	movs	r2, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	4413      	add	r3, r2
 8003ad0:	b298      	uxth	r0, r3
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <DrawChar+0x12c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	88bb      	ldrh	r3, [r7, #4]
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7ff feda 	bl	8003894 <BSP_LCD_DrawPixel>
 8003ae0:	e00b      	b.n	8003afa <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	4413      	add	r3, r2
 8003aea:	b298      	uxth	r0, r3
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <DrawChar+0x12c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	88bb      	ldrh	r3, [r7, #4]
 8003af4:	4619      	mov	r1, r3
 8003af6:	f7ff fecd 	bl	8003894 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	8a3b      	ldrh	r3, [r7, #16]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3d1      	bcc.n	8003aac <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003b08:	88bb      	ldrh	r3, [r7, #4]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	8a7b      	ldrh	r3, [r7, #18]
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d391      	bcc.n	8003a40 <DrawChar+0x48>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200053b4 	.word	0x200053b4

08003b28 <RC_READ_SBUS>:
 * Purpose: To read RC SBUS data
 * Language:  C
 */
#include <rc_input_sbus.h>

uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3325      	adds	r3, #37	; 0x25
 8003b36:	2219      	movs	r2, #25
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f006 fe34 	bl	800a7a8 <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d012      	beq.n	8003b70 <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b50:	3301      	adds	r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b60:	2b0a      	cmp	r3, #10
 8003b62:	d903      	bls.n	8003b6c <RC_READ_SBUS+0x44>
			sbus->error = 1;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		return 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e16e      	b.n	8003e4e <RC_READ_SBUS+0x326>
	}

	sbus->error = 0;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b96:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	b21b      	sxth	r3, r3
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	b21b      	sxth	r3, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bac:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc4:	015b      	lsls	r3, r3, #5
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	b21b      	sxth	r3, r3
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c06:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	b21a      	sxth	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c1e:	01db      	lsls	r3, r3, #7
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c2c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	b21a      	sxth	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b21b      	sxth	r3, r3
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c52:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 8003c5e:	09db      	lsrs	r3, r3, #7
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	b21a      	sxth	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003c78:	025b      	lsls	r3, r3, #9
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c86:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	b21a      	sxth	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cac:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	b21b      	sxth	r3, r3
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cde:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	4313      	orrs	r3, r2
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cf4:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	b21a      	sxth	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d4e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d66:	01db      	lsls	r3, r3, #7
 8003d68:	b21b      	sxth	r3, r3
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b21b      	sxth	r3, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d74:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	b21a      	sxth	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d9a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 8003da6:	09db      	lsrs	r3, r3, #7
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc0:	025b      	lsls	r3, r3, #9
 8003dc2:	b21b      	sxth	r3, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dce:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	b21a      	sxth	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003de6:	019b      	lsls	r3, r3, #6
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	4313      	orrs	r3, r2
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df4:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	b21a      	sxth	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b21b      	sxth	r3, r3
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e1a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	83da      	strh	r2, [r3, #30]
	//for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
	//	sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
	//			SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	//}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <RC_READ_SBUS+0x30e>
		sbus->frame_lost = 1;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <RC_READ_SBUS+0x324>
		sbus->failsafe = 1;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		sbus->arm = 0;
		sbus->disarm = 0;
	}
#endif

	return 1;
 8003e4c:	2301      	movs	r3, #1
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_Init+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <HAL_Init+0x40>)
 8003e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_Init+0x40>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <HAL_Init+0x40>)
 8003e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_Init+0x40>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <HAL_Init+0x40>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e80:	2003      	movs	r0, #3
 8003e82:	f000 fb6c 	bl	800455e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fe fc44 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e8c:	f7fd fe00 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00

08003e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_IncTick+0x20>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_IncTick+0x24>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_IncTick+0x24>)
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000078 	.word	0x20000078
 8003ec0:	200053c0 	.word	0x200053c0

08003ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_GetTick+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	200053c0 	.word	0x200053c0

08003edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff ffee 	bl	8003ec4 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d005      	beq.n	8003f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_Delay+0x40>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f02:	bf00      	nop
 8003f04:	f7ff ffde 	bl	8003ec4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d8f7      	bhi.n	8003f04 <HAL_Delay+0x28>
  {
  }
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000078 	.word	0x20000078

08003f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e033      	b.n	8003f9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fdce 	bl	8001ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f66:	f023 0302 	bic.w	r3, r3, #2
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f94a 	bl	800420c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f8e:	e001      	b.n	8003f94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x1c>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e113      	b.n	80041ec <HAL_ADC_ConfigChannel+0x244>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	d925      	bls.n	8004020 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68d9      	ldr	r1, [r3, #12]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3b1e      	subs	r3, #30
 8003fea:	2207      	movs	r2, #7
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68d9      	ldr	r1, [r3, #12]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	4618      	mov	r0, r3
 800400c:	4603      	mov	r3, r0
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4403      	add	r3, r0
 8004012:	3b1e      	subs	r3, #30
 8004014:	409a      	lsls	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e022      	b.n	8004066 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6919      	ldr	r1, [r3, #16]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	2207      	movs	r2, #7
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43da      	mvns	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	400a      	ands	r2, r1
 8004042:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6919      	ldr	r1, [r3, #16]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4618      	mov	r0, r3
 8004056:	4603      	mov	r3, r0
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4403      	add	r3, r0
 800405c:	409a      	lsls	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b06      	cmp	r3, #6
 800406c:	d824      	bhi.n	80040b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	3b05      	subs	r3, #5
 8004080:	221f      	movs	r2, #31
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43da      	mvns	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	400a      	ands	r2, r1
 800408e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	4618      	mov	r0, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	3b05      	subs	r3, #5
 80040aa:	fa00 f203 	lsl.w	r2, r0, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
 80040b6:	e04c      	b.n	8004152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d824      	bhi.n	800410a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	3b23      	subs	r3, #35	; 0x23
 80040d2:	221f      	movs	r2, #31
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43da      	mvns	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	400a      	ands	r2, r1
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	3b23      	subs	r3, #35	; 0x23
 80040fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
 8004108:	e023      	b.n	8004152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	3b41      	subs	r3, #65	; 0x41
 800411c:	221f      	movs	r2, #31
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	400a      	ands	r2, r1
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	4618      	mov	r0, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	3b41      	subs	r3, #65	; 0x41
 8004146:	fa00 f203 	lsl.w	r2, r0, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_ADC_ConfigChannel+0x250>)
 8004154:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a28      	ldr	r2, [pc, #160]	; (80041fc <HAL_ADC_ConfigChannel+0x254>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10f      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1d8>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b12      	cmp	r3, #18
 8004166:	d10b      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_ADC_ConfigChannel+0x254>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d12b      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x23a>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_ADC_ConfigChannel+0x258>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <HAL_ADC_ConfigChannel+0x1f4>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b11      	cmp	r3, #17
 800419a:	d122      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a11      	ldr	r2, [pc, #68]	; (8004200 <HAL_ADC_ConfigChannel+0x258>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d111      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_ADC_ConfigChannel+0x25c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a11      	ldr	r2, [pc, #68]	; (8004208 <HAL_ADC_ConfigChannel+0x260>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	0c9a      	lsrs	r2, r3, #18
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041d4:	e002      	b.n	80041dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f9      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40012300 	.word	0x40012300
 80041fc:	40012000 	.word	0x40012000
 8004200:	10000012 	.word	0x10000012
 8004204:	20000018 	.word	0x20000018
 8004208:	431bde83 	.word	0x431bde83

0800420c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004214:	4b79      	ldr	r3, [pc, #484]	; (80043fc <ADC_Init+0x1f0>)
 8004216:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	021a      	lsls	r2, r3, #8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	4a58      	ldr	r2, [pc, #352]	; (8004400 <ADC_Init+0x1f4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d022      	beq.n	80042ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	e00f      	b.n	800430a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004308:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0202 	bic.w	r2, r2, #2
 8004318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7e1b      	ldrb	r3, [r3, #24]
 8004324:	005a      	lsls	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01b      	beq.n	8004370 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004346:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	3b01      	subs	r3, #1
 8004364:	035a      	lsls	r2, r3, #13
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	e007      	b.n	8004380 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	3b01      	subs	r3, #1
 800439c:	051a      	lsls	r2, r3, #20
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043c2:	025a      	lsls	r2, r3, #9
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	029a      	lsls	r2, r3, #10
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40012300 	.word	0x40012300
 8004400:	0f000001 	.word	0x0f000001

08004404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800442c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	60d3      	str	r3, [r2, #12]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <__NVIC_GetPriorityGrouping+0x18>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	f003 0307 	and.w	r3, r3, #7
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	2b00      	cmp	r3, #0
 8004478:	db0b      	blt.n	8004492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	4907      	ldr	r1, [pc, #28]	; (80044a0 <__NVIC_EnableIRQ+0x38>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2001      	movs	r0, #1
 800448a:	fa00 f202 	lsl.w	r2, r0, r2
 800448e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000e100 	.word	0xe000e100

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	490c      	ldr	r1, [pc, #48]	; (80044f0 <__NVIC_SetPriority+0x4c>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	440b      	add	r3, r1
 80044c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044cc:	e00a      	b.n	80044e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4908      	ldr	r1, [pc, #32]	; (80044f4 <__NVIC_SetPriority+0x50>)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	3b04      	subs	r3, #4
 80044dc:	0112      	lsls	r2, r2, #4
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	440b      	add	r3, r1
 80044e2:	761a      	strb	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000e100 	.word	0xe000e100
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f1c3 0307 	rsb	r3, r3, #7
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf28      	it	cs
 8004516:	2304      	movcs	r3, #4
 8004518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3304      	adds	r3, #4
 800451e:	2b06      	cmp	r3, #6
 8004520:	d902      	bls.n	8004528 <NVIC_EncodePriority+0x30>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3b03      	subs	r3, #3
 8004526:	e000      	b.n	800452a <NVIC_EncodePriority+0x32>
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	401a      	ands	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004540:	f04f 31ff 	mov.w	r1, #4294967295
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	43d9      	mvns	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	4313      	orrs	r3, r2
         );
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	; 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff ff4c 	bl	8004404 <__NVIC_SetPriorityGrouping>
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004586:	f7ff ff61 	bl	800444c <__NVIC_GetPriorityGrouping>
 800458a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	6978      	ldr	r0, [r7, #20]
 8004592:	f7ff ffb1 	bl	80044f8 <NVIC_EncodePriority>
 8004596:	4602      	mov	r2, r0
 8004598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff ff80 	bl	80044a4 <__NVIC_SetPriority>
}
 80045a4:	bf00      	nop
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff ff54 	bl	8004468 <__NVIC_EnableIRQ>
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e014      	b.n	8004604 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	791b      	ldrb	r3, [r3, #4]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fd faf4 	bl	8001bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004622:	d118      	bne.n	8004656 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2204      	movs	r2, #4
 8004628:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800463e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800464e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f825 	bl	80046a0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004664:	d118      	bne.n	8004698 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f85b 	bl	800474e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	795b      	ldrb	r3, [r3, #5]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_DAC_ConfigChannel+0x20>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e036      	b.n	8004742 <HAL_DAC_ConfigChannel+0x8e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80046e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4013      	ands	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	22c0      	movs	r2, #192	; 0xc0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43da      	mvns	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	400a      	ands	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0cf      	b.n	8004916 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a69      	ldr	r2, [pc, #420]	; (8004920 <HAL_DFSDM_ChannelInit+0x1bc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_DFSDM_ChannelInit+0x3a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a67      	ldr	r2, [pc, #412]	; (8004924 <HAL_DFSDM_ChannelInit+0x1c0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_DFSDM_ChannelInit+0x3a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a66      	ldr	r2, [pc, #408]	; (8004928 <HAL_DFSDM_ChannelInit+0x1c4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_DFSDM_ChannelInit+0x3a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a64      	ldr	r2, [pc, #400]	; (800492c <HAL_DFSDM_ChannelInit+0x1c8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d106      	bne.n	80047ac <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800479e:	4b64      	ldr	r3, [pc, #400]	; (8004930 <HAL_DFSDM_ChannelInit+0x1cc>)
 80047a0:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80047a2:	4b64      	ldr	r3, [pc, #400]	; (8004934 <HAL_DFSDM_ChannelInit+0x1d0>)
 80047a4:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80047a6:	4b5e      	ldr	r3, [pc, #376]	; (8004920 <HAL_DFSDM_ChannelInit+0x1bc>)
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e005      	b.n	80047b8 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80047ac:	4b62      	ldr	r3, [pc, #392]	; (8004938 <HAL_DFSDM_ChannelInit+0x1d4>)
 80047ae:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80047b0:	4b62      	ldr	r3, [pc, #392]	; (800493c <HAL_DFSDM_ChannelInit+0x1d8>)
 80047b2:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80047b4:	4b62      	ldr	r3, [pc, #392]	; (8004940 <HAL_DFSDM_ChannelInit+0x1dc>)
 80047b6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f8c1 	bl	8004944 <DFSDM_GetChannelFromInstance>
 80047c2:	4603      	mov	r3, r0
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0a0      	b.n	8004916 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fd fa4b 	bl	8001c70 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d125      	bne.n	8004838 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	431a      	orrs	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	791b      	ldrb	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	3b01      	subs	r3, #1
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004846:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004856:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800485c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 020f 	bic.w	r2, r2, #15
 8004874:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800489c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f002 0207 	and.w	r2, r2, #7
 80048c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048f4:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f81e 	bl	8004944 <DFSDM_GetChannelFromInstance>
 8004908:	4603      	mov	r3, r0
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40016000 	.word	0x40016000
 8004924:	40016020 	.word	0x40016020
 8004928:	40016040 	.word	0x40016040
 800492c:	40016060 	.word	0x40016060
 8004930:	20000168 	.word	0x20000168
 8004934:	2000016c 	.word	0x2000016c
 8004938:	2000017c 	.word	0x2000017c
 800493c:	20000180 	.word	0x20000180
 8004940:	40016400 	.word	0x40016400

08004944 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <DFSDM_GetChannelFromInstance+0x9c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <DFSDM_GetChannelFromInstance+0x18>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <DFSDM_GetChannelFromInstance+0xa0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d102      	bne.n	8004962 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e037      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <DFSDM_GetChannelFromInstance+0xa4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <DFSDM_GetChannelFromInstance+0x2e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <DFSDM_GetChannelFromInstance+0xa8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d102      	bne.n	8004978 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004972:	2301      	movs	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e02c      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <DFSDM_GetChannelFromInstance+0xac>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <DFSDM_GetChannelFromInstance+0x44>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <DFSDM_GetChannelFromInstance+0xb0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d102      	bne.n	800498e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8004988:	2302      	movs	r3, #2
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e021      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <DFSDM_GetChannelFromInstance+0xb4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <DFSDM_GetChannelFromInstance+0x5a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <DFSDM_GetChannelFromInstance+0xb8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d102      	bne.n	80049a4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800499e:	2303      	movs	r3, #3
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e016      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <DFSDM_GetChannelFromInstance+0xbc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d102      	bne.n	80049b2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80049ac:	2304      	movs	r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e00f      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <DFSDM_GetChannelFromInstance+0xc0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d102      	bne.n	80049c0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80049ba:	2305      	movs	r3, #5
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e008      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a11      	ldr	r2, [pc, #68]	; (8004a08 <DFSDM_GetChannelFromInstance+0xc4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d102      	bne.n	80049ce <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80049c8:	2306      	movs	r3, #6
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e001      	b.n	80049d2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80049ce:	2307      	movs	r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80049d2:	68fb      	ldr	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40016000 	.word	0x40016000
 80049e4:	40016400 	.word	0x40016400
 80049e8:	40016020 	.word	0x40016020
 80049ec:	40016420 	.word	0x40016420
 80049f0:	40016040 	.word	0x40016040
 80049f4:	40016440 	.word	0x40016440
 80049f8:	40016060 	.word	0x40016060
 80049fc:	40016460 	.word	0x40016460
 8004a00:	40016480 	.word	0x40016480
 8004a04:	400164a0 	.word	0x400164a0
 8004a08:	400164c0 	.word	0x400164c0

08004a0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a18:	f7ff fa54 	bl	8003ec4 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e099      	b.n	8004b5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a48:	e00f      	b.n	8004a6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a4a:	f7ff fa3b 	bl	8003ec4 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d908      	bls.n	8004a6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2203      	movs	r2, #3
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e078      	b.n	8004b5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e8      	bne.n	8004a4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <HAL_DMA_Init+0x158>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	4313      	orrs	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d117      	bne.n	8004b2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa91 	bl	8005038 <DMA_CheckFifoParam>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2240      	movs	r2, #64	; 0x40
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e016      	b.n	8004b5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa48 	bl	8004fcc <DMA_CalcBaseAndBitshift>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	223f      	movs	r2, #63	; 0x3f
 8004b46:	409a      	lsls	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	e010803f 	.word	0xe010803f

08004b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_DMA_Start_IT+0x26>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e040      	b.n	8004c10 <HAL_DMA_Start_IT+0xa8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d12f      	bne.n	8004c02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f9da 	bl	8004f70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	223f      	movs	r2, #63	; 0x3f
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0216 	orr.w	r2, r2, #22
 8004bd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0208 	orr.w	r2, r2, #8
 8004bee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e005      	b.n	8004c0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d004      	beq.n	8004c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2280      	movs	r2, #128	; 0x80
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e00c      	b.n	8004c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2205      	movs	r2, #5
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c68:	4b92      	ldr	r3, [pc, #584]	; (8004eb4 <HAL_DMA_IRQHandler+0x258>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a92      	ldr	r2, [pc, #584]	; (8004eb8 <HAL_DMA_IRQHandler+0x25c>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0a9b      	lsrs	r3, r3, #10
 8004c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	2208      	movs	r2, #8
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01a      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f043 0201 	orr.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ccc:	2201      	movs	r2, #1
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	2201      	movs	r2, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	2204      	movs	r2, #4
 8004d04:	409a      	lsls	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d012      	beq.n	8004d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d20:	2204      	movs	r2, #4
 8004d22:	409a      	lsls	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2c:	f043 0204 	orr.w	r2, r3, #4
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d38:	2210      	movs	r2, #16
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d043      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03c      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d56:	2210      	movs	r2, #16
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d018      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d108      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d024      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
 8004d8a:	e01f      	b.n	8004dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
 8004d9c:	e016      	b.n	8004dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0208 	bic.w	r2, r2, #8
 8004dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 808e 	beq.w	8004efa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8086 	beq.w	8004efa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df2:	2220      	movs	r2, #32
 8004df4:	409a      	lsls	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b05      	cmp	r3, #5
 8004e04:	d136      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0216 	bic.w	r2, r2, #22
 8004e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_DMA_IRQHandler+0x1da>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0208 	bic.w	r2, r2, #8
 8004e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	223f      	movs	r2, #63	; 0x3f
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d07d      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
        }
        return;
 8004e72:	e078      	b.n	8004f66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01c      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d030      	beq.n	8004efa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
 8004ea0:	e02b      	b.n	8004efa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d027      	beq.n	8004efa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
 8004eb2:	e022      	b.n	8004efa <HAL_DMA_IRQHandler+0x29e>
 8004eb4:	20000018 	.word	0x20000018
 8004eb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0210 	bic.w	r2, r2, #16
 8004ed8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d032      	beq.n	8004f68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d022      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2205      	movs	r2, #5
 8004f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d307      	bcc.n	8004f42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f2      	bne.n	8004f26 <HAL_DMA_IRQHandler+0x2ca>
 8004f40:	e000      	b.n	8004f44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
 8004f64:	e000      	b.n	8004f68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f66:	bf00      	nop
    }
  }
}
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop

08004f70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d108      	bne.n	8004fb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fae:	e007      	b.n	8004fc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	3b10      	subs	r3, #16
 8004fdc:	4a14      	ldr	r2, [pc, #80]	; (8005030 <DMA_CalcBaseAndBitshift+0x64>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <DMA_CalcBaseAndBitshift+0x68>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d909      	bls.n	800500e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	659a      	str	r2, [r3, #88]	; 0x58
 800500c:	e007      	b.n	800501e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	aaaaaaab 	.word	0xaaaaaaab
 8005034:	080161f0 	.word	0x080161f0

08005038 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d11f      	bne.n	8005092 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d855      	bhi.n	8005104 <DMA_CheckFifoParam+0xcc>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <DMA_CheckFifoParam+0x28>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005071 	.word	0x08005071
 8005064:	08005083 	.word	0x08005083
 8005068:	08005071 	.word	0x08005071
 800506c:	08005105 	.word	0x08005105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d045      	beq.n	8005108 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005080:	e042      	b.n	8005108 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800508a:	d13f      	bne.n	800510c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005090:	e03c      	b.n	800510c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	d121      	bne.n	80050e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d836      	bhi.n	8005110 <DMA_CheckFifoParam+0xd8>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <DMA_CheckFifoParam+0x70>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050bf 	.word	0x080050bf
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	080050d1 	.word	0x080050d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e02f      	b.n	800511e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d024      	beq.n	8005114 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ce:	e021      	b.n	8005114 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050d8:	d11e      	bne.n	8005118 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050de:	e01b      	b.n	8005118 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <DMA_CheckFifoParam+0xb4>
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d003      	beq.n	80050f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050ea:	e018      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e015      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
      break;
 8005102:	e00b      	b.n	800511c <DMA_CheckFifoParam+0xe4>
      break;
 8005104:	bf00      	nop
 8005106:	e00a      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      break;
 8005108:	bf00      	nop
 800510a:	e008      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      break;
 800510c:	bf00      	nop
 800510e:	e006      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      break;
 8005110:	bf00      	nop
 8005112:	e004      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      break;
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      break;   
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <DMA_CheckFifoParam+0xe6>
      break;
 800511c:	bf00      	nop
    }
  } 
  
  return status; 
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e081      	b.n	8005242 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc fe9e 	bl	8001e94 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800517c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800518c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d107      	bne.n	80051a6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	e006      	b.n	80051b4 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d104      	bne.n	80051c6 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	ea42 0103 	orr.w	r1, r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	021a      	lsls	r2, r3, #8
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69d9      	ldr	r1, [r3, #28]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1a      	ldr	r2, [r3, #32]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b20      	cmp	r3, #32
 800525e:	d138      	bne.n	80052d2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 800526a:	2302      	movs	r3, #2
 800526c:	e032      	b.n	80052d4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2224      	movs	r2, #36	; 0x24
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800529c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e165      	b.n	80055c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052fc:	2201      	movs	r2, #1
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	429a      	cmp	r2, r3
 8005316:	f040 8154 	bne.w	80055c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d00b      	beq.n	800533a <HAL_GPIO_Init+0x5a>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d007      	beq.n	800533a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800532e:	2b11      	cmp	r3, #17
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b12      	cmp	r3, #18
 8005338:	d130      	bne.n	800539c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005370:	2201      	movs	r2, #1
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 0201 	and.w	r2, r3, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0xfc>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b12      	cmp	r3, #18
 80053da:	d123      	bne.n	8005424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	08da      	lsrs	r2, r3, #3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3208      	adds	r2, #8
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	220f      	movs	r2, #15
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	08da      	lsrs	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3208      	adds	r2, #8
 800541e:	69b9      	ldr	r1, [r7, #24]
 8005420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	2203      	movs	r2, #3
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0203 	and.w	r2, r3, #3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80ae 	beq.w	80055c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	4b5c      	ldr	r3, [pc, #368]	; (80055dc <HAL_GPIO_Init+0x2fc>)
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	4a5b      	ldr	r2, [pc, #364]	; (80055dc <HAL_GPIO_Init+0x2fc>)
 8005470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005474:	6453      	str	r3, [r2, #68]	; 0x44
 8005476:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_GPIO_Init+0x2fc>)
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005482:	4a57      	ldr	r2, [pc, #348]	; (80055e0 <HAL_GPIO_Init+0x300>)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	3302      	adds	r3, #2
 800548a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	220f      	movs	r2, #15
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a4e      	ldr	r2, [pc, #312]	; (80055e4 <HAL_GPIO_Init+0x304>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d025      	beq.n	80054fa <HAL_GPIO_Init+0x21a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a4d      	ldr	r2, [pc, #308]	; (80055e8 <HAL_GPIO_Init+0x308>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <HAL_GPIO_Init+0x216>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a4c      	ldr	r2, [pc, #304]	; (80055ec <HAL_GPIO_Init+0x30c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d019      	beq.n	80054f2 <HAL_GPIO_Init+0x212>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a4b      	ldr	r2, [pc, #300]	; (80055f0 <HAL_GPIO_Init+0x310>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_GPIO_Init+0x20e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a4a      	ldr	r2, [pc, #296]	; (80055f4 <HAL_GPIO_Init+0x314>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00d      	beq.n	80054ea <HAL_GPIO_Init+0x20a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a49      	ldr	r2, [pc, #292]	; (80055f8 <HAL_GPIO_Init+0x318>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <HAL_GPIO_Init+0x206>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a48      	ldr	r2, [pc, #288]	; (80055fc <HAL_GPIO_Init+0x31c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_GPIO_Init+0x202>
 80054de:	2306      	movs	r3, #6
 80054e0:	e00c      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054e2:	2307      	movs	r3, #7
 80054e4:	e00a      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054e6:	2305      	movs	r3, #5
 80054e8:	e008      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054ea:	2304      	movs	r3, #4
 80054ec:	e006      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054ee:	2303      	movs	r3, #3
 80054f0:	e004      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e002      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_GPIO_Init+0x21c>
 80054fa:	2300      	movs	r3, #0
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f002 0203 	and.w	r2, r2, #3
 8005502:	0092      	lsls	r2, r2, #2
 8005504:	4093      	lsls	r3, r2
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800550c:	4934      	ldr	r1, [pc, #208]	; (80055e0 <HAL_GPIO_Init+0x300>)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	3302      	adds	r3, #2
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800551a:	4b39      	ldr	r3, [pc, #228]	; (8005600 <HAL_GPIO_Init+0x320>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	43db      	mvns	r3, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800553e:	4a30      	ldr	r2, [pc, #192]	; (8005600 <HAL_GPIO_Init+0x320>)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005544:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <HAL_GPIO_Init+0x320>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005568:	4a25      	ldr	r2, [pc, #148]	; (8005600 <HAL_GPIO_Init+0x320>)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <HAL_GPIO_Init+0x320>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005592:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <HAL_GPIO_Init+0x320>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005598:	4b19      	ldr	r3, [pc, #100]	; (8005600 <HAL_GPIO_Init+0x320>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055bc:	4a10      	ldr	r2, [pc, #64]	; (8005600 <HAL_GPIO_Init+0x320>)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	f67f ae96 	bls.w	80052fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d0:	bf00      	nop
 80055d2:	3724      	adds	r7, #36	; 0x24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40013800 	.word	0x40013800
 80055e4:	40020000 	.word	0x40020000
 80055e8:	40020400 	.word	0x40020400
 80055ec:	40020800 	.word	0x40020800
 80055f0:	40020c00 	.word	0x40020c00
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40021400 	.word	0x40021400
 80055fc:	40021800 	.word	0x40021800
 8005600:	40013c00 	.word	0x40013c00

08005604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
 8005610:	4613      	mov	r3, r2
 8005612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005614:	787b      	ldrb	r3, [r7, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005620:	e003      	b.n	800562a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005622:	887b      	ldrh	r3, [r7, #2]
 8005624:	041a      	lsls	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	619a      	str	r2, [r3, #24]
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005638:	b08f      	sub	sp, #60	; 0x3c
 800563a:	af0a      	add	r7, sp, #40	; 0x28
 800563c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e054      	b.n	80056f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f00d f81e 	bl	80126a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2203      	movs	r2, #3
 800566c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f006 fd86 	bl	800c198 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	687e      	ldr	r6, [r7, #4]
 8005694:	466d      	mov	r5, sp
 8005696:	f106 0410 	add.w	r4, r6, #16
 800569a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800569e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80056aa:	1d33      	adds	r3, r6, #4
 80056ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ae:	6838      	ldr	r0, [r7, #0]
 80056b0:	f006 fd00 	bl	800c0b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2101      	movs	r1, #1
 80056ba:	4618      	mov	r0, r3
 80056bc:	f006 fd7d 	bl	800c1ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	687e      	ldr	r6, [r7, #4]
 80056c8:	466d      	mov	r5, sp
 80056ca:	f106 0410 	add.w	r4, r6, #16
 80056ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056da:	e885 0003 	stmia.w	r5, {r0, r1}
 80056de:	1d33      	adds	r3, r6, #4
 80056e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056e2:	6838      	ldr	r0, [r7, #0]
 80056e4:	f006 fe90 	bl	800c408 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80056fa:	b590      	push	{r4, r7, lr}
 80056fc:	b089      	sub	sp, #36	; 0x24
 80056fe:	af04      	add	r7, sp, #16
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	4608      	mov	r0, r1
 8005704:	4611      	mov	r1, r2
 8005706:	461a      	mov	r2, r3
 8005708:	4603      	mov	r3, r0
 800570a:	70fb      	strb	r3, [r7, #3]
 800570c:	460b      	mov	r3, r1
 800570e:	70bb      	strb	r3, [r7, #2]
 8005710:	4613      	mov	r3, r2
 8005712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_HCD_HC_Init+0x28>
 800571e:	2302      	movs	r3, #2
 8005720:	e07f      	b.n	8005822 <HAL_HCD_HC_Init+0x128>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	333d      	adds	r3, #61	; 0x3d
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	440b      	add	r3, r1
 800574c:	3338      	adds	r3, #56	; 0x38
 800574e:	787a      	ldrb	r2, [r7, #1]
 8005750:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	440b      	add	r3, r1
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005764:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	440b      	add	r3, r1
 8005774:	3339      	adds	r3, #57	; 0x39
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	440b      	add	r3, r1
 8005788:	333f      	adds	r3, #63	; 0x3f
 800578a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800578e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	78bb      	ldrb	r3, [r7, #2]
 8005794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005798:	b2d8      	uxtb	r0, r3
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	440b      	add	r3, r1
 80057a6:	333a      	adds	r3, #58	; 0x3a
 80057a8:	4602      	mov	r2, r0
 80057aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80057ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	da0a      	bge.n	80057ca <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	333b      	adds	r3, #59	; 0x3b
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e009      	b.n	80057de <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	440b      	add	r3, r1
 80057d8:	333b      	adds	r3, #59	; 0x3b
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	333c      	adds	r3, #60	; 0x3c
 80057ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80057f2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	787c      	ldrb	r4, [r7, #1]
 80057fa:	78ba      	ldrb	r2, [r7, #2]
 80057fc:	78f9      	ldrb	r1, [r7, #3]
 80057fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005800:	9302      	str	r3, [sp, #8]
 8005802:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	f897 3020 	ldrb.w	r3, [r7, #32]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4623      	mov	r3, r4
 8005810:	f006 ff76 	bl	800c700 <USB_HC_Init>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bd90      	pop	{r4, r7, pc}

0800582a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_HCD_HC_Halt+0x1e>
 8005844:	2302      	movs	r3, #2
 8005846:	e00f      	b.n	8005868 <HAL_HCD_HC_Halt+0x3e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f007 f9b2 	bl	800cbc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4603      	mov	r3, r0
 8005880:	70fb      	strb	r3, [r7, #3]
 8005882:	460b      	mov	r3, r1
 8005884:	70bb      	strb	r3, [r7, #2]
 8005886:	4613      	mov	r3, r2
 8005888:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	440b      	add	r3, r1
 8005898:	333b      	adds	r3, #59	; 0x3b
 800589a:	78ba      	ldrb	r2, [r7, #2]
 800589c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800589e:	78fa      	ldrb	r2, [r7, #3]
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	333f      	adds	r3, #63	; 0x3f
 80058ae:	787a      	ldrb	r2, [r7, #1]
 80058b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80058b2:	7c3b      	ldrb	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d114      	bne.n	80058e2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	440b      	add	r3, r1
 80058c6:	3342      	adds	r3, #66	; 0x42
 80058c8:	2203      	movs	r2, #3
 80058ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80058cc:	78fa      	ldrb	r2, [r7, #3]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	440b      	add	r3, r1
 80058da:	333d      	adds	r3, #61	; 0x3d
 80058dc:	7f3a      	ldrb	r2, [r7, #28]
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e009      	b.n	80058f6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	3342      	adds	r3, #66	; 0x42
 80058f2:	2202      	movs	r2, #2
 80058f4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80058f6:	787b      	ldrb	r3, [r7, #1]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	f200 80d6 	bhi.w	8005aaa <HAL_HCD_HC_SubmitRequest+0x23a>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005915 	.word	0x08005915
 8005908:	08005a95 	.word	0x08005a95
 800590c:	08005981 	.word	0x08005981
 8005910:	08005a0b 	.word	0x08005a0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005914:	7c3b      	ldrb	r3, [r7, #16]
 8005916:	2b01      	cmp	r3, #1
 8005918:	f040 80c9 	bne.w	8005aae <HAL_HCD_HC_SubmitRequest+0x23e>
 800591c:	78bb      	ldrb	r3, [r7, #2]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f040 80c5 	bne.w	8005aae <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005924:	8b3b      	ldrh	r3, [r7, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	3351      	adds	r3, #81	; 0x51
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	440b      	add	r3, r1
 800594c:	3351      	adds	r3, #81	; 0x51
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	440b      	add	r3, r1
 8005962:	3342      	adds	r3, #66	; 0x42
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005968:	e0a1      	b.n	8005aae <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	3342      	adds	r3, #66	; 0x42
 800597a:	2202      	movs	r2, #2
 800597c:	701a      	strb	r2, [r3, #0]
      break;
 800597e:	e096      	b.n	8005aae <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005980:	78bb      	ldrb	r3, [r7, #2]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d120      	bne.n	80059c8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	440b      	add	r3, r1
 8005994:	3351      	adds	r3, #81	; 0x51
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	3342      	adds	r3, #66	; 0x42
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80059b0:	e07e      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	440b      	add	r3, r1
 80059c0:	3342      	adds	r3, #66	; 0x42
 80059c2:	2202      	movs	r2, #2
 80059c4:	701a      	strb	r2, [r3, #0]
      break;
 80059c6:	e073      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	440b      	add	r3, r1
 80059d6:	3350      	adds	r3, #80	; 0x50
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	440b      	add	r3, r1
 80059ec:	3342      	adds	r3, #66	; 0x42
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
      break;
 80059f2:	e05d      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	440b      	add	r3, r1
 8005a02:	3342      	adds	r3, #66	; 0x42
 8005a04:	2202      	movs	r2, #2
 8005a06:	701a      	strb	r2, [r3, #0]
      break;
 8005a08:	e052      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005a0a:	78bb      	ldrb	r3, [r7, #2]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d120      	bne.n	8005a52 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3351      	adds	r3, #81	; 0x51
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	440b      	add	r3, r1
 8005a34:	3342      	adds	r3, #66	; 0x42
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005a3a:	e039      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	3342      	adds	r3, #66	; 0x42
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	701a      	strb	r2, [r3, #0]
      break;
 8005a50:	e02e      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	3350      	adds	r3, #80	; 0x50
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	440b      	add	r3, r1
 8005a76:	3342      	adds	r3, #66	; 0x42
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
      break;
 8005a7c:	e018      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3342      	adds	r3, #66	; 0x42
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
      break;
 8005a92:	e00d      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3342      	adds	r3, #66	; 0x42
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
      break;
 8005aa8:	e002      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005aae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	3344      	adds	r3, #68	; 0x44
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	8b39      	ldrh	r1, [r7, #24]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4403      	add	r3, r0
 8005ad4:	3348      	adds	r3, #72	; 0x48
 8005ad6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005ad8:	78fa      	ldrb	r2, [r7, #3]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	440b      	add	r3, r1
 8005ae6:	335c      	adds	r3, #92	; 0x5c
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	440b      	add	r3, r1
 8005afa:	334c      	adds	r3, #76	; 0x4c
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3339      	adds	r3, #57	; 0x39
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	335d      	adds	r3, #93	; 0x5d
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	3338      	adds	r3, #56	; 0x38
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	18d1      	adds	r1, r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	f006 fee6 	bl	800c914 <USB_HC_StartXfer>
 8005b48:	4603      	mov	r3, r0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop

08005b54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f006 fc09 	bl	800c382 <USB_GetMode>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	f040 80ef 	bne.w	8005d56 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f006 fbed 	bl	800c35c <USB_ReadInterrupts>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80e5 	beq.w	8005d54 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f006 fbe4 	bl	800c35c <USB_ReadInterrupts>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b9e:	d104      	bne.n	8005baa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f006 fbd4 	bl	800c35c <USB_ReadInterrupts>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbe:	d104      	bne.n	8005bca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f006 fbc4 	bl	800c35c <USB_ReadInterrupts>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bde:	d104      	bne.n	8005bea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005be8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f006 fbb4 	bl	800c35c <USB_ReadInterrupts>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d103      	bne.n	8005c06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2202      	movs	r2, #2
 8005c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f006 fba6 	bl	800c35c <USB_ReadInterrupts>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c1a:	d115      	bne.n	8005c48 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d108      	bne.n	8005c48 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f00c fdb2 	bl	80127a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2101      	movs	r1, #1
 8005c42:	4618      	mov	r0, r3
 8005c44:	f006 fc96 	bl	800c574 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f006 fb85 	bl	800c35c <USB_ReadInterrupts>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c5c:	d102      	bne.n	8005c64 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 f966 	bl	8006f30 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f006 fb77 	bl	800c35c <USB_ReadInterrupts>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d106      	bne.n	8005c86 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f00c fd75 	bl	8012768 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2208      	movs	r2, #8
 8005c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f006 fb66 	bl	800c35c <USB_ReadInterrupts>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c9a:	d138      	bne.n	8005d0e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f006 ff7d 	bl	800cba0 <USB_HC_ReadInterrupt>
 8005ca6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e025      	b.n	8005cfa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd8:	d106      	bne.n	8005ce8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f8cf 	bl	8005e84 <HCD_HC_IN_IRQHandler>
 8005ce6:	e005      	b.n	8005cf4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fcfd 	bl	80066ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d3d4      	bcc.n	8005cae <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f006 fb22 	bl	800c35c <USB_ReadInterrupts>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d101      	bne.n	8005d26 <HAL_HCD_IRQHandler+0x1d2>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_HCD_IRQHandler+0x1d4>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d014      	beq.n	8005d56 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0210 	bic.w	r2, r2, #16
 8005d3a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 f84b 	bl	8006dd8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0210 	orr.w	r2, r2, #16
 8005d50:	619a      	str	r2, [r3, #24]
 8005d52:	e000      	b.n	8005d56 <HAL_HCD_IRQHandler+0x202>
      return;
 8005d54:	bf00      	nop
    }
  }
}
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_HCD_Start+0x16>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e013      	b.n	8005d9a <HAL_HCD_Start+0x3e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f006 f9f9 	bl	800c176 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f006 fc56 	bl	800c63c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_HCD_Stop+0x16>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e00d      	b.n	8005dd4 <HAL_HCD_Stop+0x32>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f007 f837 	bl	800ce38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f006 fbfd 	bl	800c5e8 <USB_ResetPort>
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	440b      	add	r3, r1
 8005e12:	335c      	adds	r3, #92	; 0x5c
 8005e14:	781b      	ldrb	r3, [r3, #0]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	334c      	adds	r3, #76	; 0x4c
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f006 fc3f 	bl	800c6dc <USB_GetCurrentFrame>
 8005e5e:	4603      	mov	r3, r0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f006 fc1a 	bl	800c6ae <USB_GetHostSpeed>
 8005e7a:	4603      	mov	r3, r0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d119      	bne.n	8005ee8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee0:	f043 0302 	orr.w	r3, r3, #2
 8005ee4:	60d3      	str	r3, [r2, #12]
 8005ee6:	e0ce      	b.n	8006086 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d12c      	bne.n	8005f5a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	440b      	add	r3, r1
 8005f22:	335d      	adds	r3, #93	; 0x5d
 8005f24:	2207      	movs	r2, #7
 8005f26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f42:	f043 0302 	orr.w	r3, r3, #2
 8005f46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	4611      	mov	r1, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f006 fe35 	bl	800cbc2 <USB_HC_Halt>
 8005f58:	e095      	b.n	8006086 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d109      	bne.n	8005f84 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2320      	movs	r3, #32
 8005f80:	6093      	str	r3, [r2, #8]
 8005f82:	e080      	b.n	8006086 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d134      	bne.n	8006004 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	440b      	add	r3, r1
 8005fc8:	335d      	adds	r3, #93	; 0x5d
 8005fca:	2205      	movs	r2, #5
 8005fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2310      	movs	r3, #16
 8005fde:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	2308      	movs	r3, #8
 8005ff0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f006 fde0 	bl	800cbc2 <USB_HC_Halt>
 8006002:	e040      	b.n	8006086 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601a:	d134      	bne.n	8006086 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	440a      	add	r2, r1
 8006032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006036:	f043 0302 	orr.w	r3, r3, #2
 800603a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f006 fdbb 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	461a      	mov	r2, r3
 800605a:	2310      	movs	r3, #16
 800605c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	440b      	add	r3, r1
 800606c:	335d      	adds	r3, #93	; 0x5d
 800606e:	2208      	movs	r2, #8
 8006070:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	461a      	mov	r2, r3
 8006080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006084:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609c:	d122      	bne.n	80060e4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b8:	f043 0302 	orr.w	r3, r3, #2
 80060bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f006 fd7a 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060da:	461a      	mov	r2, r3
 80060dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80060e2:	e300      	b.n	80066e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	f040 80fd 	bne.w	80062f6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	440b      	add	r3, r1
 8006112:	3348      	adds	r3, #72	; 0x48
 8006114:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	0159      	lsls	r1, r3, #5
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	440b      	add	r3, r1
 800611e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006128:	1ad1      	subs	r1, r2, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4403      	add	r3, r0
 8006138:	334c      	adds	r3, #76	; 0x4c
 800613a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	335d      	adds	r3, #93	; 0x5d
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	440b      	add	r3, r1
 800615e:	3358      	adds	r3, #88	; 0x58
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	461a      	mov	r2, r3
 8006172:	2301      	movs	r3, #1
 8006174:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	333f      	adds	r3, #63	; 0x3f
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	440b      	add	r3, r1
 800619a:	333f      	adds	r3, #63	; 0x3f
 800619c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d121      	bne.n	80061e6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061bc:	f043 0302 	orr.w	r3, r3, #2
 80061c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f006 fcf8 	bl	800cbc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	461a      	mov	r2, r3
 80061e0:	2310      	movs	r3, #16
 80061e2:	6093      	str	r3, [r2, #8]
 80061e4:	e070      	b.n	80062c8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	440b      	add	r3, r1
 80061f4:	333f      	adds	r3, #63	; 0x3f
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d12a      	bne.n	8006252 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	440a      	add	r2, r1
 8006212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	335c      	adds	r3, #92	; 0x5c
 800622c:	2201      	movs	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	b2d8      	uxtb	r0, r3
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	440b      	add	r3, r1
 8006242:	335c      	adds	r3, #92	; 0x5c
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	4601      	mov	r1, r0
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f00c fab6 	bl	80127bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8006250:	e03a      	b.n	80062c8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	440b      	add	r3, r1
 8006260:	333f      	adds	r3, #63	; 0x3f
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d12f      	bne.n	80062c8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	440b      	add	r3, r1
 8006276:	335c      	adds	r3, #92	; 0x5c
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	440b      	add	r3, r1
 800628a:	3350      	adds	r3, #80	; 0x50
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	f083 0301 	eor.w	r3, r3, #1
 8006292:	b2d8      	uxtb	r0, r3
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	440b      	add	r3, r1
 80062a2:	3350      	adds	r3, #80	; 0x50
 80062a4:	4602      	mov	r2, r0
 80062a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	b2d8      	uxtb	r0, r3
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	440b      	add	r3, r1
 80062ba:	335c      	adds	r3, #92	; 0x5c
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	4601      	mov	r1, r0
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f00c fa7a 	bl	80127bc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	440b      	add	r3, r1
 80062d6:	3350      	adds	r3, #80	; 0x50
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f083 0301 	eor.w	r3, r3, #1
 80062de:	b2d8      	uxtb	r0, r3
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	440b      	add	r3, r1
 80062ee:	3350      	adds	r3, #80	; 0x50
 80062f0:	4602      	mov	r2, r0
 80062f2:	701a      	strb	r2, [r3, #0]
}
 80062f4:	e1f7      	b.n	80066e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b02      	cmp	r3, #2
 800630a:	f040 811a 	bne.w	8006542 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	440a      	add	r2, r1
 8006324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006328:	f023 0302 	bic.w	r3, r3, #2
 800632c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	440b      	add	r3, r1
 800633c:	335d      	adds	r3, #93	; 0x5d
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d10a      	bne.n	800635a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	440b      	add	r3, r1
 8006352:	335c      	adds	r3, #92	; 0x5c
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e0d9      	b.n	800650e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	440b      	add	r3, r1
 8006368:	335d      	adds	r3, #93	; 0x5d
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b05      	cmp	r3, #5
 800636e:	d10a      	bne.n	8006386 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	440b      	add	r3, r1
 800637e:	335c      	adds	r3, #92	; 0x5c
 8006380:	2205      	movs	r2, #5
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e0c3      	b.n	800650e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	440b      	add	r3, r1
 8006394:	335d      	adds	r3, #93	; 0x5d
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b06      	cmp	r3, #6
 800639a:	d00a      	beq.n	80063b2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	440b      	add	r3, r1
 80063aa:	335d      	adds	r3, #93	; 0x5d
 80063ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d156      	bne.n	8006460 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	440b      	add	r3, r1
 80063c0:	3358      	adds	r3, #88	; 0x58
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4403      	add	r3, r0
 80063d4:	3358      	adds	r3, #88	; 0x58
 80063d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	440b      	add	r3, r1
 80063e6:	3358      	adds	r3, #88	; 0x58
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d914      	bls.n	8006418 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	440b      	add	r3, r1
 80063fc:	3358      	adds	r3, #88	; 0x58
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	440b      	add	r3, r1
 8006410:	335c      	adds	r3, #92	; 0x5c
 8006412:	2204      	movs	r2, #4
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e009      	b.n	800642c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	440b      	add	r3, r1
 8006426:	335c      	adds	r3, #92	; 0x5c
 8006428:	2202      	movs	r2, #2
 800642a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006442:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800644a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e056      	b.n	800650e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	440b      	add	r3, r1
 800646e:	335d      	adds	r3, #93	; 0x5d
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b03      	cmp	r3, #3
 8006474:	d123      	bne.n	80064be <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	440b      	add	r3, r1
 8006484:	335c      	adds	r3, #92	; 0x5c
 8006486:	2202      	movs	r2, #2
 8006488:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064a0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	461a      	mov	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e027      	b.n	800650e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	335d      	adds	r3, #93	; 0x5d
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b07      	cmp	r3, #7
 80064d2:	d11c      	bne.n	800650e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	440b      	add	r3, r1
 80064e2:	3358      	adds	r3, #88	; 0x58
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4403      	add	r3, r0
 80064f6:	3358      	adds	r3, #88	; 0x58
 80064f8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	440b      	add	r3, r1
 8006508:	335c      	adds	r3, #92	; 0x5c
 800650a:	2204      	movs	r2, #4
 800650c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	461a      	mov	r2, r3
 800651c:	2302      	movs	r3, #2
 800651e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	b2d8      	uxtb	r0, r3
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	440b      	add	r3, r1
 8006532:	335c      	adds	r3, #92	; 0x5c
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	4601      	mov	r1, r0
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f00c f93e 	bl	80127bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006540:	e0d1      	b.n	80066e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	2b80      	cmp	r3, #128	; 0x80
 8006556:	d13e      	bne.n	80065d6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006572:	f043 0302 	orr.w	r3, r3, #2
 8006576:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	3358      	adds	r3, #88	; 0x58
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4403      	add	r3, r0
 800659a:	3358      	adds	r3, #88	; 0x58
 800659c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	440b      	add	r3, r1
 80065ac:	335d      	adds	r3, #93	; 0x5d
 80065ae:	2206      	movs	r2, #6
 80065b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f006 fb00 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ce:	461a      	mov	r2, r3
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	6093      	str	r3, [r2, #8]
}
 80065d4:	e087      	b.n	80066e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d17c      	bne.n	80066e6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	440b      	add	r3, r1
 80065fa:	333f      	adds	r3, #63	; 0x3f
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d122      	bne.n	8006648 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	3358      	adds	r3, #88	; 0x58
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	440a      	add	r2, r1
 800662c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006630:	f043 0302 	orr.w	r3, r3, #2
 8006634:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f006 fabe 	bl	800cbc2 <USB_HC_Halt>
 8006646:	e045      	b.n	80066d4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	440b      	add	r3, r1
 8006656:	333f      	adds	r3, #63	; 0x3f
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	440b      	add	r3, r1
 800666c:	333f      	adds	r3, #63	; 0x3f
 800666e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006670:	2b02      	cmp	r3, #2
 8006672:	d12f      	bne.n	80066d4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	440b      	add	r3, r1
 8006682:	3358      	adds	r3, #88	; 0x58
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d121      	bne.n	80066d4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	440b      	add	r3, r1
 800669e:	335d      	adds	r3, #93	; 0x5d
 80066a0:	2203      	movs	r2, #3
 80066a2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f006 fa77 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	461a      	mov	r2, r3
 80066e2:	2310      	movs	r3, #16
 80066e4:	6093      	str	r3, [r2, #8]
}
 80066e6:	bf00      	nop
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b04      	cmp	r3, #4
 800671c:	d119      	bne.n	8006752 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	461a      	mov	r2, r3
 800672c:	2304      	movs	r3, #4
 800672e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	440a      	add	r2, r1
 8006746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674a:	f043 0302 	orr.w	r3, r3, #2
 800674e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006750:	e33e      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b20      	cmp	r3, #32
 8006766:	d141      	bne.n	80067ec <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	461a      	mov	r2, r3
 8006776:	2320      	movs	r3, #32
 8006778:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	440b      	add	r3, r1
 8006788:	333d      	adds	r3, #61	; 0x3d
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 831f 	bne.w	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	440b      	add	r3, r1
 80067a0:	333d      	adds	r3, #61	; 0x3d
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	440b      	add	r3, r1
 80067b4:	335c      	adds	r3, #92	; 0x5c
 80067b6:	2202      	movs	r2, #2
 80067b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	4611      	mov	r1, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f006 f9ec 	bl	800cbc2 <USB_HC_Halt>
}
 80067ea:	e2f1      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d13f      	bne.n	8006882 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	440b      	add	r3, r1
 8006810:	335d      	adds	r3, #93	; 0x5d
 8006812:	2204      	movs	r2, #4
 8006814:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	440b      	add	r3, r1
 8006824:	333d      	adds	r3, #61	; 0x3d
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	440b      	add	r3, r1
 8006838:	3358      	adds	r3, #88	; 0x58
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f006 f9aa 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	461a      	mov	r2, r3
 800687c:	2340      	movs	r3, #64	; 0x40
 800687e:	6093      	str	r3, [r2, #8]
}
 8006880:	e2a6      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006898:	d122      	bne.n	80068e0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b4:	f043 0302 	orr.w	r3, r3, #2
 80068b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f006 f97c 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d6:	461a      	mov	r2, r3
 80068d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068dc:	6093      	str	r3, [r2, #8]
}
 80068de:	e277      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d135      	bne.n	8006962 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	440b      	add	r3, r1
 8006904:	3358      	adds	r3, #88	; 0x58
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	440a      	add	r2, r1
 8006920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f006 f944 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	461a      	mov	r2, r3
 8006948:	2301      	movs	r3, #1
 800694a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	440b      	add	r3, r1
 800695a:	335d      	adds	r3, #93	; 0x5d
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
}
 8006960:	e236      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b08      	cmp	r3, #8
 8006976:	d12b      	bne.n	80069d0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	2308      	movs	r3, #8
 8006988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a4:	f043 0302 	orr.w	r3, r3, #2
 80069a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f006 f904 	bl	800cbc2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	440b      	add	r3, r1
 80069c8:	335d      	adds	r3, #93	; 0x5d
 80069ca:	2205      	movs	r2, #5
 80069cc:	701a      	strb	r2, [r3, #0]
}
 80069ce:	e1ff      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d155      	bne.n	8006a92 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	440b      	add	r3, r1
 80069f4:	3358      	adds	r3, #88	; 0x58
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	440b      	add	r3, r1
 8006a08:	335d      	adds	r3, #93	; 0x5d
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	440b      	add	r3, r1
 8006a1c:	333d      	adds	r3, #61	; 0x3d
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d114      	bne.n	8006a4e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	440b      	add	r3, r1
 8006a32:	333c      	adds	r3, #60	; 0x3c
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	440b      	add	r3, r1
 8006a48:	333d      	adds	r3, #61	; 0x3d
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a68:	f043 0302 	orr.w	r3, r3, #2
 8006a6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	4611      	mov	r1, r2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f006 f8a2 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	6093      	str	r3, [r2, #8]
}
 8006a90:	e19e      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b80      	cmp	r3, #128	; 0x80
 8006aa6:	d12b      	bne.n	8006b00 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ac2:	f043 0302 	orr.w	r3, r3, #2
 8006ac6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f006 f875 	bl	800cbc2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	440b      	add	r3, r1
 8006ae6:	335d      	adds	r3, #93	; 0x5d
 8006ae8:	2206      	movs	r2, #6
 8006aea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af8:	461a      	mov	r2, r3
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	6093      	str	r3, [r2, #8]
}
 8006afe:	e167      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b16:	d135      	bne.n	8006b84 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b32:	f043 0302 	orr.w	r3, r3, #2
 8006b36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f006 f83d 	bl	800cbc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b54:	461a      	mov	r2, r3
 8006b56:	2310      	movs	r3, #16
 8006b58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	461a      	mov	r2, r3
 8006b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	440b      	add	r3, r1
 8006b7c:	335d      	adds	r3, #93	; 0x5d
 8006b7e:	2208      	movs	r2, #8
 8006b80:	701a      	strb	r2, [r3, #0]
}
 8006b82:	e125      	b.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	f040 811a 	bne.w	8006dd0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb6:	f023 0302 	bic.w	r3, r3, #2
 8006bba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	440b      	add	r3, r1
 8006bca:	335d      	adds	r3, #93	; 0x5d
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d137      	bne.n	8006c42 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	440b      	add	r3, r1
 8006be0:	335c      	adds	r3, #92	; 0x5c
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	440b      	add	r3, r1
 8006bf4:	333f      	adds	r3, #63	; 0x3f
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d00b      	beq.n	8006c14 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	440b      	add	r3, r1
 8006c0a:	333f      	adds	r3, #63	; 0x3f
 8006c0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	f040 80c5 	bne.w	8006d9e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	440b      	add	r3, r1
 8006c22:	3351      	adds	r3, #81	; 0x51
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	f083 0301 	eor.w	r3, r3, #1
 8006c2a:	b2d8      	uxtb	r0, r3
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	440b      	add	r3, r1
 8006c3a:	3351      	adds	r3, #81	; 0x51
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e0ad      	b.n	8006d9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	440b      	add	r3, r1
 8006c50:	335d      	adds	r3, #93	; 0x5d
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d10a      	bne.n	8006c6e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	440b      	add	r3, r1
 8006c66:	335c      	adds	r3, #92	; 0x5c
 8006c68:	2202      	movs	r2, #2
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e097      	b.n	8006d9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	335d      	adds	r3, #93	; 0x5d
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d10a      	bne.n	8006c9a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	440b      	add	r3, r1
 8006c92:	335c      	adds	r3, #92	; 0x5c
 8006c94:	2202      	movs	r2, #2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e081      	b.n	8006d9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	440b      	add	r3, r1
 8006ca8:	335d      	adds	r3, #93	; 0x5d
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b05      	cmp	r3, #5
 8006cae:	d10a      	bne.n	8006cc6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	440b      	add	r3, r1
 8006cbe:	335c      	adds	r3, #92	; 0x5c
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e06b      	b.n	8006d9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	440b      	add	r3, r1
 8006cd4:	335d      	adds	r3, #93	; 0x5d
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d00a      	beq.n	8006cf2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	440b      	add	r3, r1
 8006cea:	335d      	adds	r3, #93	; 0x5d
 8006cec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d155      	bne.n	8006d9e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	440b      	add	r3, r1
 8006d00:	3358      	adds	r3, #88	; 0x58
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	1c59      	adds	r1, r3, #1
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4403      	add	r3, r0
 8006d14:	3358      	adds	r3, #88	; 0x58
 8006d16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	440b      	add	r3, r1
 8006d26:	3358      	adds	r3, #88	; 0x58
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d914      	bls.n	8006d58 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3358      	adds	r3, #88	; 0x58
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	440b      	add	r3, r1
 8006d50:	335c      	adds	r3, #92	; 0x5c
 8006d52:	2204      	movs	r2, #4
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	e009      	b.n	8006d6c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	440b      	add	r3, r1
 8006d66:	335c      	adds	r3, #92	; 0x5c
 8006d68:	2202      	movs	r2, #2
 8006d6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006daa:	461a      	mov	r2, r3
 8006dac:	2302      	movs	r3, #2
 8006dae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	b2d8      	uxtb	r0, r3
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	440b      	add	r3, r1
 8006dc2:	335c      	adds	r3, #92	; 0x5c
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4601      	mov	r1, r0
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f00b fcf6 	bl	80127bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006dd0:	bf00      	nop
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	0c5b      	lsrs	r3, r3, #17
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d003      	beq.n	8006e1c <HCD_RXQLVL_IRQHandler+0x44>
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	f000 8082 	beq.w	8006f1e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006e1a:	e083      	b.n	8006f24 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d07f      	beq.n	8006f22 <HCD_RXQLVL_IRQHandler+0x14a>
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	3344      	adds	r3, #68	; 0x44
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d074      	beq.n	8006f22 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	3344      	adds	r3, #68	; 0x44
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	b292      	uxth	r2, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	f005 fa59 	bl	800c30a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	440b      	add	r3, r1
 8006e66:	3344      	adds	r3, #68	; 0x44
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	18d1      	adds	r1, r2, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4403      	add	r3, r0
 8006e7c:	3344      	adds	r3, #68	; 0x44
 8006e7e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	440b      	add	r3, r1
 8006e8e:	334c      	adds	r3, #76	; 0x4c
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	18d1      	adds	r1, r2, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	4403      	add	r3, r0
 8006ea4:	334c      	adds	r3, #76	; 0x4c
 8006ea6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <HCD_RXQLVL_IRQHandler+0x154>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d031      	beq.n	8006f22 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ed4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006edc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	440b      	add	r3, r1
 8006efe:	3350      	adds	r3, #80	; 0x50
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f083 0301 	eor.w	r3, r3, #1
 8006f06:	b2d8      	uxtb	r0, r3
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	440b      	add	r3, r1
 8006f16:	3350      	adds	r3, #80	; 0x50
 8006f18:	4602      	mov	r2, r0
 8006f1a:	701a      	strb	r2, [r3, #0]
      break;
 8006f1c:	e001      	b.n	8006f22 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e000      	b.n	8006f24 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006f22:	bf00      	nop
  }
}
 8006f24:	bf00      	nop
 8006f26:	3728      	adds	r7, #40	; 0x28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	1ff80000 	.word	0x1ff80000

08006f30 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f5c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d10b      	bne.n	8006f80 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d102      	bne.n	8006f78 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f00b fc06 	bl	8012784 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f043 0302 	orr.w	r3, r3, #2
 8006f7e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d132      	bne.n	8006ff0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f043 0308 	orr.w	r3, r3, #8
 8006f90:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d126      	bne.n	8006fea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d113      	bne.n	8006fcc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fae:	d106      	bne.n	8006fbe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f005 fadc 	bl	800c574 <USB_InitFSLSPClkSel>
 8006fbc:	e011      	b.n	8006fe2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f005 fad5 	bl	800c574 <USB_InitFSLSPClkSel>
 8006fca:	e00a      	b.n	8006fe2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d106      	bne.n	8006fe2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006fe0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f00b fbfc 	bl	80127e0 <HAL_HCD_PortEnabled_Callback>
 8006fe8:	e002      	b.n	8006ff0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f00b fc06 	bl	80127fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d103      	bne.n	8007002 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f043 0320 	orr.w	r3, r3, #32
 8007000:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007008:	461a      	mov	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6013      	str	r3, [r2, #0]
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e11f      	b.n	800726a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fa ff70 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2224      	movs	r2, #36	; 0x24
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0201 	bic.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800706a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800707a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800707c:	f001 f80e 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 8007080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	4a7b      	ldr	r2, [pc, #492]	; (8007274 <HAL_I2C_Init+0x25c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d807      	bhi.n	800709c <HAL_I2C_Init+0x84>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a7a      	ldr	r2, [pc, #488]	; (8007278 <HAL_I2C_Init+0x260>)
 8007090:	4293      	cmp	r3, r2
 8007092:	bf94      	ite	ls
 8007094:	2301      	movls	r3, #1
 8007096:	2300      	movhi	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	e006      	b.n	80070aa <HAL_I2C_Init+0x92>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a77      	ldr	r2, [pc, #476]	; (800727c <HAL_I2C_Init+0x264>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bf94      	ite	ls
 80070a4:	2301      	movls	r3, #1
 80070a6:	2300      	movhi	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e0db      	b.n	800726a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a72      	ldr	r2, [pc, #456]	; (8007280 <HAL_I2C_Init+0x268>)
 80070b6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ba:	0c9b      	lsrs	r3, r3, #18
 80070bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a64      	ldr	r2, [pc, #400]	; (8007274 <HAL_I2C_Init+0x25c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d802      	bhi.n	80070ec <HAL_I2C_Init+0xd4>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	3301      	adds	r3, #1
 80070ea:	e009      	b.n	8007100 <HAL_I2C_Init+0xe8>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	4a63      	ldr	r2, [pc, #396]	; (8007284 <HAL_I2C_Init+0x26c>)
 80070f8:	fba2 2303 	umull	r2, r3, r2, r3
 80070fc:	099b      	lsrs	r3, r3, #6
 80070fe:	3301      	adds	r3, #1
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	430b      	orrs	r3, r1
 8007106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4956      	ldr	r1, [pc, #344]	; (8007274 <HAL_I2C_Init+0x25c>)
 800711c:	428b      	cmp	r3, r1
 800711e:	d80d      	bhi.n	800713c <HAL_I2C_Init+0x124>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	1e59      	subs	r1, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	fbb1 f3f3 	udiv	r3, r1, r3
 800712e:	3301      	adds	r3, #1
 8007130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007134:	2b04      	cmp	r3, #4
 8007136:	bf38      	it	cc
 8007138:	2304      	movcc	r3, #4
 800713a:	e04f      	b.n	80071dc <HAL_I2C_Init+0x1c4>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d111      	bne.n	8007168 <HAL_I2C_Init+0x150>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	1e58      	subs	r0, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	440b      	add	r3, r1
 8007152:	fbb0 f3f3 	udiv	r3, r0, r3
 8007156:	3301      	adds	r3, #1
 8007158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800715c:	2b00      	cmp	r3, #0
 800715e:	bf0c      	ite	eq
 8007160:	2301      	moveq	r3, #1
 8007162:	2300      	movne	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e012      	b.n	800718e <HAL_I2C_Init+0x176>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	1e58      	subs	r0, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6859      	ldr	r1, [r3, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	0099      	lsls	r1, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	fbb0 f3f3 	udiv	r3, r0, r3
 800717e:	3301      	adds	r3, #1
 8007180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf0c      	ite	eq
 8007188:	2301      	moveq	r3, #1
 800718a:	2300      	movne	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_I2C_Init+0x17e>
 8007192:	2301      	movs	r3, #1
 8007194:	e022      	b.n	80071dc <HAL_I2C_Init+0x1c4>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10e      	bne.n	80071bc <HAL_I2C_Init+0x1a4>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1e58      	subs	r0, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6859      	ldr	r1, [r3, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	440b      	add	r3, r1
 80071ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80071b0:	3301      	adds	r3, #1
 80071b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ba:	e00f      	b.n	80071dc <HAL_I2C_Init+0x1c4>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1e58      	subs	r0, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6859      	ldr	r1, [r3, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	0099      	lsls	r1, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80071d2:	3301      	adds	r3, #1
 80071d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	6809      	ldr	r1, [r1, #0]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800720a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6911      	ldr	r1, [r2, #16]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68d2      	ldr	r2, [r2, #12]
 8007216:	4311      	orrs	r1, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	430b      	orrs	r3, r1
 800721e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	000186a0 	.word	0x000186a0
 8007278:	001e847f 	.word	0x001e847f
 800727c:	003d08ff 	.word	0x003d08ff
 8007280:	431bde83 	.word	0x431bde83
 8007284:	10624dd3 	.word	0x10624dd3

08007288 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e154      	b.n	8007544 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a98      	ldr	r2, [pc, #608]	; (8007514 <HAL_I2S_Init+0x28c>)
 80072b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fa fe7d 	bl	8001fb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80072d0:	f023 030f 	bic.w	r3, r3, #15
 80072d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2202      	movs	r2, #2
 80072dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d06f      	beq.n	80073c6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80072ee:	2310      	movs	r3, #16
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	e001      	b.n	80072f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80072f4:	2320      	movs	r3, #32
 80072f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d802      	bhi.n	8007306 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a83      	ldr	r2, [pc, #524]	; (8007518 <HAL_I2S_Init+0x290>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <HAL_I2S_Init+0x92>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a81      	ldr	r2, [pc, #516]	; (800751c <HAL_I2S_Init+0x294>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d104      	bne.n	8007324 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800731a:	2001      	movs	r0, #1
 800731c:	f001 f9a4 	bl	8008668 <HAL_RCCEx_GetPeriphCLKFreq>
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	e003      	b.n	800732c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8007324:	2002      	movs	r0, #2
 8007326:	f001 f99f 	bl	8008668 <HAL_RCCEx_GetPeriphCLKFreq>
 800732a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007334:	d125      	bne.n	8007382 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	fbb2 f2f3 	udiv	r2, r2, r3
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	3305      	adds	r3, #5
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	e01f      	b.n	80073a0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	fbb2 f2f3 	udiv	r2, r2, r3
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	3305      	adds	r3, #5
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e00e      	b.n	80073a0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	fbb2 f2f3 	udiv	r2, r2, r3
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	461a      	mov	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	3305      	adds	r3, #5
 800739e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4a5f      	ldr	r2, [pc, #380]	; (8007520 <HAL_I2S_Init+0x298>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	08db      	lsrs	r3, r3, #3
 80073aa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e003      	b.n	80073ce <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80073c6:	2302      	movs	r3, #2
 80073c8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d902      	bls.n	80073da <HAL_I2S_Init+0x152>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2bff      	cmp	r3, #255	; 0xff
 80073d8:	d907      	bls.n	80073ea <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	f043 0210 	orr.w	r2, r3, #16
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e0ac      	b.n	8007544 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	ea42 0103 	orr.w	r1, r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007408:	f023 030f 	bic.w	r3, r3, #15
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6851      	ldr	r1, [r2, #4]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6892      	ldr	r2, [r2, #8]
 8007414:	4311      	orrs	r1, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68d2      	ldr	r2, [r2, #12]
 800741a:	4311      	orrs	r1, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6992      	ldr	r2, [r2, #24]
 8007420:	430a      	orrs	r2, r1
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800742c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b30      	cmp	r3, #48	; 0x30
 8007434:	d003      	beq.n	800743e <HAL_I2S_Init+0x1b6>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2bb0      	cmp	r3, #176	; 0xb0
 800743c:	d107      	bne.n	800744e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800744c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d16e      	bne.n	8007534 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a32      	ldr	r2, [pc, #200]	; (8007524 <HAL_I2S_Init+0x29c>)
 800745a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2d      	ldr	r2, [pc, #180]	; (8007518 <HAL_I2S_Init+0x290>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d101      	bne.n	800746a <HAL_I2S_Init+0x1e2>
 8007466:	4b30      	ldr	r3, [pc, #192]	; (8007528 <HAL_I2S_Init+0x2a0>)
 8007468:	e001      	b.n	800746e <HAL_I2S_Init+0x1e6>
 800746a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	4928      	ldr	r1, [pc, #160]	; (8007518 <HAL_I2S_Init+0x290>)
 8007476:	428a      	cmp	r2, r1
 8007478:	d101      	bne.n	800747e <HAL_I2S_Init+0x1f6>
 800747a:	4a2b      	ldr	r2, [pc, #172]	; (8007528 <HAL_I2S_Init+0x2a0>)
 800747c:	e001      	b.n	8007482 <HAL_I2S_Init+0x1fa>
 800747e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8007482:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007486:	f023 030f 	bic.w	r3, r3, #15
 800748a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a21      	ldr	r2, [pc, #132]	; (8007518 <HAL_I2S_Init+0x290>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d101      	bne.n	800749a <HAL_I2S_Init+0x212>
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <HAL_I2S_Init+0x2a0>)
 8007498:	e001      	b.n	800749e <HAL_I2S_Init+0x216>
 800749a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800749e:	2202      	movs	r2, #2
 80074a0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <HAL_I2S_Init+0x290>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d101      	bne.n	80074b0 <HAL_I2S_Init+0x228>
 80074ac:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <HAL_I2S_Init+0x2a0>)
 80074ae:	e001      	b.n	80074b4 <HAL_I2S_Init+0x22c>
 80074b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c0:	d003      	beq.n	80074ca <HAL_I2S_Init+0x242>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80074ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e001      	b.n	80074d6 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	b299      	uxth	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80074ec:	4303      	orrs	r3, r0
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	430b      	orrs	r3, r1
 80074f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	897b      	ldrh	r3, [r7, #10]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007502:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a03      	ldr	r2, [pc, #12]	; (8007518 <HAL_I2S_Init+0x290>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10e      	bne.n	800752c <HAL_I2S_Init+0x2a4>
 800750e:	4b06      	ldr	r3, [pc, #24]	; (8007528 <HAL_I2S_Init+0x2a0>)
 8007510:	e00e      	b.n	8007530 <HAL_I2S_Init+0x2a8>
 8007512:	bf00      	nop
 8007514:	08007607 	.word	0x08007607
 8007518:	40003800 	.word	0x40003800
 800751c:	40003c00 	.word	0x40003c00
 8007520:	cccccccd 	.word	0xcccccccd
 8007524:	0800771d 	.word	0x0800771d
 8007528:	40003400 	.word	0x40003400
 800752c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007530:	897a      	ldrh	r2, [r7, #10]
 8007532:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	881a      	ldrh	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	1c9a      	adds	r2, r3, #2
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10e      	bne.n	80075a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007590:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fb ff72 	bl	8003484 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	b292      	uxth	r2, r2
 80075bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	1c9a      	adds	r2, r3, #2
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10e      	bne.n	80075fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fb ff65 	bl	80034c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b086      	sub	sp, #24
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b04      	cmp	r3, #4
 8007620:	d13a      	bne.n	8007698 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d109      	bne.n	8007640 <I2S_IRQHandler+0x3a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d102      	bne.n	8007640 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff ffb4 	bl	80075a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d126      	bne.n	8007698 <I2S_IRQHandler+0x92>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b20      	cmp	r3, #32
 8007656:	d11f      	bne.n	8007698 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007666:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768a:	f043 0202 	orr.w	r2, r3, #2
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fb ff00 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d136      	bne.n	8007712 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d109      	bne.n	80076c2 <I2S_IRQHandler+0xbc>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d102      	bne.n	80076c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff ff45 	bl	800754c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d122      	bne.n	8007712 <I2S_IRQHandler+0x10c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d11b      	bne.n	8007712 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	f043 0204 	orr.w	r2, r3, #4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fb fec3 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007712:	bf00      	nop
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4aa2      	ldr	r2, [pc, #648]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d101      	bne.n	800773a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007736:	4ba2      	ldr	r3, [pc, #648]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007738:	e001      	b.n	800773e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800773a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a9b      	ldr	r2, [pc, #620]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d101      	bne.n	8007758 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007754:	4b9a      	ldr	r3, [pc, #616]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007756:	e001      	b.n	800775c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007768:	d004      	beq.n	8007774 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 8099 	bne.w	80078a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d107      	bne.n	800778e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f925 	bl	80079d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b01      	cmp	r3, #1
 8007796:	d107      	bne.n	80077a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9c8 	bl	8007b38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d13a      	bne.n	8007828 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d035      	beq.n	8007828 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a7e      	ldr	r2, [pc, #504]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80077c6:	4b7e      	ldr	r3, [pc, #504]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80077c8:	e001      	b.n	80077ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80077ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4979      	ldr	r1, [pc, #484]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80077d6:	428b      	cmp	r3, r1
 80077d8:	d101      	bne.n	80077de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80077da:	4b79      	ldr	r3, [pc, #484]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80077dc:	e001      	b.n	80077e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80077de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	f043 0202 	orr.w	r2, r3, #2
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fb fe38 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b08      	cmp	r3, #8
 8007830:	f040 80be 	bne.w	80079b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80b8 	beq.w	80079b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800784e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a59      	ldr	r2, [pc, #356]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d101      	bne.n	800785e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800785a:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800785c:	e001      	b.n	8007862 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800785e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4954      	ldr	r1, [pc, #336]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800786a:	428b      	cmp	r3, r1
 800786c:	d101      	bne.n	8007872 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800786e:	4b54      	ldr	r3, [pc, #336]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007870:	e001      	b.n	8007876 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800787a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	60bb      	str	r3, [r7, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fb fdfa 	bl	8003498 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80078a4:	e084      	b.n	80079b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d107      	bne.n	80078c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8be 	bl	8007a3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d107      	bne.n	80078da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f8fd 	bl	8007ad4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d12f      	bne.n	8007944 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02a      	beq.n	8007944 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a2e      	ldr	r2, [pc, #184]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d101      	bne.n	800790c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007908:	4b2d      	ldr	r3, [pc, #180]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800790a:	e001      	b.n	8007910 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800790c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4929      	ldr	r1, [pc, #164]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007918:	428b      	cmp	r3, r1
 800791a:	d101      	bne.n	8007920 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800791c:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800791e:	e001      	b.n	8007924 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007928:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	f043 0202 	orr.w	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fb fdaa 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b08      	cmp	r3, #8
 800794c:	d131      	bne.n	80079b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	d02c      	beq.n	80079b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a17      	ldr	r2, [pc, #92]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d101      	bne.n	8007966 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007964:	e001      	b.n	800796a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4912      	ldr	r1, [pc, #72]	; (80079bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007972:	428b      	cmp	r3, r1
 8007974:	d101      	bne.n	800797a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007976:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007978:	e001      	b.n	800797e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800797a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800797e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007982:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007992:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a0:	f043 0204 	orr.w	r2, r3, #4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fb fd75 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079ae:	e000      	b.n	80079b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079b0:	bf00      	nop
}
 80079b2:	bf00      	nop
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40003800 	.word	0x40003800
 80079c0:	40003400 	.word	0x40003400

080079c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	1c99      	adds	r1, r3, #2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6251      	str	r1, [r2, #36]	; 0x24
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d113      	bne.n	8007a32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ffc9 	bl	80079c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	1c99      	adds	r1, r3, #2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6251      	str	r1, [r2, #36]	; 0x24
 8007a4e:	8819      	ldrh	r1, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1d      	ldr	r2, [pc, #116]	; (8007acc <I2SEx_TxISR_I2SExt+0x90>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d101      	bne.n	8007a5e <I2SEx_TxISR_I2SExt+0x22>
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <I2SEx_TxISR_I2SExt+0x94>)
 8007a5c:	e001      	b.n	8007a62 <I2SEx_TxISR_I2SExt+0x26>
 8007a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a62:	460a      	mov	r2, r1
 8007a64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d121      	bne.n	8007ac2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a12      	ldr	r2, [pc, #72]	; (8007acc <I2SEx_TxISR_I2SExt+0x90>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d101      	bne.n	8007a8c <I2SEx_TxISR_I2SExt+0x50>
 8007a88:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <I2SEx_TxISR_I2SExt+0x94>)
 8007a8a:	e001      	b.n	8007a90 <I2SEx_TxISR_I2SExt+0x54>
 8007a8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	490d      	ldr	r1, [pc, #52]	; (8007acc <I2SEx_TxISR_I2SExt+0x90>)
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	d101      	bne.n	8007aa0 <I2SEx_TxISR_I2SExt+0x64>
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <I2SEx_TxISR_I2SExt+0x94>)
 8007a9e:	e001      	b.n	8007aa4 <I2SEx_TxISR_I2SExt+0x68>
 8007aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007aa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007aa8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff ff81 	bl	80079c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40003800 	.word	0x40003800
 8007ad0:	40003400 	.word	0x40003400

08007ad4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68d8      	ldr	r0, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	1c99      	adds	r1, r3, #2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007aec:	b282      	uxth	r2, r0
 8007aee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d113      	bne.n	8007b30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff ff4a 	bl	80079c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a20      	ldr	r2, [pc, #128]	; (8007bc8 <I2SEx_RxISR_I2SExt+0x90>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d101      	bne.n	8007b4e <I2SEx_RxISR_I2SExt+0x16>
 8007b4a:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <I2SEx_RxISR_I2SExt+0x94>)
 8007b4c:	e001      	b.n	8007b52 <I2SEx_RxISR_I2SExt+0x1a>
 8007b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b52:	68d8      	ldr	r0, [r3, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	1c99      	adds	r1, r3, #2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007b5e:	b282      	uxth	r2, r0
 8007b60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d121      	bne.n	8007bbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a12      	ldr	r2, [pc, #72]	; (8007bc8 <I2SEx_RxISR_I2SExt+0x90>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d101      	bne.n	8007b88 <I2SEx_RxISR_I2SExt+0x50>
 8007b84:	4b11      	ldr	r3, [pc, #68]	; (8007bcc <I2SEx_RxISR_I2SExt+0x94>)
 8007b86:	e001      	b.n	8007b8c <I2SEx_RxISR_I2SExt+0x54>
 8007b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	490d      	ldr	r1, [pc, #52]	; (8007bc8 <I2SEx_RxISR_I2SExt+0x90>)
 8007b94:	428b      	cmp	r3, r1
 8007b96:	d101      	bne.n	8007b9c <I2SEx_RxISR_I2SExt+0x64>
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <I2SEx_RxISR_I2SExt+0x94>)
 8007b9a:	e001      	b.n	8007ba0 <I2SEx_RxISR_I2SExt+0x68>
 8007b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ba0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ba4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ff03 	bl	80079c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40003800 	.word	0x40003800
 8007bcc:	40003400 	.word	0x40003400

08007bd0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007bd8:	f7fc f974 	bl	8003ec4 <HAL_GetTick>
 8007bdc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e069      	b.n	8007cbc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fa fa93 	bl	8002128 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007c02:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f85e 	bl	8007cc8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	021a      	lsls	r2, r3, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2120      	movs	r1, #32
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f856 	bl	8007ce4 <QSPI_WaitFlagStateUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d137      	bne.n	8007cb2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c4c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6852      	ldr	r2, [r2, #4]
 8007c54:	0611      	lsls	r1, r2, #24
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	68d2      	ldr	r2, [r2, #12]
 8007c5a:	4311      	orrs	r1, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	69d2      	ldr	r2, [r2, #28]
 8007c60:	4311      	orrs	r1, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6a12      	ldr	r2, [r2, #32]
 8007c66:	4311      	orrs	r1, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <HAL_QSPI_Init+0xf4>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6912      	ldr	r2, [r2, #16]
 8007c7e:	0411      	lsls	r1, r2, #16
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6952      	ldr	r2, [r2, #20]
 8007c84:	4311      	orrs	r1, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6992      	ldr	r2, [r2, #24]
 8007c8a:	4311      	orrs	r1, r2
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	430b      	orrs	r3, r1
 8007c92:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007cba:	7afb      	ldrb	r3, [r7, #11]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	ffe0f8fe 	.word	0xffe0f8fe

08007cc8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007cf4:	e01a      	b.n	8007d2c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d016      	beq.n	8007d2c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fc f8e1 	bl	8003ec4 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2204      	movs	r2, #4
 8007d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d20:	f043 0201 	orr.w	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e00e      	b.n	8007d4a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	4013      	ands	r3, r2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bf14      	ite	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	2300      	moveq	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d1d6      	bne.n	8007cf6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0cc      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d68:	4b68      	ldr	r3, [pc, #416]	; (8007f0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d90c      	bls.n	8007d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d76:	4b65      	ldr	r3, [pc, #404]	; (8007f0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7e:	4b63      	ldr	r3, [pc, #396]	; (8007f0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d001      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0b8      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d020      	beq.n	8007dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007da8:	4b59      	ldr	r3, [pc, #356]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4a58      	ldr	r2, [pc, #352]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dc0:	4b53      	ldr	r3, [pc, #332]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4a52      	ldr	r2, [pc, #328]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dcc:	4b50      	ldr	r3, [pc, #320]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	494d      	ldr	r1, [pc, #308]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d044      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d107      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df2:	4b47      	ldr	r3, [pc, #284]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d119      	bne.n	8007e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e07f      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d003      	beq.n	8007e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d107      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e12:	4b3f      	ldr	r3, [pc, #252]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e06f      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e22:	4b3b      	ldr	r3, [pc, #236]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e067      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e32:	4b37      	ldr	r3, [pc, #220]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f023 0203 	bic.w	r2, r3, #3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4934      	ldr	r1, [pc, #208]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e44:	f7fc f83e 	bl	8003ec4 <HAL_GetTick>
 8007e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e4a:	e00a      	b.n	8007e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e4c:	f7fc f83a 	bl	8003ec4 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e04f      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e62:	4b2b      	ldr	r3, [pc, #172]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 020c 	and.w	r2, r3, #12
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d1eb      	bne.n	8007e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e74:	4b25      	ldr	r3, [pc, #148]	; (8007f0c <HAL_RCC_ClockConfig+0x1b8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d20c      	bcs.n	8007e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e82:	4b22      	ldr	r3, [pc, #136]	; (8007f0c <HAL_RCC_ClockConfig+0x1b8>)
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <HAL_RCC_ClockConfig+0x1b8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d001      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e032      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ea8:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4916      	ldr	r1, [pc, #88]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	490e      	ldr	r1, [pc, #56]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007eda:	f000 f821 	bl	8007f20 <HAL_RCC_GetSysClockFreq>
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <HAL_RCC_ClockConfig+0x1c0>)
 8007eec:	5cd3      	ldrb	r3, [r2, r3]
 8007eee:	fa21 f303 	lsr.w	r3, r1, r3
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <HAL_RCC_ClockConfig+0x1c4>)
 8007ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fa fc0a 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40023c00 	.word	0x40023c00
 8007f10:	40023800 	.word	0x40023800
 8007f14:	080136cc 	.word	0x080136cc
 8007f18:	20000018 	.word	0x20000018
 8007f1c:	20000074 	.word	0x20000074

08007f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f36:	4b50      	ldr	r3, [pc, #320]	; (8008078 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 030c 	and.w	r3, r3, #12
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d007      	beq.n	8007f52 <HAL_RCC_GetSysClockFreq+0x32>
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d008      	beq.n	8007f58 <HAL_RCC_GetSysClockFreq+0x38>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f040 808d 	bne.w	8008066 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f4c:	4b4b      	ldr	r3, [pc, #300]	; (800807c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007f4e:	60bb      	str	r3, [r7, #8]
       break;
 8007f50:	e08c      	b.n	800806c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f52:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f54:	60bb      	str	r3, [r7, #8]
      break;
 8007f56:	e089      	b.n	800806c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f58:	4b47      	ldr	r3, [pc, #284]	; (8008078 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f62:	4b45      	ldr	r3, [pc, #276]	; (8008078 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d023      	beq.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f6e:	4b42      	ldr	r3, [pc, #264]	; (8008078 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	099b      	lsrs	r3, r3, #6
 8007f74:	f04f 0400 	mov.w	r4, #0
 8007f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	ea03 0501 	and.w	r5, r3, r1
 8007f84:	ea04 0602 	and.w	r6, r4, r2
 8007f88:	4a3d      	ldr	r2, [pc, #244]	; (8008080 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f8a:	fb02 f106 	mul.w	r1, r2, r6
 8007f8e:	2200      	movs	r2, #0
 8007f90:	fb02 f205 	mul.w	r2, r2, r5
 8007f94:	440a      	add	r2, r1
 8007f96:	493a      	ldr	r1, [pc, #232]	; (8008080 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f98:	fba5 0101 	umull	r0, r1, r5, r1
 8007f9c:	1853      	adds	r3, r2, r1
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f04f 0400 	mov.w	r4, #0
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4623      	mov	r3, r4
 8007faa:	f7f8 f989 	bl	80002c0 <__aeabi_uldivmod>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e049      	b.n	800804a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fb6:	4b30      	ldr	r3, [pc, #192]	; (8008078 <HAL_RCC_GetSysClockFreq+0x158>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	099b      	lsrs	r3, r3, #6
 8007fbc:	f04f 0400 	mov.w	r4, #0
 8007fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	ea03 0501 	and.w	r5, r3, r1
 8007fcc:	ea04 0602 	and.w	r6, r4, r2
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	f04f 0400 	mov.w	r4, #0
 8007fdc:	0154      	lsls	r4, r2, #5
 8007fde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fe2:	014b      	lsls	r3, r1, #5
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	1b49      	subs	r1, r1, r5
 8007fea:	eb62 0206 	sbc.w	r2, r2, r6
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	f04f 0400 	mov.w	r4, #0
 8007ff6:	0194      	lsls	r4, r2, #6
 8007ff8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ffc:	018b      	lsls	r3, r1, #6
 8007ffe:	1a5b      	subs	r3, r3, r1
 8008000:	eb64 0402 	sbc.w	r4, r4, r2
 8008004:	f04f 0100 	mov.w	r1, #0
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	00e2      	lsls	r2, r4, #3
 800800e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008012:	00d9      	lsls	r1, r3, #3
 8008014:	460b      	mov	r3, r1
 8008016:	4614      	mov	r4, r2
 8008018:	195b      	adds	r3, r3, r5
 800801a:	eb44 0406 	adc.w	r4, r4, r6
 800801e:	f04f 0100 	mov.w	r1, #0
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	02a2      	lsls	r2, r4, #10
 8008028:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800802c:	0299      	lsls	r1, r3, #10
 800802e:	460b      	mov	r3, r1
 8008030:	4614      	mov	r4, r2
 8008032:	4618      	mov	r0, r3
 8008034:	4621      	mov	r1, r4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f04f 0400 	mov.w	r4, #0
 800803c:	461a      	mov	r2, r3
 800803e:	4623      	mov	r3, r4
 8008040:	f7f8 f93e 	bl	80002c0 <__aeabi_uldivmod>
 8008044:	4603      	mov	r3, r0
 8008046:	460c      	mov	r4, r1
 8008048:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800804a:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <HAL_RCC_GetSysClockFreq+0x158>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	0c1b      	lsrs	r3, r3, #16
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	3301      	adds	r3, #1
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008062:	60bb      	str	r3, [r7, #8]
      break;
 8008064:	e002      	b.n	800806c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008068:	60bb      	str	r3, [r7, #8]
      break;
 800806a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800806c:	68bb      	ldr	r3, [r7, #8]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008076:	bf00      	nop
 8008078:	40023800 	.word	0x40023800
 800807c:	00f42400 	.word	0x00f42400
 8008080:	017d7840 	.word	0x017d7840

08008084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008088:	4b03      	ldr	r3, [pc, #12]	; (8008098 <HAL_RCC_GetHCLKFreq+0x14>)
 800808a:	681b      	ldr	r3, [r3, #0]
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000018 	.word	0x20000018

0800809c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080a0:	f7ff fff0 	bl	8008084 <HAL_RCC_GetHCLKFreq>
 80080a4:	4601      	mov	r1, r0
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	0a9b      	lsrs	r3, r3, #10
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080b2:	5cd3      	ldrb	r3, [r2, r3]
 80080b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40023800 	.word	0x40023800
 80080c0:	080136dc 	.word	0x080136dc

080080c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80080c8:	f7ff ffdc 	bl	8008084 <HAL_RCC_GetHCLKFreq>
 80080cc:	4601      	mov	r1, r0
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	0b5b      	lsrs	r3, r3, #13
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	4a03      	ldr	r2, [pc, #12]	; (80080e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080da:	5cd3      	ldrb	r3, [r2, r3]
 80080dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40023800 	.word	0x40023800
 80080e8:	080136dc 	.word	0x080136dc

080080ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	220f      	movs	r2, #15
 80080fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080fc:	4b12      	ldr	r3, [pc, #72]	; (8008148 <HAL_RCC_GetClockConfig+0x5c>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f003 0203 	and.w	r2, r3, #3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <HAL_RCC_GetClockConfig+0x5c>)
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <HAL_RCC_GetClockConfig+0x5c>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_RCC_GetClockConfig+0x5c>)
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	08db      	lsrs	r3, r3, #3
 8008126:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <HAL_RCC_GetClockConfig+0x60>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 020f 	and.w	r2, r3, #15
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	601a      	str	r2, [r3, #0]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40023800 	.word	0x40023800
 800814c:	40023c00 	.word	0x40023c00

08008150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d010      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008174:	4b7a      	ldr	r3, [pc, #488]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800817a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4977      	ldr	r1, [pc, #476]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d010      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80081a2:	4b6f      	ldr	r3, [pc, #444]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80081a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	496b      	ldr	r1, [pc, #428]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80081c0:	2301      	movs	r3, #1
 80081c2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d022      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80081d0:	4b63      	ldr	r3, [pc, #396]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80081d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081de:	4960      	ldr	r1, [pc, #384]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80081ee:	2301      	movs	r3, #1
 80081f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081fa:	d10c      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80081fc:	4b58      	ldr	r3, [pc, #352]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80081fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008202:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	3b01      	subs	r3, #1
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	4954      	ldr	r1, [pc, #336]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d022      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8008222:	4b4f      	ldr	r3, [pc, #316]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008228:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008230:	494b      	ldr	r1, [pc, #300]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008240:	2301      	movs	r3, #1
 8008242:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800824c:	d10c      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800824e:	4b44      	ldr	r3, [pc, #272]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008254:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	3b01      	subs	r3, #1
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	493f      	ldr	r1, [pc, #252]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 808a 	beq.w	800838a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	4b39      	ldr	r3, [pc, #228]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	4a38      	ldr	r2, [pc, #224]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008284:	6413      	str	r3, [r2, #64]	; 0x40
 8008286:	4b36      	ldr	r3, [pc, #216]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008292:	4b34      	ldr	r3, [pc, #208]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a33      	ldr	r2, [pc, #204]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800829c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800829e:	f7fb fe11 	bl	8003ec4 <HAL_GetTick>
 80082a2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80082a4:	e008      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082a6:	f7fb fe0d 	bl	8003ec4 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e1d1      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80082b8:	4b2a      	ldr	r3, [pc, #168]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f0      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082c4:	4b26      	ldr	r3, [pc, #152]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80082c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082cc:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d02f      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d028      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082e2:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ea:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082ec:	4b1e      	ldr	r3, [pc, #120]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082f2:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80082f8:	4a19      	ldr	r2, [pc, #100]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80082fe:	4b18      	ldr	r3, [pc, #96]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b01      	cmp	r3, #1
 8008308:	d114      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800830a:	f7fb fddb 	bl	8003ec4 <HAL_GetTick>
 800830e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008310:	e00a      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008312:	f7fb fdd7 	bl	8003ec4 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008320:	4293      	cmp	r3, r2
 8008322:	d901      	bls.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e199      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0ee      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008340:	d114      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008356:	4902      	ldr	r1, [pc, #8]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008358:	4313      	orrs	r3, r2
 800835a:	608b      	str	r3, [r1, #8]
 800835c:	e00c      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800835e:	bf00      	nop
 8008360:	40023800 	.word	0x40023800
 8008364:	40007000 	.word	0x40007000
 8008368:	42470e40 	.word	0x42470e40
 800836c:	4b89      	ldr	r3, [pc, #548]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	4a88      	ldr	r2, [pc, #544]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008376:	6093      	str	r3, [r2, #8]
 8008378:	4b86      	ldr	r3, [pc, #536]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800837a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008384:	4983      	ldr	r1, [pc, #524]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008386:	4313      	orrs	r3, r2
 8008388:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800839c:	4b7e      	ldr	r3, [pc, #504]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800839e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80083ac:	4b79      	ldr	r3, [pc, #484]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80083ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4976      	ldr	r1, [pc, #472]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d011      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083ce:	4b71      	ldr	r3, [pc, #452]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80083d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	496d      	ldr	r1, [pc, #436]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ec:	d101      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80083ee:	2301      	movs	r3, #1
 80083f0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80083fe:	4b65      	ldr	r3, [pc, #404]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008404:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	4961      	ldr	r1, [pc, #388]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d004      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b80      	cmp	r3, #128	; 0x80
 8008420:	f040 80c6 	bne.w	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008424:	4b5d      	ldr	r3, [pc, #372]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800842a:	f7fb fd4b 	bl	8003ec4 <HAL_GetTick>
 800842e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008430:	e008      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008432:	f7fb fd47 	bl	8003ec4 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e10b      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008444:	4b53      	ldr	r3, [pc, #332]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f0      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8008450:	4a53      	ldr	r2, [pc, #332]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008456:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d023      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d019      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008494:	d00e      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d019      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d115      	bne.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b2:	d110      	bne.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	019b      	lsls	r3, r3, #6
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	061b      	lsls	r3, r3, #24
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	071b      	lsls	r3, r3, #28
 80084ce:	4931      	ldr	r1, [pc, #196]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d026      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d122      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084fe:	4b25      	ldr	r3, [pc, #148]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008504:	0e1b      	lsrs	r3, r3, #24
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	019b      	lsls	r3, r3, #6
 8008516:	431a      	orrs	r2, r3
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	061b      	lsls	r3, r3, #24
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	071b      	lsls	r3, r3, #28
 8008524:	491b      	ldr	r1, [pc, #108]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800852c:	4b19      	ldr	r3, [pc, #100]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800852e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008532:	f023 021f 	bic.w	r2, r3, #31
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	3b01      	subs	r3, #1
 800853c:	4915      	ldr	r1, [pc, #84]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	019b      	lsls	r3, r3, #6
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	061b      	lsls	r3, r3, #24
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	071b      	lsls	r3, r3, #28
 800856a:	490a      	ldr	r1, [pc, #40]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008572:	4b0a      	ldr	r3, [pc, #40]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008578:	f7fb fca4 	bl	8003ec4 <HAL_GetTick>
 800857c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800857e:	e011      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008580:	f7fb fca0 	bl	8003ec4 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d90a      	bls.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e064      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008592:	bf00      	nop
 8008594:	40023800 	.word	0x40023800
 8008598:	424711e0 	.word	0x424711e0
 800859c:	42470068 	.word	0x42470068
 80085a0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085a4:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0e7      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085bc:	4b29      	ldr	r3, [pc, #164]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80085be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ca:	4926      	ldr	r1, [pc, #152]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80085de:	4b21      	ldr	r3, [pc, #132]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	491d      	ldr	r1, [pc, #116]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008600:	4b18      	ldr	r3, [pc, #96]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	4915      	ldr	r1, [pc, #84]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008628:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	490c      	ldr	r1, [pc, #48]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800864a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008652:	4904      	ldr	r1, [pc, #16]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40023800 	.word	0x40023800

08008668 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d003      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8008686:	2b02      	cmp	r3, #2
 8008688:	f000 8098 	beq.w	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800868c:	e12d      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800868e:	4b9a      	ldr	r3, [pc, #616]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008694:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008698:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a0:	d00c      	beq.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80086a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a6:	d802      	bhi.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80086ac:	e082      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80086ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086b2:	d047      	beq.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80086b4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80086b8:	d06f      	beq.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80086ba:	e07b      	b.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80086bc:	4b8f      	ldr	r3, [pc, #572]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086be:	617b      	str	r3, [r7, #20]
          break;
 80086c0:	e07b      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80086c2:	4b8d      	ldr	r3, [pc, #564]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d0:	d109      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80086d2:	4b89      	ldr	r3, [pc, #548]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80086d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086dc:	4a87      	ldr	r2, [pc, #540]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086de:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	e019      	b.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80086e6:	4b84      	ldr	r3, [pc, #528]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f2:	d109      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80086f4:	4b80      	ldr	r3, [pc, #512]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80086f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086fe:	4a80      	ldr	r2, [pc, #512]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008700:	fbb2 f3f3 	udiv	r3, r2, r3
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	e008      	b.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008708:	4b7b      	ldr	r3, [pc, #492]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800870a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008712:	4a7c      	ldr	r2, [pc, #496]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008714:	fbb2 f3f3 	udiv	r3, r2, r3
 8008718:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800871a:	4b77      	ldr	r3, [pc, #476]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008720:	099b      	lsrs	r3, r3, #6
 8008722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	fb02 f303 	mul.w	r3, r2, r3
 800872c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800872e:	4b72      	ldr	r3, [pc, #456]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008734:	0f1b      	lsrs	r3, r3, #28
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008740:	617b      	str	r3, [r7, #20]
          break;
 8008742:	e03a      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008744:	4b6c      	ldr	r3, [pc, #432]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800874c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008750:	d108      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008752:	4b69      	ldr	r3, [pc, #420]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800875a:	4a69      	ldr	r2, [pc, #420]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	e007      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008764:	4b64      	ldr	r3, [pc, #400]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800876c:	4a65      	ldr	r2, [pc, #404]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800876e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008772:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008774:	4b60      	ldr	r3, [pc, #384]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	099b      	lsrs	r3, r3, #6
 800877a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	fb02 f303 	mul.w	r3, r2, r3
 8008784:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008786:	4b5c      	ldr	r3, [pc, #368]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	fbb2 f3f3 	udiv	r3, r2, r3
 8008796:	617b      	str	r3, [r7, #20]
          break;
 8008798:	e00f      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800879a:	4b57      	ldr	r3, [pc, #348]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087a6:	d102      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 80087a8:	4b55      	ldr	r3, [pc, #340]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087aa:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80087ac:	e005      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 80087ae:	4b55      	ldr	r3, [pc, #340]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80087b0:	617b      	str	r3, [r7, #20]
          break;
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	617b      	str	r3, [r7, #20]
          break;
 80087b8:	bf00      	nop
        }
      }
      break;
 80087ba:	e096      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80087bc:	4b4e      	ldr	r3, [pc, #312]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80087be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087c2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80087c6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ce:	d00c      	beq.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80087d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087d4:	d802      	bhi.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80087da:	e082      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80087dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e0:	d047      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80087e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80087e6:	d06f      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80087e8:	e07b      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80087ea:	4b44      	ldr	r3, [pc, #272]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ec:	617b      	str	r3, [r7, #20]
          break;
 80087ee:	e07b      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80087f0:	4b41      	ldr	r3, [pc, #260]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80087f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087fe:	d109      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008800:	4b3d      	ldr	r3, [pc, #244]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800880a:	4a3c      	ldr	r2, [pc, #240]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	e019      	b.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008814:	4b38      	ldr	r3, [pc, #224]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008820:	d109      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008822:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882c:	4a34      	ldr	r2, [pc, #208]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800882e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	e008      	b.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008836:	4b30      	ldr	r3, [pc, #192]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800883c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008840:	4a30      	ldr	r2, [pc, #192]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008842:	fbb2 f3f3 	udiv	r3, r2, r3
 8008846:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008848:	4b2b      	ldr	r3, [pc, #172]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800884a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884e:	099b      	lsrs	r3, r3, #6
 8008850:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800885c:	4b26      	ldr	r3, [pc, #152]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800885e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008862:	0f1b      	lsrs	r3, r3, #28
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	617b      	str	r3, [r7, #20]
          break;
 8008870:	e03a      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008872:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800887a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800887e:	d108      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008880:	4b1d      	ldr	r3, [pc, #116]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008888:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800888a:	fbb2 f3f3 	udiv	r3, r2, r3
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	e007      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008892:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800889a:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800889c:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a0:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	099b      	lsrs	r3, r3, #6
 80088a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	fb02 f303 	mul.w	r3, r2, r3
 80088b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80088b4:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	0f1b      	lsrs	r3, r3, #28
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	617b      	str	r3, [r7, #20]
          break;
 80088c6:	e00f      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088d4:	d102      	bne.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80088d6:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088d8:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80088da:	e005      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80088de:	617b      	str	r3, [r7, #20]
          break;
 80088e0:	e002      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
          break;
 80088e6:	bf00      	nop
        }
      }
      break;
 80088e8:	bf00      	nop
    }
  }
  return frequency;
 80088ea:	697b      	ldr	r3, [r7, #20]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	40023800 	.word	0x40023800
 80088fc:	00bb8000 	.word	0x00bb8000
 8008900:	017d7840 	.word	0x017d7840
 8008904:	00f42400 	.word	0x00f42400

08008908 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d075      	beq.n	8008a0c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008920:	4ba2      	ldr	r3, [pc, #648]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 030c 	and.w	r3, r3, #12
 8008928:	2b04      	cmp	r3, #4
 800892a:	d00c      	beq.n	8008946 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800892c:	4b9f      	ldr	r3, [pc, #636]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008934:	2b08      	cmp	r3, #8
 8008936:	d112      	bne.n	800895e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008938:	4b9c      	ldr	r3, [pc, #624]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008944:	d10b      	bne.n	800895e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008946:	4b99      	ldr	r3, [pc, #612]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d05b      	beq.n	8008a0a <HAL_RCC_OscConfig+0x102>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d157      	bne.n	8008a0a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e20b      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008966:	d106      	bne.n	8008976 <HAL_RCC_OscConfig+0x6e>
 8008968:	4b90      	ldr	r3, [pc, #576]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a8f      	ldr	r2, [pc, #572]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 800896e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	e01d      	b.n	80089b2 <HAL_RCC_OscConfig+0xaa>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800897e:	d10c      	bne.n	800899a <HAL_RCC_OscConfig+0x92>
 8008980:	4b8a      	ldr	r3, [pc, #552]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a89      	ldr	r2, [pc, #548]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	4b87      	ldr	r3, [pc, #540]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a86      	ldr	r2, [pc, #536]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	e00b      	b.n	80089b2 <HAL_RCC_OscConfig+0xaa>
 800899a:	4b84      	ldr	r3, [pc, #528]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a83      	ldr	r2, [pc, #524]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 80089a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	4b81      	ldr	r3, [pc, #516]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a80      	ldr	r2, [pc, #512]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 80089ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d013      	beq.n	80089e2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ba:	f7fb fa83 	bl	8003ec4 <HAL_GetTick>
 80089be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089c2:	f7fb fa7f 	bl	8003ec4 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b64      	cmp	r3, #100	; 0x64
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e1d0      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089d4:	4b75      	ldr	r3, [pc, #468]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCC_OscConfig+0xba>
 80089e0:	e014      	b.n	8008a0c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e2:	f7fb fa6f 	bl	8003ec4 <HAL_GetTick>
 80089e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089e8:	e008      	b.n	80089fc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089ea:	f7fb fa6b 	bl	8003ec4 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b64      	cmp	r3, #100	; 0x64
 80089f6:	d901      	bls.n	80089fc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e1bc      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089fc:	4b6b      	ldr	r3, [pc, #428]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1f0      	bne.n	80089ea <HAL_RCC_OscConfig+0xe2>
 8008a08:	e000      	b.n	8008a0c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d063      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a18:	4b64      	ldr	r3, [pc, #400]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 030c 	and.w	r3, r3, #12
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a24:	4b61      	ldr	r3, [pc, #388]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d11c      	bne.n	8008a6a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a30:	4b5e      	ldr	r3, [pc, #376]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d116      	bne.n	8008a6a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a3c:	4b5b      	ldr	r3, [pc, #364]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_RCC_OscConfig+0x14c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d001      	beq.n	8008a54 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e190      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a54:	4b55      	ldr	r3, [pc, #340]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	4952      	ldr	r1, [pc, #328]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a68:	e03a      	b.n	8008ae0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d020      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a72:	4b4f      	ldr	r3, [pc, #316]	; (8008bb0 <HAL_RCC_OscConfig+0x2a8>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7fb fa24 	bl	8003ec4 <HAL_GetTick>
 8008a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a80:	f7fb fa20 	bl	8003ec4 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e171      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a92:	4b46      	ldr	r3, [pc, #280]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a9e:	4b43      	ldr	r3, [pc, #268]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	493f      	ldr	r1, [pc, #252]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	600b      	str	r3, [r1, #0]
 8008ab2:	e015      	b.n	8008ae0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ab4:	4b3e      	ldr	r3, [pc, #248]	; (8008bb0 <HAL_RCC_OscConfig+0x2a8>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aba:	f7fb fa03 	bl	8003ec4 <HAL_GetTick>
 8008abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ac2:	f7fb f9ff 	bl	8003ec4 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e150      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ad4:	4b35      	ldr	r3, [pc, #212]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f0      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0308 	and.w	r3, r3, #8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d030      	beq.n	8008b4e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d016      	beq.n	8008b22 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008af4:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <HAL_RCC_OscConfig+0x2ac>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afa:	f7fb f9e3 	bl	8003ec4 <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b02:	f7fb f9df 	bl	8003ec4 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e130      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <HAL_RCC_OscConfig+0x1fa>
 8008b20:	e015      	b.n	8008b4e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b22:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <HAL_RCC_OscConfig+0x2ac>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b28:	f7fb f9cc 	bl	8003ec4 <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b30:	f7fb f9c8 	bl	8003ec4 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e119      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f0      	bne.n	8008b30 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0304 	and.w	r3, r3, #4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 809f 	beq.w	8008c9a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b60:	4b12      	ldr	r3, [pc, #72]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10f      	bne.n	8008b8c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	4b0e      	ldr	r3, [pc, #56]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	4a0d      	ldr	r2, [pc, #52]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <HAL_RCC_OscConfig+0x2a4>)
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <HAL_RCC_OscConfig+0x2b0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d120      	bne.n	8008bda <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <HAL_RCC_OscConfig+0x2b0>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a06      	ldr	r2, [pc, #24]	; (8008bb8 <HAL_RCC_OscConfig+0x2b0>)
 8008b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ba4:	f7fb f98e 	bl	8003ec4 <HAL_GetTick>
 8008ba8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008baa:	e010      	b.n	8008bce <HAL_RCC_OscConfig+0x2c6>
 8008bac:	40023800 	.word	0x40023800
 8008bb0:	42470000 	.word	0x42470000
 8008bb4:	42470e80 	.word	0x42470e80
 8008bb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bbc:	f7fb f982 	bl	8003ec4 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e0d3      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bce:	4b6c      	ldr	r3, [pc, #432]	; (8008d80 <HAL_RCC_OscConfig+0x478>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d106      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x2e8>
 8008be2:	4b68      	ldr	r3, [pc, #416]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	4a67      	ldr	r2, [pc, #412]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	6713      	str	r3, [r2, #112]	; 0x70
 8008bee:	e01c      	b.n	8008c2a <HAL_RCC_OscConfig+0x322>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	2b05      	cmp	r3, #5
 8008bf6:	d10c      	bne.n	8008c12 <HAL_RCC_OscConfig+0x30a>
 8008bf8:	4b62      	ldr	r3, [pc, #392]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfc:	4a61      	ldr	r2, [pc, #388]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008bfe:	f043 0304 	orr.w	r3, r3, #4
 8008c02:	6713      	str	r3, [r2, #112]	; 0x70
 8008c04:	4b5f      	ldr	r3, [pc, #380]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	4a5e      	ldr	r2, [pc, #376]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c10:	e00b      	b.n	8008c2a <HAL_RCC_OscConfig+0x322>
 8008c12:	4b5c      	ldr	r3, [pc, #368]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c16:	4a5b      	ldr	r2, [pc, #364]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c18:	f023 0301 	bic.w	r3, r3, #1
 8008c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c1e:	4b59      	ldr	r3, [pc, #356]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	4a58      	ldr	r2, [pc, #352]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d015      	beq.n	8008c5e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c32:	f7fb f947 	bl	8003ec4 <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c38:	e00a      	b.n	8008c50 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c3a:	f7fb f943 	bl	8003ec4 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e092      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c50:	4b4c      	ldr	r3, [pc, #304]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0ee      	beq.n	8008c3a <HAL_RCC_OscConfig+0x332>
 8008c5c:	e014      	b.n	8008c88 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c5e:	f7fb f931 	bl	8003ec4 <HAL_GetTick>
 8008c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c64:	e00a      	b.n	8008c7c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c66:	f7fb f92d 	bl	8003ec4 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e07c      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c7c:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1ee      	bne.n	8008c66 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	4a3c      	ldr	r2, [pc, #240]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d068      	beq.n	8008d74 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ca2:	4b38      	ldr	r3, [pc, #224]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d060      	beq.n	8008d70 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d145      	bne.n	8008d42 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cb6:	4b34      	ldr	r3, [pc, #208]	; (8008d88 <HAL_RCC_OscConfig+0x480>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cbc:	f7fb f902 	bl	8003ec4 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cc4:	f7fb f8fe 	bl	8003ec4 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e04f      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cd6:	4b2b      	ldr	r3, [pc, #172]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1f0      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69da      	ldr	r2, [r3, #28]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	019b      	lsls	r3, r3, #6
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	085b      	lsrs	r3, r3, #1
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	041b      	lsls	r3, r3, #16
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	061b      	lsls	r3, r3, #24
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0c:	071b      	lsls	r3, r3, #28
 8008d0e:	491d      	ldr	r1, [pc, #116]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d14:	4b1c      	ldr	r3, [pc, #112]	; (8008d88 <HAL_RCC_OscConfig+0x480>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1a:	f7fb f8d3 	bl	8003ec4 <HAL_GetTick>
 8008d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d22:	f7fb f8cf 	bl	8003ec4 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e020      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d34:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <HAL_RCC_OscConfig+0x41a>
 8008d40:	e018      	b.n	8008d74 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <HAL_RCC_OscConfig+0x480>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fb f8bc 	bl	8003ec4 <HAL_GetTick>
 8008d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d50:	f7fb f8b8 	bl	8003ec4 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e009      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d62:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <HAL_RCC_OscConfig+0x47c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f0      	bne.n	8008d50 <HAL_RCC_OscConfig+0x448>
 8008d6e:	e001      	b.n	8008d74 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	40007000 	.word	0x40007000
 8008d84:	40023800 	.word	0x40023800
 8008d88:	42470060 	.word	0x42470060

08008d8c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e022      	b.n	8008de4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d105      	bne.n	8008db6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7f9 fa83 	bl	80022bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2203      	movs	r2, #3
 8008dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f814 	bl	8008dec <HAL_SD_InitCard>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e00a      	b.n	8008de4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dec:	b5b0      	push	{r4, r5, r7, lr}
 8008dee:	b08e      	sub	sp, #56	; 0x38
 8008df0:	af04      	add	r7, sp, #16
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008e08:	2376      	movs	r3, #118	; 0x76
 8008e0a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681d      	ldr	r5, [r3, #0]
 8008e10:	466c      	mov	r4, sp
 8008e12:	f107 0314 	add.w	r3, r7, #20
 8008e16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e24:	4628      	mov	r0, r5
 8008e26:	f002 fcbd 	bl	800b7a4 <SDIO_Init>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e031      	b.n	8008ea0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <HAL_SD_InitCard+0xbc>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 fce4 	bl	800b814 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008e4c:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <HAL_SD_InitCard+0xbc>)
 8008e4e:	2201      	movs	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fb18 	bl	8009488 <SD_PowerON>
 8008e58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e013      	b.n	8008ea0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fa37 	bl	80092ec <SD_InitCard>
 8008e7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3728      	adds	r7, #40	; 0x28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ea8:	422580a0 	.word	0x422580a0

08008eac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eba:	0f9b      	lsrs	r3, r3, #30
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec6:	0e9b      	lsrs	r3, r3, #26
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ed8:	0e1b      	lsrs	r3, r3, #24
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	f003 0303 	and.w	r3, r3, #3
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f0c:	0d1b      	lsrs	r3, r3, #20
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f18:	0c1b      	lsrs	r3, r3, #16
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f2a:	0bdb      	lsrs	r3, r3, #15
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f3c:	0b9b      	lsrs	r3, r3, #14
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f4e:	0b5b      	lsrs	r3, r3, #13
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f60:	0b1b      	lsrs	r3, r3, #12
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2200      	movs	r2, #0
 8008f72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d163      	bne.n	8009044 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f80:	009a      	lsls	r2, r3, #2
 8008f82:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008f86:	4013      	ands	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f8c:	0f92      	lsrs	r2, r2, #30
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f98:	0edb      	lsrs	r3, r3, #27
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008faa:	0e1b      	lsrs	r3, r3, #24
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fbc:	0d5b      	lsrs	r3, r3, #21
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fce:	0c9b      	lsrs	r3, r3, #18
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe0:	0bdb      	lsrs	r3, r3, #15
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	7e1b      	ldrb	r3, [r3, #24]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	3302      	adds	r3, #2
 8009004:	2201      	movs	r2, #1
 8009006:	fa02 f303 	lsl.w	r3, r2, r3
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800900e:	fb02 f203 	mul.w	r2, r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	7a1b      	ldrb	r3, [r3, #8]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	2201      	movs	r2, #1
 8009022:	409a      	lsls	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009030:	0a52      	lsrs	r2, r2, #9
 8009032:	fb02 f203 	mul.w	r2, r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009040:	661a      	str	r2, [r3, #96]	; 0x60
 8009042:	e031      	b.n	80090a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009048:	2b01      	cmp	r3, #1
 800904a:	d11d      	bne.n	8009088 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009050:	041b      	lsls	r3, r3, #16
 8009052:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905a:	0c1b      	lsrs	r3, r3, #16
 800905c:	431a      	orrs	r2, r3
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	3301      	adds	r3, #1
 8009068:	029a      	lsls	r2, r3, #10
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800907c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	661a      	str	r2, [r3, #96]	; 0x60
 8009086:	e00f      	b.n	80090a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a58      	ldr	r2, [pc, #352]	; (80091f0 <HAL_SD_GetCardCSD+0x344>)
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e09d      	b.n	80091e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ac:	0b9b      	lsrs	r3, r3, #14
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090be:	09db      	lsrs	r3, r3, #7
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e0:	0fdb      	lsrs	r3, r3, #31
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	0f5b      	lsrs	r3, r3, #29
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fe:	0e9b      	lsrs	r3, r3, #26
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	b2da      	uxtb	r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	0d9b      	lsrs	r3, r3, #22
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	b2da      	uxtb	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	0d5b      	lsrs	r3, r3, #21
 8009124:	b2db      	uxtb	r3, r3
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	b2da      	uxtb	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913e:	0c1b      	lsrs	r3, r3, #16
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	0bdb      	lsrs	r3, r3, #15
 8009154:	b2db      	uxtb	r3, r3
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	b2da      	uxtb	r2, r3
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	0b9b      	lsrs	r3, r3, #14
 8009168:	b2db      	uxtb	r3, r3
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	b2da      	uxtb	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	0b5b      	lsrs	r3, r3, #13
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918e:	0b1b      	lsrs	r3, r3, #12
 8009190:	b2db      	uxtb	r3, r3
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	b2da      	uxtb	r2, r3
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	0a9b      	lsrs	r3, r3, #10
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	004005ff 	.word	0x004005ff

080091f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80091f4:	b5b0      	push	{r4, r5, r7, lr}
 80091f6:	b08e      	sub	sp, #56	; 0x38
 80091f8:	af04      	add	r7, sp, #16
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2203      	movs	r2, #3
 8009202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	2b03      	cmp	r3, #3
 800920c:	d02e      	beq.n	800926c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009214:	d106      	bne.n	8009224 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
 8009222:	e029      	b.n	8009278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800922a:	d10a      	bne.n	8009242 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f9b9 	bl	80095a4 <SD_WideBus_Enable>
 8009232:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	639a      	str	r2, [r3, #56]	; 0x38
 8009240:	e01a      	b.n	8009278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f9f6 	bl	800963a <SD_WideBus_Disable>
 800924e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
 800925c:	e00c      	b.n	8009278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
 800926a:	e005      	b.n	8009278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009286:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e024      	b.n	80092de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681d      	ldr	r5, [r3, #0]
 80092ba:	466c      	mov	r4, sp
 80092bc:	f107 0318 	add.w	r3, r7, #24
 80092c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092c8:	f107 030c 	add.w	r3, r7, #12
 80092cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092ce:	4628      	mov	r0, r5
 80092d0:	f002 fa68 	bl	800b7a4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3728      	adds	r7, #40	; 0x28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bdb0      	pop	{r4, r5, r7, pc}
 80092e6:	bf00      	nop
 80092e8:	004005ff 	.word	0x004005ff

080092ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80092ec:	b5b0      	push	{r4, r5, r7, lr}
 80092ee:	b094      	sub	sp, #80	; 0x50
 80092f0:	af04      	add	r7, sp, #16
 80092f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80092f4:	2301      	movs	r3, #1
 80092f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f002 fa98 	bl	800b832 <SDIO_GetPowerState>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800930c:	e0b7      	b.n	800947e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009312:	2b03      	cmp	r3, #3
 8009314:	d02f      	beq.n	8009376 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f002 fc17 	bl	800bb4e <SDMMC_CmdSendCID>
 8009320:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <SD_InitCard+0x40>
    {
      return errorstate;
 8009328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932a:	e0a8      	b.n	800947e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f002 fac2 	bl	800b8bc <SDIO_GetResponse>
 8009338:	4602      	mov	r2, r0
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2104      	movs	r1, #4
 8009344:	4618      	mov	r0, r3
 8009346:	f002 fab9 	bl	800b8bc <SDIO_GetResponse>
 800934a:	4602      	mov	r2, r0
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2108      	movs	r1, #8
 8009356:	4618      	mov	r0, r3
 8009358:	f002 fab0 	bl	800b8bc <SDIO_GetResponse>
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	210c      	movs	r1, #12
 8009368:	4618      	mov	r0, r3
 800936a:	f002 faa7 	bl	800b8bc <SDIO_GetResponse>
 800936e:	4602      	mov	r2, r0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	2b03      	cmp	r3, #3
 800937c:	d00d      	beq.n	800939a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f107 020e 	add.w	r2, r7, #14
 8009386:	4611      	mov	r1, r2
 8009388:	4618      	mov	r0, r3
 800938a:	f002 fc1d 	bl	800bbc8 <SDMMC_CmdSetRelAdd>
 800938e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <SD_InitCard+0xae>
    {
      return errorstate;
 8009396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009398:	e071      	b.n	800947e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d036      	beq.n	8009410 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	461a      	mov	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b2:	041b      	lsls	r3, r3, #16
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f002 fbe7 	bl	800bb8a <SDMMC_CmdSendCSD>
 80093bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80093c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c6:	e05a      	b.n	800947e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fa74 	bl	800b8bc <SDIO_GetResponse>
 80093d4:	4602      	mov	r2, r0
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2104      	movs	r1, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f002 fa6b 	bl	800b8bc <SDIO_GetResponse>
 80093e6:	4602      	mov	r2, r0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2108      	movs	r1, #8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f002 fa62 	bl	800b8bc <SDIO_GetResponse>
 80093f8:	4602      	mov	r2, r0
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	210c      	movs	r1, #12
 8009404:	4618      	mov	r0, r3
 8009406:	f002 fa59 	bl	800b8bc <SDIO_GetResponse>
 800940a:	4602      	mov	r2, r0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2104      	movs	r1, #4
 8009416:	4618      	mov	r0, r3
 8009418:	f002 fa50 	bl	800b8bc <SDIO_GetResponse>
 800941c:	4603      	mov	r3, r0
 800941e:	0d1a      	lsrs	r2, r3, #20
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009424:	f107 0310 	add.w	r3, r7, #16
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff fd3e 	bl	8008eac <HAL_SD_GetCardCSD>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009436:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800943a:	e020      	b.n	800947e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6819      	ldr	r1, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	f04f 0400 	mov.w	r4, #0
 800944a:	461a      	mov	r2, r3
 800944c:	4623      	mov	r3, r4
 800944e:	4608      	mov	r0, r1
 8009450:	f002 fa95 	bl	800b97e <SDMMC_CmdSelDesel>
 8009454:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <SD_InitCard+0x174>
  {
    return errorstate;
 800945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945e:	e00e      	b.n	800947e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681d      	ldr	r5, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	466c      	mov	r4, sp
 8009468:	f103 0210 	add.w	r2, r3, #16
 800946c:	ca07      	ldmia	r2, {r0, r1, r2}
 800946e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009472:	3304      	adds	r3, #4
 8009474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009476:	4628      	mov	r0, r5
 8009478:	f002 f994 	bl	800b7a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3740      	adds	r7, #64	; 0x40
 8009482:	46bd      	mov	sp, r7
 8009484:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009488 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	2300      	movs	r3, #0
 800949a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 fa8f 	bl	800b9c4 <SDMMC_CmdGoIdleState>
 80094a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	e072      	b.n	8009598 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 faa2 	bl	800ba00 <SDMMC_CmdOperCond>
 80094bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00d      	beq.n	80094e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f002 fa78 	bl	800b9c4 <SDMMC_CmdGoIdleState>
 80094d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	e05b      	b.n	8009598 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d137      	bne.n	800955e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 faa2 	bl	800ba3e <SDMMC_CmdAppCommand>
 80094fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d02d      	beq.n	800955e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009502:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009506:	e047      	b.n	8009598 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f002 fa95 	bl	800ba3e <SDMMC_CmdAppCommand>
 8009514:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <SD_PowerON+0x98>
    {
      return errorstate;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	e03b      	b.n	8009598 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	491e      	ldr	r1, [pc, #120]	; (80095a0 <SD_PowerON+0x118>)
 8009526:	4618      	mov	r0, r3
 8009528:	f002 faab 	bl	800ba82 <SDMMC_CmdAppOperCommand>
 800952c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009538:	e02e      	b.n	8009598 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f002 f9bb 	bl	800b8bc <SDIO_GetResponse>
 8009546:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	0fdb      	lsrs	r3, r3, #31
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <SD_PowerON+0xcc>
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <SD_PowerON+0xce>
 8009554:	2300      	movs	r3, #0
 8009556:	613b      	str	r3, [r7, #16]

    count++;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3301      	adds	r3, #1
 800955c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009564:	4293      	cmp	r3, r2
 8009566:	d802      	bhi.n	800956e <SD_PowerON+0xe6>
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0cc      	beq.n	8009508 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009574:	4293      	cmp	r3, r2
 8009576:	d902      	bls.n	800957e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800957c:	e00c      	b.n	8009598 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	645a      	str	r2, [r3, #68]	; 0x44
 800958e:	e002      	b.n	8009596 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	c1100000 	.word	0xc1100000

080095a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80095ac:	2300      	movs	r3, #0
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f002 f97e 	bl	800b8bc <SDIO_GetResponse>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ca:	d102      	bne.n	80095d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095d0:	e02f      	b.n	8009632 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095d2:	f107 030c 	add.w	r3, r7, #12
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f879 	bl	80096d0 <SD_FindSCR>
 80095de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	e023      	b.n	8009632 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01c      	beq.n	800962e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f002 fa1c 	bl	800ba3e <SDMMC_CmdAppCommand>
 8009606:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	e00f      	b.n	8009632 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2102      	movs	r1, #2
 8009618:	4618      	mov	r0, r3
 800961a:	f002 fa55 	bl	800bac8 <SDMMC_CmdBusWidth>
 800961e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	e003      	b.n	8009632 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800962a:	2300      	movs	r3, #0
 800962c:	e001      	b.n	8009632 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800962e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	2300      	movs	r3, #0
 8009648:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2100      	movs	r1, #0
 8009650:	4618      	mov	r0, r3
 8009652:	f002 f933 	bl	800b8bc <SDIO_GetResponse>
 8009656:	4603      	mov	r3, r0
 8009658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800965c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009660:	d102      	bne.n	8009668 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009666:	e02f      	b.n	80096c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009668:	f107 030c 	add.w	r3, r7, #12
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f82e 	bl	80096d0 <SD_FindSCR>
 8009674:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	e023      	b.n	80096c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01c      	beq.n	80096c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f002 f9d1 	bl	800ba3e <SDMMC_CmdAppCommand>
 800969c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	e00f      	b.n	80096c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f002 fa0a 	bl	800bac8 <SDMMC_CmdBusWidth>
 80096b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	e003      	b.n	80096c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	e001      	b.n	80096c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80096d0:	b590      	push	{r4, r7, lr}
 80096d2:	b08f      	sub	sp, #60	; 0x3c
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096da:	f7fa fbf3 	bl	8003ec4 <HAL_GetTick>
 80096de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80096e4:	2300      	movs	r3, #0
 80096e6:	60bb      	str	r3, [r7, #8]
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2108      	movs	r1, #8
 80096f6:	4618      	mov	r0, r3
 80096f8:	f002 f91f 	bl	800b93a <SDMMC_CmdBlockLength>
 80096fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	e0a9      	b.n	800985c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009710:	041b      	lsls	r3, r3, #16
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f002 f992 	bl	800ba3e <SDMMC_CmdAppCommand>
 800971a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	e09a      	b.n	800985c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800972c:	2308      	movs	r3, #8
 800972e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009730:	2330      	movs	r3, #48	; 0x30
 8009732:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009734:	2302      	movs	r3, #2
 8009736:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009738:	2300      	movs	r3, #0
 800973a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800973c:	2301      	movs	r3, #1
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f107 0210 	add.w	r2, r7, #16
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f002 f8c9 	bl	800b8e2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4618      	mov	r0, r3
 8009756:	f002 f9d9 	bl	800bb0c <SDMMC_CmdSendSCR>
 800975a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	2b00      	cmp	r3, #0
 8009760:	d022      	beq.n	80097a8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	e07a      	b.n	800985c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00e      	beq.n	8009792 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	f107 0208 	add.w	r2, r7, #8
 8009780:	18d4      	adds	r4, r2, r3
 8009782:	4608      	mov	r0, r1
 8009784:	f002 f839 	bl	800b7fa <SDIO_ReadFIFO>
 8009788:	4603      	mov	r3, r0
 800978a:	6023      	str	r3, [r4, #0]
      index++;
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	3301      	adds	r3, #1
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009792:	f7fa fb97 	bl	8003ec4 <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a0:	d102      	bne.n	80097a8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80097a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097a6:	e059      	b.n	800985c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097ae:	f240 432a 	movw	r3, #1066	; 0x42a
 80097b2:	4013      	ands	r3, r2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0d6      	beq.n	8009766 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097ce:	2308      	movs	r3, #8
 80097d0:	e044      	b.n	800985c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2202      	movs	r2, #2
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80097e8:	2302      	movs	r3, #2
 80097ea:	e037      	b.n	800985c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2220      	movs	r2, #32
 8009800:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009802:	2320      	movs	r3, #32
 8009804:	e02a      	b.n	800985c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f240 523a 	movw	r2, #1338	; 0x53a
 800980e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	061a      	lsls	r2, r3, #24
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800981c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009826:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	0e1b      	lsrs	r3, r3, #24
 800982c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	601a      	str	r2, [r3, #0]
    scr++;
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	3304      	adds	r3, #4
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	061a      	lsls	r2, r3, #24
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009844:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800984e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	0e1b      	lsrs	r3, r3, #24
 8009854:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	373c      	adds	r7, #60	; 0x3c
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}

08009864 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e034      	b.n	80098e4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7f8 ff36 	bl	8002700 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3308      	adds	r3, #8
 800989c:	4619      	mov	r1, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	f001 fe7c 	bl	800b59c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6818      	ldr	r0, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	461a      	mov	r2, r3
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	f001 fee4 	bl	800b67c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6858      	ldr	r0, [r3, #4]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	f001 ff2f 	bl	800b724 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	6892      	ldr	r2, [r2, #8]
 80098ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	6892      	ldr	r2, [r2, #8]
 80098da:	f041 0101 	orr.w	r1, r1, #1
 80098de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e01d      	b.n	800993a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7f8 fd3a 	bl	800238c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f000 fb4e 	bl	8009fcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0201 	orr.w	r2, r2, #1
 8009958:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2b06      	cmp	r3, #6
 800996a:	d007      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e01d      	b.n	80099d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f815 	bl	80099e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2202      	movs	r2, #2
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f000 faff 	bl	8009fcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2201      	movs	r2, #1
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fdca 	bl	800a5a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a15      	ldr	r2, [pc, #84]	; (8009a68 <HAL_TIM_PWM_Start+0x74>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_TIM_PWM_Start+0x2c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a14      	ldr	r2, [pc, #80]	; (8009a6c <HAL_TIM_PWM_Start+0x78>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d101      	bne.n	8009a24 <HAL_TIM_PWM_Start+0x30>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e000      	b.n	8009a26 <HAL_TIM_PWM_Start+0x32>
 8009a24:	2300      	movs	r3, #0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f003 0307 	and.w	r3, r3, #7
 8009a44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b06      	cmp	r3, #6
 8009a4a:	d007      	beq.n	8009a5c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40010400 	.word	0x40010400

08009a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d122      	bne.n	8009acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d11b      	bne.n	8009acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0202 	mvn.w	r2, #2
 8009a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	f003 0303 	and.w	r3, r3, #3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa6b 	bl	8009f8e <HAL_TIM_IC_CaptureCallback>
 8009ab8:	e005      	b.n	8009ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa5d 	bl	8009f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fa6e 	bl	8009fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f003 0304 	and.w	r3, r3, #4
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	d122      	bne.n	8009b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d11b      	bne.n	8009b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f06f 0204 	mvn.w	r2, #4
 8009af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2202      	movs	r2, #2
 8009af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa41 	bl	8009f8e <HAL_TIM_IC_CaptureCallback>
 8009b0c:	e005      	b.n	8009b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa33 	bl	8009f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fa44 	bl	8009fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0308 	and.w	r3, r3, #8
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d122      	bne.n	8009b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d11b      	bne.n	8009b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f06f 0208 	mvn.w	r2, #8
 8009b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa17 	bl	8009f8e <HAL_TIM_IC_CaptureCallback>
 8009b60:	e005      	b.n	8009b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa09 	bl	8009f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fa1a 	bl	8009fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0310 	and.w	r3, r3, #16
 8009b7e:	2b10      	cmp	r3, #16
 8009b80:	d122      	bne.n	8009bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	2b10      	cmp	r3, #16
 8009b8e:	d11b      	bne.n	8009bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f06f 0210 	mvn.w	r2, #16
 8009b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f9ed 	bl	8009f8e <HAL_TIM_IC_CaptureCallback>
 8009bb4:	e005      	b.n	8009bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f9df 	bl	8009f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9f0 	bl	8009fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d10e      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d107      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0201 	mvn.w	r2, #1
 8009bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7f7 ff34 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bfe:	2b80      	cmp	r3, #128	; 0x80
 8009c00:	d10e      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0c:	2b80      	cmp	r3, #128	; 0x80
 8009c0e:	d107      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fd6c 	bl	800a6f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2a:	2b40      	cmp	r3, #64	; 0x40
 8009c2c:	d10e      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d107      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f9b5 	bl	8009fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d10e      	bne.n	8009c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	d107      	bne.n	8009c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f06f 0220 	mvn.w	r2, #32
 8009c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fd36 	bl	800a6e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e0b4      	b.n	8009e04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b0c      	cmp	r3, #12
 8009cae:	f200 809f 	bhi.w	8009df0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009ced 	.word	0x08009ced
 8009cbc:	08009df1 	.word	0x08009df1
 8009cc0:	08009df1 	.word	0x08009df1
 8009cc4:	08009df1 	.word	0x08009df1
 8009cc8:	08009d2d 	.word	0x08009d2d
 8009ccc:	08009df1 	.word	0x08009df1
 8009cd0:	08009df1 	.word	0x08009df1
 8009cd4:	08009df1 	.word	0x08009df1
 8009cd8:	08009d6f 	.word	0x08009d6f
 8009cdc:	08009df1 	.word	0x08009df1
 8009ce0:	08009df1 	.word	0x08009df1
 8009ce4:	08009df1 	.word	0x08009df1
 8009ce8:	08009daf 	.word	0x08009daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 fa0a 	bl	800a10c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699a      	ldr	r2, [r3, #24]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0208 	orr.w	r2, r2, #8
 8009d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0204 	bic.w	r2, r2, #4
 8009d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6999      	ldr	r1, [r3, #24]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	691a      	ldr	r2, [r3, #16]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	619a      	str	r2, [r3, #24]
      break;
 8009d2a:	e062      	b.n	8009df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 fa5a 	bl	800a1ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	699a      	ldr	r2, [r3, #24]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6999      	ldr	r1, [r3, #24]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	021a      	lsls	r2, r3, #8
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	619a      	str	r2, [r3, #24]
      break;
 8009d6c:	e041      	b.n	8009df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 faaf 	bl	800a2d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	69da      	ldr	r2, [r3, #28]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f042 0208 	orr.w	r2, r2, #8
 8009d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69da      	ldr	r2, [r3, #28]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f022 0204 	bic.w	r2, r2, #4
 8009d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69d9      	ldr	r1, [r3, #28]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	61da      	str	r2, [r3, #28]
      break;
 8009dac:	e021      	b.n	8009df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68b9      	ldr	r1, [r7, #8]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fb03 	bl	800a3c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69da      	ldr	r2, [r3, #28]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69d9      	ldr	r1, [r3, #28]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	021a      	lsls	r2, r3, #8
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	61da      	str	r2, [r3, #28]
      break;
 8009dee:	e000      	b.n	8009df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009df0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_TIM_ConfigClockSource+0x18>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e0a6      	b.n	8009f72 <HAL_TIM_ConfigClockSource+0x166>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b40      	cmp	r3, #64	; 0x40
 8009e5a:	d067      	beq.n	8009f2c <HAL_TIM_ConfigClockSource+0x120>
 8009e5c:	2b40      	cmp	r3, #64	; 0x40
 8009e5e:	d80b      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x6c>
 8009e60:	2b10      	cmp	r3, #16
 8009e62:	d073      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x140>
 8009e64:	2b10      	cmp	r3, #16
 8009e66:	d802      	bhi.n	8009e6e <HAL_TIM_ConfigClockSource+0x62>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d06f      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009e6c:	e078      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d06c      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x140>
 8009e72:	2b30      	cmp	r3, #48	; 0x30
 8009e74:	d06a      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009e76:	e073      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e78:	2b70      	cmp	r3, #112	; 0x70
 8009e7a:	d00d      	beq.n	8009e98 <HAL_TIM_ConfigClockSource+0x8c>
 8009e7c:	2b70      	cmp	r3, #112	; 0x70
 8009e7e:	d804      	bhi.n	8009e8a <HAL_TIM_ConfigClockSource+0x7e>
 8009e80:	2b50      	cmp	r3, #80	; 0x50
 8009e82:	d033      	beq.n	8009eec <HAL_TIM_ConfigClockSource+0xe0>
 8009e84:	2b60      	cmp	r3, #96	; 0x60
 8009e86:	d041      	beq.n	8009f0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009e88:	e06a      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e8e:	d066      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x152>
 8009e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e94:	d017      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009e96:	e063      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	6899      	ldr	r1, [r3, #8]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f000 fb5a 	bl	800a560 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	609a      	str	r2, [r3, #8]
      break;
 8009ec4:	e04c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6899      	ldr	r1, [r3, #8]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f000 fb43 	bl	800a560 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ee8:	609a      	str	r2, [r3, #8]
      break;
 8009eea:	e039      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	6859      	ldr	r1, [r3, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f000 fab7 	bl	800a46c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2150      	movs	r1, #80	; 0x50
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fb10 	bl	800a52a <TIM_ITRx_SetConfig>
      break;
 8009f0a:	e029      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	6859      	ldr	r1, [r3, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f000 fad6 	bl	800a4ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2160      	movs	r1, #96	; 0x60
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fb00 	bl	800a52a <TIM_ITRx_SetConfig>
      break;
 8009f2a:	e019      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	6859      	ldr	r1, [r3, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f000 fa97 	bl	800a46c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2140      	movs	r1, #64	; 0x40
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 faf0 	bl	800a52a <TIM_ITRx_SetConfig>
      break;
 8009f4a:	e009      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f000 fae7 	bl	800a52a <TIM_ITRx_SetConfig>
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
	...

08009fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a40      	ldr	r2, [pc, #256]	; (800a0e0 <TIM_Base_SetConfig+0x114>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d013      	beq.n	800a00c <TIM_Base_SetConfig+0x40>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fea:	d00f      	beq.n	800a00c <TIM_Base_SetConfig+0x40>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a3d      	ldr	r2, [pc, #244]	; (800a0e4 <TIM_Base_SetConfig+0x118>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00b      	beq.n	800a00c <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a3c      	ldr	r2, [pc, #240]	; (800a0e8 <TIM_Base_SetConfig+0x11c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d007      	beq.n	800a00c <TIM_Base_SetConfig+0x40>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a3b      	ldr	r2, [pc, #236]	; (800a0ec <TIM_Base_SetConfig+0x120>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d003      	beq.n	800a00c <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a3a      	ldr	r2, [pc, #232]	; (800a0f0 <TIM_Base_SetConfig+0x124>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d108      	bne.n	800a01e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a2f      	ldr	r2, [pc, #188]	; (800a0e0 <TIM_Base_SetConfig+0x114>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d02b      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02c:	d027      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a2c      	ldr	r2, [pc, #176]	; (800a0e4 <TIM_Base_SetConfig+0x118>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d023      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a2b      	ldr	r2, [pc, #172]	; (800a0e8 <TIM_Base_SetConfig+0x11c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d01f      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a2a      	ldr	r2, [pc, #168]	; (800a0ec <TIM_Base_SetConfig+0x120>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01b      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a29      	ldr	r2, [pc, #164]	; (800a0f0 <TIM_Base_SetConfig+0x124>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d017      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a28      	ldr	r2, [pc, #160]	; (800a0f4 <TIM_Base_SetConfig+0x128>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a27      	ldr	r2, [pc, #156]	; (800a0f8 <TIM_Base_SetConfig+0x12c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00f      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a26      	ldr	r2, [pc, #152]	; (800a0fc <TIM_Base_SetConfig+0x130>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00b      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a25      	ldr	r2, [pc, #148]	; (800a100 <TIM_Base_SetConfig+0x134>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d007      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a24      	ldr	r2, [pc, #144]	; (800a104 <TIM_Base_SetConfig+0x138>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d003      	beq.n	800a07e <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a23      	ldr	r2, [pc, #140]	; (800a108 <TIM_Base_SetConfig+0x13c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d108      	bne.n	800a090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <TIM_Base_SetConfig+0x114>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <TIM_Base_SetConfig+0xf8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a0c      	ldr	r2, [pc, #48]	; (800a0f0 <TIM_Base_SetConfig+0x124>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d103      	bne.n	800a0cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	691a      	ldr	r2, [r3, #16]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	615a      	str	r2, [r3, #20]
}
 800a0d2:	bf00      	nop
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	40010000 	.word	0x40010000
 800a0e4:	40000400 	.word	0x40000400
 800a0e8:	40000800 	.word	0x40000800
 800a0ec:	40000c00 	.word	0x40000c00
 800a0f0:	40010400 	.word	0x40010400
 800a0f4:	40014000 	.word	0x40014000
 800a0f8:	40014400 	.word	0x40014400
 800a0fc:	40014800 	.word	0x40014800
 800a100:	40001800 	.word	0x40001800
 800a104:	40001c00 	.word	0x40001c00
 800a108:	40002000 	.word	0x40002000

0800a10c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f023 0302 	bic.w	r3, r3, #2
 800a154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a20      	ldr	r2, [pc, #128]	; (800a1e4 <TIM_OC1_SetConfig+0xd8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d003      	beq.n	800a170 <TIM_OC1_SetConfig+0x64>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <TIM_OC1_SetConfig+0xdc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d10c      	bne.n	800a18a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f023 0308 	bic.w	r3, r3, #8
 800a176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	4313      	orrs	r3, r2
 800a180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 0304 	bic.w	r3, r3, #4
 800a188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a15      	ldr	r2, [pc, #84]	; (800a1e4 <TIM_OC1_SetConfig+0xd8>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d003      	beq.n	800a19a <TIM_OC1_SetConfig+0x8e>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a14      	ldr	r2, [pc, #80]	; (800a1e8 <TIM_OC1_SetConfig+0xdc>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d111      	bne.n	800a1be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	621a      	str	r2, [r3, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	40010000 	.word	0x40010000
 800a1e8:	40010400 	.word	0x40010400

0800a1ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f023 0210 	bic.w	r2, r3, #16
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	f023 0320 	bic.w	r3, r3, #32
 800a236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a22      	ldr	r2, [pc, #136]	; (800a2d0 <TIM_OC2_SetConfig+0xe4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d003      	beq.n	800a254 <TIM_OC2_SetConfig+0x68>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a21      	ldr	r2, [pc, #132]	; (800a2d4 <TIM_OC2_SetConfig+0xe8>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d10d      	bne.n	800a270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a25a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a26e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a17      	ldr	r2, [pc, #92]	; (800a2d0 <TIM_OC2_SetConfig+0xe4>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d003      	beq.n	800a280 <TIM_OC2_SetConfig+0x94>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a16      	ldr	r2, [pc, #88]	; (800a2d4 <TIM_OC2_SetConfig+0xe8>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d113      	bne.n	800a2a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a28e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	4313      	orrs	r3, r2
 800a29a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	621a      	str	r2, [r3, #32]
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	40010000 	.word	0x40010000
 800a2d4:	40010400 	.word	0x40010400

0800a2d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a21      	ldr	r2, [pc, #132]	; (800a3b8 <TIM_OC3_SetConfig+0xe0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d003      	beq.n	800a33e <TIM_OC3_SetConfig+0x66>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a20      	ldr	r2, [pc, #128]	; (800a3bc <TIM_OC3_SetConfig+0xe4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d10d      	bne.n	800a35a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	4313      	orrs	r3, r2
 800a350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a16      	ldr	r2, [pc, #88]	; (800a3b8 <TIM_OC3_SetConfig+0xe0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d003      	beq.n	800a36a <TIM_OC3_SetConfig+0x92>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a15      	ldr	r2, [pc, #84]	; (800a3bc <TIM_OC3_SetConfig+0xe4>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d113      	bne.n	800a392 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4313      	orrs	r3, r2
 800a390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	621a      	str	r2, [r3, #32]
}
 800a3ac:	bf00      	nop
 800a3ae:	371c      	adds	r7, #28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	40010000 	.word	0x40010000
 800a3bc:	40010400 	.word	0x40010400

0800a3c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4313      	orrs	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a40a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	031b      	lsls	r3, r3, #12
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4313      	orrs	r3, r2
 800a416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a12      	ldr	r2, [pc, #72]	; (800a464 <TIM_OC4_SetConfig+0xa4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_OC4_SetConfig+0x68>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a11      	ldr	r2, [pc, #68]	; (800a468 <TIM_OC4_SetConfig+0xa8>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d109      	bne.n	800a43c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a42e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	019b      	lsls	r3, r3, #6
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	621a      	str	r2, [r3, #32]
}
 800a456:	bf00      	nop
 800a458:	371c      	adds	r7, #28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	40010000 	.word	0x40010000
 800a468:	40010400 	.word	0x40010400

0800a46c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	f023 0201 	bic.w	r2, r3, #1
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f023 030a 	bic.w	r3, r3, #10
 800a4a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	621a      	str	r2, [r3, #32]
}
 800a4be:	bf00      	nop
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b087      	sub	sp, #28
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	f023 0210 	bic.w	r2, r3, #16
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	031b      	lsls	r3, r3, #12
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	011b      	lsls	r3, r3, #4
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	4313      	orrs	r3, r2
 800a510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	621a      	str	r2, [r3, #32]
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4313      	orrs	r3, r2
 800a548:	f043 0307 	orr.w	r3, r3, #7
 800a54c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	609a      	str	r2, [r3, #8]
}
 800a554:	bf00      	nop
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a57a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	021a      	lsls	r2, r3, #8
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	431a      	orrs	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4313      	orrs	r3, r2
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	609a      	str	r2, [r3, #8]
}
 800a594:	bf00      	nop
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f003 031f 	and.w	r3, r3, #31
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a1a      	ldr	r2, [r3, #32]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	401a      	ands	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a1a      	ldr	r2, [r3, #32]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 031f 	and.w	r3, r3, #31
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a600:	2302      	movs	r3, #2
 800a602:	e05a      	b.n	800a6ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a62a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a21      	ldr	r2, [pc, #132]	; (800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d022      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a650:	d01d      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a1d      	ldr	r2, [pc, #116]	; (800a6cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d018      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a1b      	ldr	r2, [pc, #108]	; (800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00e      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a18      	ldr	r2, [pc, #96]	; (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a17      	ldr	r2, [pc, #92]	; (800a6dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a15      	ldr	r2, [pc, #84]	; (800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d10c      	bne.n	800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	40010000 	.word	0x40010000
 800a6cc:	40000400 	.word	0x40000400
 800a6d0:	40000800 	.word	0x40000800
 800a6d4:	40000c00 	.word	0x40000c00
 800a6d8:	40010400 	.word	0x40010400
 800a6dc:	40014000 	.word	0x40014000
 800a6e0:	40001800 	.word	0x40001800

0800a6e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e03f      	b.n	800a79e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f7 fe86 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2224      	movs	r2, #36	; 0x24
 800a73c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a74e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fb8b 	bl	800ae6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	695a      	ldr	r2, [r3, #20]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2220      	movs	r2, #32
 800a798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	d166      	bne.n	800a890 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <HAL_UART_Receive_DMA+0x26>
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e05f      	b.n	800a892 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <HAL_UART_Receive_DMA+0x38>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e058      	b.n	800a892 <HAL_UART_Receive_DMA+0xea>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	88fa      	ldrh	r2, [r7, #6]
 800a7f2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2222      	movs	r2, #34	; 0x22
 800a7fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a806:	4a25      	ldr	r2, [pc, #148]	; (800a89c <HAL_UART_Receive_DMA+0xf4>)
 800a808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80e:	4a24      	ldr	r2, [pc, #144]	; (800a8a0 <HAL_UART_Receive_DMA+0xf8>)
 800a810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a816:	4a23      	ldr	r2, [pc, #140]	; (800a8a4 <HAL_UART_Receive_DMA+0xfc>)
 800a818:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81e:	2200      	movs	r2, #0
 800a820:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3304      	adds	r3, #4
 800a832:	4619      	mov	r1, r3
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	88fb      	ldrh	r3, [r7, #6]
 800a83a:	f7fa f995 	bl	8004b68 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a83e:	2300      	movs	r3, #0
 800a840:	613b      	str	r3, [r7, #16]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	613b      	str	r3, [r7, #16]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	613b      	str	r3, [r7, #16]
 800a852:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a86a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	695a      	ldr	r2, [r3, #20]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0201 	orr.w	r2, r2, #1
 800a87a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	695a      	ldr	r2, [r3, #20]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a88a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	e000      	b.n	800a892 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a890:	2302      	movs	r3, #2
  }
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	0800aae5 	.word	0x0800aae5
 800a8a0:	0800ab4d 	.word	0x0800ab4d
 800a8a4:	0800ab69 	.word	0x0800ab69

0800a8a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f003 030f 	and.w	r3, r3, #15
 800a8d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10d      	bne.n	800a8fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	f003 0320 	and.w	r3, r3, #32
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <HAL_UART_IRQHandler+0x52>
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa38 	bl	800ad68 <UART_Receive_IT>
      return;
 800a8f8:	e0d1      	b.n	800aa9e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80b0 	beq.w	800aa62 <HAL_UART_IRQHandler+0x1ba>
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d105      	bne.n	800a918 <HAL_UART_IRQHandler+0x70>
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80a5 	beq.w	800aa62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00a      	beq.n	800a938 <HAL_UART_IRQHandler+0x90>
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a930:	f043 0201 	orr.w	r2, r3, #1
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <HAL_UART_IRQHandler+0xb0>
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a950:	f043 0202 	orr.w	r2, r3, #2
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00a      	beq.n	800a978 <HAL_UART_IRQHandler+0xd0>
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d005      	beq.n	800a978 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a970:	f043 0204 	orr.w	r2, r3, #4
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00f      	beq.n	800a9a2 <HAL_UART_IRQHandler+0xfa>
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d104      	bne.n	800a996 <HAL_UART_IRQHandler+0xee>
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	f043 0208 	orr.w	r2, r3, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d078      	beq.n	800aa9c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f003 0320 	and.w	r3, r3, #32
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x11c>
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9d2 	bl	800ad68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ce:	2b40      	cmp	r3, #64	; 0x40
 800a9d0:	bf0c      	ite	eq
 800a9d2:	2301      	moveq	r3, #1
 800a9d4:	2300      	movne	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	f003 0308 	and.w	r3, r3, #8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d102      	bne.n	800a9ec <HAL_UART_IRQHandler+0x144>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d031      	beq.n	800aa50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f91b 	bl	800ac28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fc:	2b40      	cmp	r3, #64	; 0x40
 800a9fe:	d123      	bne.n	800aa48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	695a      	ldr	r2, [r3, #20]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d013      	beq.n	800aa40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1c:	4a21      	ldr	r2, [pc, #132]	; (800aaa4 <HAL_UART_IRQHandler+0x1fc>)
 800aa1e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fa f8f7 	bl	8004c18 <HAL_DMA_Abort_IT>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d016      	beq.n	800aa5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa3e:	e00e      	b.n	800aa5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f845 	bl	800aad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa46:	e00a      	b.n	800aa5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f841 	bl	800aad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4e:	e006      	b.n	800aa5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f83d 	bl	800aad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800aa5c:	e01e      	b.n	800aa9c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa5e:	bf00      	nop
    return;
 800aa60:	e01c      	b.n	800aa9c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <HAL_UART_IRQHandler+0x1d6>
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f908 	bl	800ac8c <UART_Transmit_IT>
    return;
 800aa7c:	e00f      	b.n	800aa9e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00a      	beq.n	800aa9e <HAL_UART_IRQHandler+0x1f6>
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f950 	bl	800ad38 <UART_EndTransmit_IT>
    return;
 800aa98:	bf00      	nop
 800aa9a:	e000      	b.n	800aa9e <HAL_UART_IRQHandler+0x1f6>
    return;
 800aa9c:	bf00      	nop
  }
}
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	0800ac65 	.word	0x0800ac65

0800aaa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11e      	bne.n	800ab3e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab14:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695a      	ldr	r2, [r3, #20]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 0201 	bic.w	r2, r2, #1
 800ab24:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	695a      	ldr	r2, [r3, #20]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab34:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7f6 fcf4 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff ffae 	bl	800aabc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab84:	2b80      	cmp	r3, #128	; 0x80
 800ab86:	bf0c      	ite	eq
 800ab88:	2301      	moveq	r3, #1
 800ab8a:	2300      	movne	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b21      	cmp	r3, #33	; 0x21
 800ab9a:	d108      	bne.n	800abae <UART_DMAError+0x46>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d005      	beq.n	800abae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2200      	movs	r2, #0
 800aba6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aba8:	68b8      	ldr	r0, [r7, #8]
 800abaa:	f000 f827 	bl	800abfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb8:	2b40      	cmp	r3, #64	; 0x40
 800abba:	bf0c      	ite	eq
 800abbc:	2301      	moveq	r3, #1
 800abbe:	2300      	movne	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b22      	cmp	r3, #34	; 0x22
 800abce:	d108      	bne.n	800abe2 <UART_DMAError+0x7a>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2200      	movs	r2, #0
 800abda:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800abdc:	68b8      	ldr	r0, [r7, #8]
 800abde:	f000 f823 	bl	800ac28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	f043 0210 	orr.w	r2, r3, #16
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f7ff ff6e 	bl	800aad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68da      	ldr	r2, [r3, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ac12:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2220      	movs	r2, #32
 800ac18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	695a      	ldr	r2, [r3, #20]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0201 	bic.w	r2, r2, #1
 800ac4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2220      	movs	r2, #32
 800ac54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7ff ff26 	bl	800aad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b21      	cmp	r3, #33	; 0x21
 800ac9e:	d144      	bne.n	800ad2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca8:	d11a      	bne.n	800ace0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acbe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d105      	bne.n	800acd4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a1b      	ldr	r3, [r3, #32]
 800accc:	1c9a      	adds	r2, r3, #2
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	621a      	str	r2, [r3, #32]
 800acd2:	e00e      	b.n	800acf2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	621a      	str	r2, [r3, #32]
 800acde:	e008      	b.n	800acf2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	1c59      	adds	r1, r3, #1
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	6211      	str	r1, [r2, #32]
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	3b01      	subs	r3, #1
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	4619      	mov	r1, r3
 800ad00:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10f      	bne.n	800ad26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	e000      	b.n	800ad2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ad2a:	2302      	movs	r3, #2
  }
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff fea5 	bl	800aaa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b22      	cmp	r3, #34	; 0x22
 800ad7a:	d171      	bne.n	800ae60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad84:	d123      	bne.n	800adce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10e      	bne.n	800adb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adaa:	1c9a      	adds	r2, r3, #2
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	629a      	str	r2, [r3, #40]	; 0x28
 800adb0:	e029      	b.n	800ae06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	629a      	str	r2, [r3, #40]	; 0x28
 800adcc:	e01b      	b.n	800ae06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6858      	ldr	r0, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	1c59      	adds	r1, r3, #1
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	6291      	str	r1, [r2, #40]	; 0x28
 800ade6:	b2c2      	uxtb	r2, r0
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	e00c      	b.n	800ae06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	1c58      	adds	r0, r3, #1
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	6288      	str	r0, [r1, #40]	; 0x28
 800adfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ae02:	b2d2      	uxtb	r2, r2
 800ae04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	4619      	mov	r1, r3
 800ae14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d120      	bne.n	800ae5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68da      	ldr	r2, [r3, #12]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0220 	bic.w	r2, r2, #32
 800ae28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	695a      	ldr	r2, [r3, #20]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0201 	bic.w	r2, r2, #1
 800ae48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7f6 fb6a 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e002      	b.n	800ae62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e000      	b.n	800ae62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ae60:	2302      	movs	r3, #2
  }
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	431a      	orrs	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800aeae:	f023 030c 	bic.w	r3, r3, #12
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	6812      	ldr	r2, [r2, #0]
 800aeb6:	68f9      	ldr	r1, [r7, #12]
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	430a      	orrs	r2, r1
 800aed0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeda:	f040 8199 	bne.w	800b210 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4ac6      	ldr	r2, [pc, #792]	; (800b1fc <UART_SetConfig+0x390>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00f      	beq.n	800af08 <UART_SetConfig+0x9c>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4ac4      	ldr	r2, [pc, #784]	; (800b200 <UART_SetConfig+0x394>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00a      	beq.n	800af08 <UART_SetConfig+0x9c>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4ac3      	ldr	r2, [pc, #780]	; (800b204 <UART_SetConfig+0x398>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d005      	beq.n	800af08 <UART_SetConfig+0x9c>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4ac1      	ldr	r2, [pc, #772]	; (800b208 <UART_SetConfig+0x39c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	f040 80bd 	bne.w	800b082 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af08:	f7fd f8dc 	bl	80080c4 <HAL_RCC_GetPCLK2Freq>
 800af0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	461d      	mov	r5, r3
 800af12:	f04f 0600 	mov.w	r6, #0
 800af16:	46a8      	mov	r8, r5
 800af18:	46b1      	mov	r9, r6
 800af1a:	eb18 0308 	adds.w	r3, r8, r8
 800af1e:	eb49 0409 	adc.w	r4, r9, r9
 800af22:	4698      	mov	r8, r3
 800af24:	46a1      	mov	r9, r4
 800af26:	eb18 0805 	adds.w	r8, r8, r5
 800af2a:	eb49 0906 	adc.w	r9, r9, r6
 800af2e:	f04f 0100 	mov.w	r1, #0
 800af32:	f04f 0200 	mov.w	r2, #0
 800af36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800af3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800af3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800af42:	4688      	mov	r8, r1
 800af44:	4691      	mov	r9, r2
 800af46:	eb18 0005 	adds.w	r0, r8, r5
 800af4a:	eb49 0106 	adc.w	r1, r9, r6
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	461d      	mov	r5, r3
 800af54:	f04f 0600 	mov.w	r6, #0
 800af58:	196b      	adds	r3, r5, r5
 800af5a:	eb46 0406 	adc.w	r4, r6, r6
 800af5e:	461a      	mov	r2, r3
 800af60:	4623      	mov	r3, r4
 800af62:	f7f5 f9ad 	bl	80002c0 <__aeabi_uldivmod>
 800af66:	4603      	mov	r3, r0
 800af68:	460c      	mov	r4, r1
 800af6a:	461a      	mov	r2, r3
 800af6c:	4ba7      	ldr	r3, [pc, #668]	; (800b20c <UART_SetConfig+0x3a0>)
 800af6e:	fba3 2302 	umull	r2, r3, r3, r2
 800af72:	095b      	lsrs	r3, r3, #5
 800af74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	461d      	mov	r5, r3
 800af7c:	f04f 0600 	mov.w	r6, #0
 800af80:	46a9      	mov	r9, r5
 800af82:	46b2      	mov	sl, r6
 800af84:	eb19 0309 	adds.w	r3, r9, r9
 800af88:	eb4a 040a 	adc.w	r4, sl, sl
 800af8c:	4699      	mov	r9, r3
 800af8e:	46a2      	mov	sl, r4
 800af90:	eb19 0905 	adds.w	r9, r9, r5
 800af94:	eb4a 0a06 	adc.w	sl, sl, r6
 800af98:	f04f 0100 	mov.w	r1, #0
 800af9c:	f04f 0200 	mov.w	r2, #0
 800afa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800afa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800afac:	4689      	mov	r9, r1
 800afae:	4692      	mov	sl, r2
 800afb0:	eb19 0005 	adds.w	r0, r9, r5
 800afb4:	eb4a 0106 	adc.w	r1, sl, r6
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	461d      	mov	r5, r3
 800afbe:	f04f 0600 	mov.w	r6, #0
 800afc2:	196b      	adds	r3, r5, r5
 800afc4:	eb46 0406 	adc.w	r4, r6, r6
 800afc8:	461a      	mov	r2, r3
 800afca:	4623      	mov	r3, r4
 800afcc:	f7f5 f978 	bl	80002c0 <__aeabi_uldivmod>
 800afd0:	4603      	mov	r3, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	461a      	mov	r2, r3
 800afd6:	4b8d      	ldr	r3, [pc, #564]	; (800b20c <UART_SetConfig+0x3a0>)
 800afd8:	fba3 1302 	umull	r1, r3, r3, r2
 800afdc:	095b      	lsrs	r3, r3, #5
 800afde:	2164      	movs	r1, #100	; 0x64
 800afe0:	fb01 f303 	mul.w	r3, r1, r3
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	3332      	adds	r3, #50	; 0x32
 800afea:	4a88      	ldr	r2, [pc, #544]	; (800b20c <UART_SetConfig+0x3a0>)
 800afec:	fba2 2303 	umull	r2, r3, r2, r3
 800aff0:	095b      	lsrs	r3, r3, #5
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aff8:	4498      	add	r8, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	461d      	mov	r5, r3
 800affe:	f04f 0600 	mov.w	r6, #0
 800b002:	46a9      	mov	r9, r5
 800b004:	46b2      	mov	sl, r6
 800b006:	eb19 0309 	adds.w	r3, r9, r9
 800b00a:	eb4a 040a 	adc.w	r4, sl, sl
 800b00e:	4699      	mov	r9, r3
 800b010:	46a2      	mov	sl, r4
 800b012:	eb19 0905 	adds.w	r9, r9, r5
 800b016:	eb4a 0a06 	adc.w	sl, sl, r6
 800b01a:	f04f 0100 	mov.w	r1, #0
 800b01e:	f04f 0200 	mov.w	r2, #0
 800b022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b02a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b02e:	4689      	mov	r9, r1
 800b030:	4692      	mov	sl, r2
 800b032:	eb19 0005 	adds.w	r0, r9, r5
 800b036:	eb4a 0106 	adc.w	r1, sl, r6
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	461d      	mov	r5, r3
 800b040:	f04f 0600 	mov.w	r6, #0
 800b044:	196b      	adds	r3, r5, r5
 800b046:	eb46 0406 	adc.w	r4, r6, r6
 800b04a:	461a      	mov	r2, r3
 800b04c:	4623      	mov	r3, r4
 800b04e:	f7f5 f937 	bl	80002c0 <__aeabi_uldivmod>
 800b052:	4603      	mov	r3, r0
 800b054:	460c      	mov	r4, r1
 800b056:	461a      	mov	r2, r3
 800b058:	4b6c      	ldr	r3, [pc, #432]	; (800b20c <UART_SetConfig+0x3a0>)
 800b05a:	fba3 1302 	umull	r1, r3, r3, r2
 800b05e:	095b      	lsrs	r3, r3, #5
 800b060:	2164      	movs	r1, #100	; 0x64
 800b062:	fb01 f303 	mul.w	r3, r1, r3
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	00db      	lsls	r3, r3, #3
 800b06a:	3332      	adds	r3, #50	; 0x32
 800b06c:	4a67      	ldr	r2, [pc, #412]	; (800b20c <UART_SetConfig+0x3a0>)
 800b06e:	fba2 2303 	umull	r2, r3, r2, r3
 800b072:	095b      	lsrs	r3, r3, #5
 800b074:	f003 0207 	and.w	r2, r3, #7
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4442      	add	r2, r8
 800b07e:	609a      	str	r2, [r3, #8]
 800b080:	e27d      	b.n	800b57e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b082:	f7fd f80b 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 800b086:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	461d      	mov	r5, r3
 800b08c:	f04f 0600 	mov.w	r6, #0
 800b090:	46a8      	mov	r8, r5
 800b092:	46b1      	mov	r9, r6
 800b094:	eb18 0308 	adds.w	r3, r8, r8
 800b098:	eb49 0409 	adc.w	r4, r9, r9
 800b09c:	4698      	mov	r8, r3
 800b09e:	46a1      	mov	r9, r4
 800b0a0:	eb18 0805 	adds.w	r8, r8, r5
 800b0a4:	eb49 0906 	adc.w	r9, r9, r6
 800b0a8:	f04f 0100 	mov.w	r1, #0
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b0b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b0b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b0bc:	4688      	mov	r8, r1
 800b0be:	4691      	mov	r9, r2
 800b0c0:	eb18 0005 	adds.w	r0, r8, r5
 800b0c4:	eb49 0106 	adc.w	r1, r9, r6
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	461d      	mov	r5, r3
 800b0ce:	f04f 0600 	mov.w	r6, #0
 800b0d2:	196b      	adds	r3, r5, r5
 800b0d4:	eb46 0406 	adc.w	r4, r6, r6
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4623      	mov	r3, r4
 800b0dc:	f7f5 f8f0 	bl	80002c0 <__aeabi_uldivmod>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b49      	ldr	r3, [pc, #292]	; (800b20c <UART_SetConfig+0x3a0>)
 800b0e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ec:	095b      	lsrs	r3, r3, #5
 800b0ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	461d      	mov	r5, r3
 800b0f6:	f04f 0600 	mov.w	r6, #0
 800b0fa:	46a9      	mov	r9, r5
 800b0fc:	46b2      	mov	sl, r6
 800b0fe:	eb19 0309 	adds.w	r3, r9, r9
 800b102:	eb4a 040a 	adc.w	r4, sl, sl
 800b106:	4699      	mov	r9, r3
 800b108:	46a2      	mov	sl, r4
 800b10a:	eb19 0905 	adds.w	r9, r9, r5
 800b10e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b112:	f04f 0100 	mov.w	r1, #0
 800b116:	f04f 0200 	mov.w	r2, #0
 800b11a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b11e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b122:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b126:	4689      	mov	r9, r1
 800b128:	4692      	mov	sl, r2
 800b12a:	eb19 0005 	adds.w	r0, r9, r5
 800b12e:	eb4a 0106 	adc.w	r1, sl, r6
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	461d      	mov	r5, r3
 800b138:	f04f 0600 	mov.w	r6, #0
 800b13c:	196b      	adds	r3, r5, r5
 800b13e:	eb46 0406 	adc.w	r4, r6, r6
 800b142:	461a      	mov	r2, r3
 800b144:	4623      	mov	r3, r4
 800b146:	f7f5 f8bb 	bl	80002c0 <__aeabi_uldivmod>
 800b14a:	4603      	mov	r3, r0
 800b14c:	460c      	mov	r4, r1
 800b14e:	461a      	mov	r2, r3
 800b150:	4b2e      	ldr	r3, [pc, #184]	; (800b20c <UART_SetConfig+0x3a0>)
 800b152:	fba3 1302 	umull	r1, r3, r3, r2
 800b156:	095b      	lsrs	r3, r3, #5
 800b158:	2164      	movs	r1, #100	; 0x64
 800b15a:	fb01 f303 	mul.w	r3, r1, r3
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	3332      	adds	r3, #50	; 0x32
 800b164:	4a29      	ldr	r2, [pc, #164]	; (800b20c <UART_SetConfig+0x3a0>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	095b      	lsrs	r3, r3, #5
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b172:	4498      	add	r8, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	461d      	mov	r5, r3
 800b178:	f04f 0600 	mov.w	r6, #0
 800b17c:	46a9      	mov	r9, r5
 800b17e:	46b2      	mov	sl, r6
 800b180:	eb19 0309 	adds.w	r3, r9, r9
 800b184:	eb4a 040a 	adc.w	r4, sl, sl
 800b188:	4699      	mov	r9, r3
 800b18a:	46a2      	mov	sl, r4
 800b18c:	eb19 0905 	adds.w	r9, r9, r5
 800b190:	eb4a 0a06 	adc.w	sl, sl, r6
 800b194:	f04f 0100 	mov.w	r1, #0
 800b198:	f04f 0200 	mov.w	r2, #0
 800b19c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b1a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1a8:	4689      	mov	r9, r1
 800b1aa:	4692      	mov	sl, r2
 800b1ac:	eb19 0005 	adds.w	r0, r9, r5
 800b1b0:	eb4a 0106 	adc.w	r1, sl, r6
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	461d      	mov	r5, r3
 800b1ba:	f04f 0600 	mov.w	r6, #0
 800b1be:	196b      	adds	r3, r5, r5
 800b1c0:	eb46 0406 	adc.w	r4, r6, r6
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	f7f5 f87a 	bl	80002c0 <__aeabi_uldivmod>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <UART_SetConfig+0x3a0>)
 800b1d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	2164      	movs	r1, #100	; 0x64
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	3332      	adds	r3, #50	; 0x32
 800b1e6:	4a09      	ldr	r2, [pc, #36]	; (800b20c <UART_SetConfig+0x3a0>)
 800b1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ec:	095b      	lsrs	r3, r3, #5
 800b1ee:	f003 0207 	and.w	r2, r3, #7
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4442      	add	r2, r8
 800b1f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b1fa:	e1c0      	b.n	800b57e <UART_SetConfig+0x712>
 800b1fc:	40011000 	.word	0x40011000
 800b200:	40011400 	.word	0x40011400
 800b204:	40011800 	.word	0x40011800
 800b208:	40011c00 	.word	0x40011c00
 800b20c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4adc      	ldr	r2, [pc, #880]	; (800b588 <UART_SetConfig+0x71c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00f      	beq.n	800b23a <UART_SetConfig+0x3ce>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4adb      	ldr	r2, [pc, #876]	; (800b58c <UART_SetConfig+0x720>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d00a      	beq.n	800b23a <UART_SetConfig+0x3ce>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4ad9      	ldr	r2, [pc, #868]	; (800b590 <UART_SetConfig+0x724>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d005      	beq.n	800b23a <UART_SetConfig+0x3ce>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4ad8      	ldr	r2, [pc, #864]	; (800b594 <UART_SetConfig+0x728>)
 800b234:	4293      	cmp	r3, r2
 800b236:	f040 80d1 	bne.w	800b3dc <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b23a:	f7fc ff43 	bl	80080c4 <HAL_RCC_GetPCLK2Freq>
 800b23e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	469a      	mov	sl, r3
 800b244:	f04f 0b00 	mov.w	fp, #0
 800b248:	46d0      	mov	r8, sl
 800b24a:	46d9      	mov	r9, fp
 800b24c:	eb18 0308 	adds.w	r3, r8, r8
 800b250:	eb49 0409 	adc.w	r4, r9, r9
 800b254:	4698      	mov	r8, r3
 800b256:	46a1      	mov	r9, r4
 800b258:	eb18 080a 	adds.w	r8, r8, sl
 800b25c:	eb49 090b 	adc.w	r9, r9, fp
 800b260:	f04f 0100 	mov.w	r1, #0
 800b264:	f04f 0200 	mov.w	r2, #0
 800b268:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b26c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b270:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b274:	4688      	mov	r8, r1
 800b276:	4691      	mov	r9, r2
 800b278:	eb1a 0508 	adds.w	r5, sl, r8
 800b27c:	eb4b 0609 	adc.w	r6, fp, r9
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4619      	mov	r1, r3
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	f04f 0300 	mov.w	r3, #0
 800b28e:	f04f 0400 	mov.w	r4, #0
 800b292:	0094      	lsls	r4, r2, #2
 800b294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b298:	008b      	lsls	r3, r1, #2
 800b29a:	461a      	mov	r2, r3
 800b29c:	4623      	mov	r3, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	f7f5 f80d 	bl	80002c0 <__aeabi_uldivmod>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4bba      	ldr	r3, [pc, #744]	; (800b598 <UART_SetConfig+0x72c>)
 800b2ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	469b      	mov	fp, r3
 800b2bc:	f04f 0c00 	mov.w	ip, #0
 800b2c0:	46d9      	mov	r9, fp
 800b2c2:	46e2      	mov	sl, ip
 800b2c4:	eb19 0309 	adds.w	r3, r9, r9
 800b2c8:	eb4a 040a 	adc.w	r4, sl, sl
 800b2cc:	4699      	mov	r9, r3
 800b2ce:	46a2      	mov	sl, r4
 800b2d0:	eb19 090b 	adds.w	r9, r9, fp
 800b2d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b2d8:	f04f 0100 	mov.w	r1, #0
 800b2dc:	f04f 0200 	mov.w	r2, #0
 800b2e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b2e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	4692      	mov	sl, r2
 800b2f0:	eb1b 0509 	adds.w	r5, fp, r9
 800b2f4:	eb4c 060a 	adc.w	r6, ip, sl
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f04f 0200 	mov.w	r2, #0
 800b302:	f04f 0300 	mov.w	r3, #0
 800b306:	f04f 0400 	mov.w	r4, #0
 800b30a:	0094      	lsls	r4, r2, #2
 800b30c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b310:	008b      	lsls	r3, r1, #2
 800b312:	461a      	mov	r2, r3
 800b314:	4623      	mov	r3, r4
 800b316:	4628      	mov	r0, r5
 800b318:	4631      	mov	r1, r6
 800b31a:	f7f4 ffd1 	bl	80002c0 <__aeabi_uldivmod>
 800b31e:	4603      	mov	r3, r0
 800b320:	460c      	mov	r4, r1
 800b322:	461a      	mov	r2, r3
 800b324:	4b9c      	ldr	r3, [pc, #624]	; (800b598 <UART_SetConfig+0x72c>)
 800b326:	fba3 1302 	umull	r1, r3, r3, r2
 800b32a:	095b      	lsrs	r3, r3, #5
 800b32c:	2164      	movs	r1, #100	; 0x64
 800b32e:	fb01 f303 	mul.w	r3, r1, r3
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	011b      	lsls	r3, r3, #4
 800b336:	3332      	adds	r3, #50	; 0x32
 800b338:	4a97      	ldr	r2, [pc, #604]	; (800b598 <UART_SetConfig+0x72c>)
 800b33a:	fba2 2303 	umull	r2, r3, r2, r3
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b344:	4498      	add	r8, r3
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	469b      	mov	fp, r3
 800b34a:	f04f 0c00 	mov.w	ip, #0
 800b34e:	46d9      	mov	r9, fp
 800b350:	46e2      	mov	sl, ip
 800b352:	eb19 0309 	adds.w	r3, r9, r9
 800b356:	eb4a 040a 	adc.w	r4, sl, sl
 800b35a:	4699      	mov	r9, r3
 800b35c:	46a2      	mov	sl, r4
 800b35e:	eb19 090b 	adds.w	r9, r9, fp
 800b362:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b366:	f04f 0100 	mov.w	r1, #0
 800b36a:	f04f 0200 	mov.w	r2, #0
 800b36e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b37a:	4689      	mov	r9, r1
 800b37c:	4692      	mov	sl, r2
 800b37e:	eb1b 0509 	adds.w	r5, fp, r9
 800b382:	eb4c 060a 	adc.w	r6, ip, sl
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	4619      	mov	r1, r3
 800b38c:	f04f 0200 	mov.w	r2, #0
 800b390:	f04f 0300 	mov.w	r3, #0
 800b394:	f04f 0400 	mov.w	r4, #0
 800b398:	0094      	lsls	r4, r2, #2
 800b39a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b39e:	008b      	lsls	r3, r1, #2
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4623      	mov	r3, r4
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	f7f4 ff8a 	bl	80002c0 <__aeabi_uldivmod>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4b79      	ldr	r3, [pc, #484]	; (800b598 <UART_SetConfig+0x72c>)
 800b3b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b3b8:	095b      	lsrs	r3, r3, #5
 800b3ba:	2164      	movs	r1, #100	; 0x64
 800b3bc:	fb01 f303 	mul.w	r3, r1, r3
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	011b      	lsls	r3, r3, #4
 800b3c4:	3332      	adds	r3, #50	; 0x32
 800b3c6:	4a74      	ldr	r2, [pc, #464]	; (800b598 <UART_SetConfig+0x72c>)
 800b3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3cc:	095b      	lsrs	r3, r3, #5
 800b3ce:	f003 020f 	and.w	r2, r3, #15
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4442      	add	r2, r8
 800b3d8:	609a      	str	r2, [r3, #8]
 800b3da:	e0d0      	b.n	800b57e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3dc:	f7fc fe5e 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 800b3e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	469a      	mov	sl, r3
 800b3e6:	f04f 0b00 	mov.w	fp, #0
 800b3ea:	46d0      	mov	r8, sl
 800b3ec:	46d9      	mov	r9, fp
 800b3ee:	eb18 0308 	adds.w	r3, r8, r8
 800b3f2:	eb49 0409 	adc.w	r4, r9, r9
 800b3f6:	4698      	mov	r8, r3
 800b3f8:	46a1      	mov	r9, r4
 800b3fa:	eb18 080a 	adds.w	r8, r8, sl
 800b3fe:	eb49 090b 	adc.w	r9, r9, fp
 800b402:	f04f 0100 	mov.w	r1, #0
 800b406:	f04f 0200 	mov.w	r2, #0
 800b40a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b40e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b412:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b416:	4688      	mov	r8, r1
 800b418:	4691      	mov	r9, r2
 800b41a:	eb1a 0508 	adds.w	r5, sl, r8
 800b41e:	eb4b 0609 	adc.w	r6, fp, r9
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	4619      	mov	r1, r3
 800b428:	f04f 0200 	mov.w	r2, #0
 800b42c:	f04f 0300 	mov.w	r3, #0
 800b430:	f04f 0400 	mov.w	r4, #0
 800b434:	0094      	lsls	r4, r2, #2
 800b436:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b43a:	008b      	lsls	r3, r1, #2
 800b43c:	461a      	mov	r2, r3
 800b43e:	4623      	mov	r3, r4
 800b440:	4628      	mov	r0, r5
 800b442:	4631      	mov	r1, r6
 800b444:	f7f4 ff3c 	bl	80002c0 <__aeabi_uldivmod>
 800b448:	4603      	mov	r3, r0
 800b44a:	460c      	mov	r4, r1
 800b44c:	461a      	mov	r2, r3
 800b44e:	4b52      	ldr	r3, [pc, #328]	; (800b598 <UART_SetConfig+0x72c>)
 800b450:	fba3 2302 	umull	r2, r3, r3, r2
 800b454:	095b      	lsrs	r3, r3, #5
 800b456:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	469b      	mov	fp, r3
 800b45e:	f04f 0c00 	mov.w	ip, #0
 800b462:	46d9      	mov	r9, fp
 800b464:	46e2      	mov	sl, ip
 800b466:	eb19 0309 	adds.w	r3, r9, r9
 800b46a:	eb4a 040a 	adc.w	r4, sl, sl
 800b46e:	4699      	mov	r9, r3
 800b470:	46a2      	mov	sl, r4
 800b472:	eb19 090b 	adds.w	r9, r9, fp
 800b476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b47a:	f04f 0100 	mov.w	r1, #0
 800b47e:	f04f 0200 	mov.w	r2, #0
 800b482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b48a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b48e:	4689      	mov	r9, r1
 800b490:	4692      	mov	sl, r2
 800b492:	eb1b 0509 	adds.w	r5, fp, r9
 800b496:	eb4c 060a 	adc.w	r6, ip, sl
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	f04f 0300 	mov.w	r3, #0
 800b4a8:	f04f 0400 	mov.w	r4, #0
 800b4ac:	0094      	lsls	r4, r2, #2
 800b4ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b4b2:	008b      	lsls	r3, r1, #2
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	f7f4 ff00 	bl	80002c0 <__aeabi_uldivmod>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4b34      	ldr	r3, [pc, #208]	; (800b598 <UART_SetConfig+0x72c>)
 800b4c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b4cc:	095b      	lsrs	r3, r3, #5
 800b4ce:	2164      	movs	r1, #100	; 0x64
 800b4d0:	fb01 f303 	mul.w	r3, r1, r3
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	011b      	lsls	r3, r3, #4
 800b4d8:	3332      	adds	r3, #50	; 0x32
 800b4da:	4a2f      	ldr	r2, [pc, #188]	; (800b598 <UART_SetConfig+0x72c>)
 800b4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e0:	095b      	lsrs	r3, r3, #5
 800b4e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4e6:	4498      	add	r8, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	469b      	mov	fp, r3
 800b4ec:	f04f 0c00 	mov.w	ip, #0
 800b4f0:	46d9      	mov	r9, fp
 800b4f2:	46e2      	mov	sl, ip
 800b4f4:	eb19 0309 	adds.w	r3, r9, r9
 800b4f8:	eb4a 040a 	adc.w	r4, sl, sl
 800b4fc:	4699      	mov	r9, r3
 800b4fe:	46a2      	mov	sl, r4
 800b500:	eb19 090b 	adds.w	r9, r9, fp
 800b504:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b508:	f04f 0100 	mov.w	r1, #0
 800b50c:	f04f 0200 	mov.w	r2, #0
 800b510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b51c:	4689      	mov	r9, r1
 800b51e:	4692      	mov	sl, r2
 800b520:	eb1b 0509 	adds.w	r5, fp, r9
 800b524:	eb4c 060a 	adc.w	r6, ip, sl
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	4619      	mov	r1, r3
 800b52e:	f04f 0200 	mov.w	r2, #0
 800b532:	f04f 0300 	mov.w	r3, #0
 800b536:	f04f 0400 	mov.w	r4, #0
 800b53a:	0094      	lsls	r4, r2, #2
 800b53c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b540:	008b      	lsls	r3, r1, #2
 800b542:	461a      	mov	r2, r3
 800b544:	4623      	mov	r3, r4
 800b546:	4628      	mov	r0, r5
 800b548:	4631      	mov	r1, r6
 800b54a:	f7f4 feb9 	bl	80002c0 <__aeabi_uldivmod>
 800b54e:	4603      	mov	r3, r0
 800b550:	460c      	mov	r4, r1
 800b552:	461a      	mov	r2, r3
 800b554:	4b10      	ldr	r3, [pc, #64]	; (800b598 <UART_SetConfig+0x72c>)
 800b556:	fba3 1302 	umull	r1, r3, r3, r2
 800b55a:	095b      	lsrs	r3, r3, #5
 800b55c:	2164      	movs	r1, #100	; 0x64
 800b55e:	fb01 f303 	mul.w	r3, r1, r3
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	011b      	lsls	r3, r3, #4
 800b566:	3332      	adds	r3, #50	; 0x32
 800b568:	4a0b      	ldr	r2, [pc, #44]	; (800b598 <UART_SetConfig+0x72c>)
 800b56a:	fba2 2303 	umull	r2, r3, r2, r3
 800b56e:	095b      	lsrs	r3, r3, #5
 800b570:	f003 020f 	and.w	r2, r3, #15
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4442      	add	r2, r8
 800b57a:	609a      	str	r2, [r3, #8]
}
 800b57c:	e7ff      	b.n	800b57e <UART_SetConfig+0x712>
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b588:	40011000 	.word	0x40011000
 800b58c:	40011400 	.word	0x40011400
 800b590:	40011800 	.word	0x40011800
 800b594:	40011c00 	.word	0x40011c00
 800b598:	51eb851f 	.word	0x51eb851f

0800b59c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <FSMC_NORSRAM_Init+0xdc>)
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b5c6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b5cc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b5d2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b5d8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800b5de:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b5e4:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b5ea:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b5f0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b5f6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800b5fc:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800b602:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800b608:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800b60e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	2b08      	cmp	r3, #8
 800b61c:	d103      	bne.n	800b626 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b624:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68f9      	ldr	r1, [r7, #12]
 800b62e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b63a:	d10a      	bne.n	800b652 <FSMC_NORSRAM_Init+0xb6>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d006      	beq.n	800b652 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d006      	beq.n	800b668 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	ffc00480 	.word	0xffc00480

0800b67c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b69e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b6aa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b6b2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800b6ba:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b6c4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	3b02      	subs	r3, #2
 800b6cc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b6ce:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6979      	ldr	r1, [r7, #20]
 800b6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6f4:	d10e      	bne.n	800b714 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b6fe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	3b01      	subs	r3, #1
 800b706:	051b      	lsls	r3, r3, #20
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b73c:	d122      	bne.n	800b784 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b746:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	4b15      	ldr	r3, [pc, #84]	; (800b7a0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b75a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b762:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b76a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b770:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4313      	orrs	r3, r2
 800b776:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	6979      	ldr	r1, [r7, #20]
 800b77e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b782:	e005      	b.n	800b790 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b78c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	cff00000 	.word	0xcff00000

0800b7a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	b480      	push	{r7}
 800b7a8:	b085      	sub	sp, #20
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	f107 001c 	add.w	r0, r7, #28
 800b7b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b7ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b7be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b7c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b7c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b7ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b7ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b7de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	b004      	add	sp, #16
 800b7f8:	4770      	bx	lr

0800b7fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2203      	movs	r2, #3
 800b820:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b822:	2002      	movs	r0, #2
 800b824:	f7f8 fb5a 	bl	8003edc <HAL_Delay>
  
  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0303 	and.w	r3, r3, #3
}
 800b842:	4618      	mov	r0, r3
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b84e:	b480      	push	{r7}
 800b850:	b085      	sub	sp, #20
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b86c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b872:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b878:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b888:	f023 030f 	bic.w	r3, r3, #15
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	431a      	orrs	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	b2db      	uxtb	r3, r3
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
}  
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b085      	sub	sp, #20
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b908:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b90e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b914:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	4313      	orrs	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	431a      	orrs	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b92c:	2300      	movs	r3, #0

}
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b088      	sub	sp, #32
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b948:	2310      	movs	r3, #16
 800b94a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b94c:	2340      	movs	r3, #64	; 0x40
 800b94e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b950:	2300      	movs	r3, #0
 800b952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b95a:	f107 0308 	add.w	r3, r7, #8
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff ff74 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b966:	f241 3288 	movw	r2, #5000	; 0x1388
 800b96a:	2110      	movs	r1, #16
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f975 	bl	800bc5c <SDMMC_GetCmdResp1>
 800b972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b974:	69fb      	ldr	r3, [r7, #28]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3720      	adds	r7, #32
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b08a      	sub	sp, #40	; 0x28
 800b982:	af00      	add	r7, sp, #0
 800b984:	60f8      	str	r0, [r7, #12]
 800b986:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b98e:	2307      	movs	r3, #7
 800b990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b992:	2340      	movs	r3, #64	; 0x40
 800b994:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b996:	2300      	movs	r3, #0
 800b998:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b99e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9a0:	f107 0310 	add.w	r3, r7, #16
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7ff ff51 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b0:	2107      	movs	r1, #7
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 f952 	bl	800bc5c <SDMMC_GetCmdResp1>
 800b9b8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3728      	adds	r7, #40	; 0x28
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9e2:	f107 0308 	add.w	r3, r7, #8
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff ff30 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f90c 	bl	800bc0c <SDMMC_GetCmdError>
 800b9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9f6:	69fb      	ldr	r3, [r7, #28]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3720      	adds	r7, #32
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba08:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ba0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ba0e:	2308      	movs	r3, #8
 800ba10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba12:	2340      	movs	r3, #64	; 0x40
 800ba14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba20:	f107 0308 	add.w	r3, r7, #8
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff ff11 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 faf5 	bl	800c01c <SDMMC_GetCmdResp7>
 800ba32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba34:	69fb      	ldr	r3, [r7, #28]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3720      	adds	r7, #32
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b088      	sub	sp, #32
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ba4c:	2337      	movs	r3, #55	; 0x37
 800ba4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba54:	2300      	movs	r3, #0
 800ba56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff fef2 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ba6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba6e:	2137      	movs	r1, #55	; 0x37
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f8f3 	bl	800bc5c <SDMMC_GetCmdResp1>
 800ba76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba78:	69fb      	ldr	r3, [r7, #28]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3720      	adds	r7, #32
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b088      	sub	sp, #32
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ba98:	2329      	movs	r3, #41	; 0x29
 800ba9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba9c:	2340      	movs	r3, #64	; 0x40
 800ba9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800baa0:	2300      	movs	r3, #0
 800baa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800baa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800baaa:	f107 0308 	add.w	r3, r7, #8
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff fecc 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa02 	bl	800bec0 <SDMMC_GetCmdResp3>
 800babc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800babe:	69fb      	ldr	r3, [r7, #28]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bad6:	2306      	movs	r3, #6
 800bad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bae8:	f107 0308 	add.w	r3, r7, #8
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff fead 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800baf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800baf8:	2106      	movs	r1, #6
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f8ae 	bl	800bc5c <SDMMC_GetCmdResp1>
 800bb00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb02:	69fb      	ldr	r3, [r7, #28]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3720      	adds	r7, #32
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bb18:	2333      	movs	r3, #51	; 0x33
 800bb1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb1c:	2340      	movs	r3, #64	; 0x40
 800bb1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb20:	2300      	movs	r3, #0
 800bb22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb2a:	f107 0308 	add.w	r3, r7, #8
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff fe8c 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bb36:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb3a:	2133      	movs	r1, #51	; 0x33
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f88d 	bl	800bc5c <SDMMC_GetCmdResp1>
 800bb42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb44:	69fb      	ldr	r3, [r7, #28]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3720      	adds	r7, #32
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b088      	sub	sp, #32
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bb56:	2300      	movs	r3, #0
 800bb58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bb5e:	23c0      	movs	r3, #192	; 0xc0
 800bb60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb6c:	f107 0308 	add.w	r3, r7, #8
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff fe6b 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f95b 	bl	800be34 <SDMMC_GetCmdResp2>
 800bb7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb80:	69fb      	ldr	r3, [r7, #28]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3720      	adds	r7, #32
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b088      	sub	sp, #32
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bb98:	2309      	movs	r3, #9
 800bb9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bb9c:	23c0      	movs	r3, #192	; 0xc0
 800bb9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bba0:	2300      	movs	r3, #0
 800bba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbaa:	f107 0308 	add.w	r3, r7, #8
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7ff fe4c 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f93c 	bl	800be34 <SDMMC_GetCmdResp2>
 800bbbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3720      	adds	r7, #32
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbda:	2340      	movs	r3, #64	; 0x40
 800bbdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbe8:	f107 0308 	add.w	r3, r7, #8
 800bbec:	4619      	mov	r1, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff fe2d 	bl	800b84e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	2103      	movs	r1, #3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f99b 	bl	800bf34 <SDMMC_GetCmdResp6>
 800bbfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc00:	69fb      	ldr	r3, [r7, #28]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3720      	adds	r7, #32
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bc0c:	b490      	push	{r4, r7}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc14:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <SDMMC_GetCmdError+0x48>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a0f      	ldr	r2, [pc, #60]	; (800bc58 <SDMMC_GetCmdError+0x4c>)
 800bc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1e:	0a5b      	lsrs	r3, r3, #9
 800bc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc28:	4623      	mov	r3, r4
 800bc2a:	1e5c      	subs	r4, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc34:	e009      	b.n	800bc4a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0f2      	beq.n	800bc28 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	22c5      	movs	r2, #197	; 0xc5
 800bc46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bc90      	pop	{r4, r7}
 800bc52:	4770      	bx	lr
 800bc54:	20000018 	.word	0x20000018
 800bc58:	10624dd3 	.word	0x10624dd3

0800bc5c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	460b      	mov	r3, r1
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc6a:	4b6f      	ldr	r3, [pc, #444]	; (800be28 <SDMMC_GetCmdResp1+0x1cc>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a6f      	ldr	r2, [pc, #444]	; (800be2c <SDMMC_GetCmdResp1+0x1d0>)
 800bc70:	fba2 2303 	umull	r2, r3, r2, r3
 800bc74:	0a5b      	lsrs	r3, r3, #9
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc7c:	4623      	mov	r3, r4
 800bc7e:	1e5c      	subs	r4, r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc88:	e0c9      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0f0      	beq.n	800bc7c <SDMMC_GetCmdResp1+0x20>
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1eb      	bne.n	800bc7c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d004      	beq.n	800bcba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2204      	movs	r2, #4
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcb6:	2304      	movs	r3, #4
 800bcb8:	e0b1      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e0a6      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	22c5      	movs	r2, #197	; 0xc5
 800bcd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7ff fde3 	bl	800b8a2 <SDIO_GetCommandResponse>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	7afb      	ldrb	r3, [r7, #11]
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d001      	beq.n	800bcea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e099      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bcea:	2100      	movs	r1, #0
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f7ff fde5 	bl	800b8bc <SDIO_GetResponse>
 800bcf2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4b4e      	ldr	r3, [pc, #312]	; (800be30 <SDMMC_GetCmdResp1+0x1d4>)
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e08d      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	da02      	bge.n	800bd0e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bd08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd0c:	e087      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bd18:	2340      	movs	r3, #64	; 0x40
 800bd1a:	e080      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd26:	2380      	movs	r3, #128	; 0x80
 800bd28:	e079      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd38:	e071      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd48:	e069      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd58:	e061      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd68:	e059      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d002      	beq.n	800bd7a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd78:	e051      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd88:	e049      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd98:	e041      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bda4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bda8:	e039      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bdb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bdb8:	e031      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bdc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdc8:	e029      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bdd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bdd8:	e021      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bde4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bde8:	e019      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bdf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bdf8:	e011      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800be04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be08:	e009      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f003 0308 	and.w	r3, r3, #8
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800be14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800be18:	e001      	b.n	800be1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be1e:	4618      	mov	r0, r3
 800be20:	371c      	adds	r7, #28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd90      	pop	{r4, r7, pc}
 800be26:	bf00      	nop
 800be28:	20000018 	.word	0x20000018
 800be2c:	10624dd3 	.word	0x10624dd3
 800be30:	fdffe008 	.word	0xfdffe008

0800be34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800be34:	b490      	push	{r4, r7}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be3c:	4b1e      	ldr	r3, [pc, #120]	; (800beb8 <SDMMC_GetCmdResp2+0x84>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a1e      	ldr	r2, [pc, #120]	; (800bebc <SDMMC_GetCmdResp2+0x88>)
 800be42:	fba2 2303 	umull	r2, r3, r2, r3
 800be46:	0a5b      	lsrs	r3, r3, #9
 800be48:	f241 3288 	movw	r2, #5000	; 0x1388
 800be4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be50:	4623      	mov	r3, r4
 800be52:	1e5c      	subs	r4, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be5c:	e026      	b.n	800beac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d0f0      	beq.n	800be50 <SDMMC_GetCmdResp2+0x1c>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1eb      	bne.n	800be50 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b00      	cmp	r3, #0
 800be82:	d004      	beq.n	800be8e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2204      	movs	r2, #4
 800be88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be8a:	2304      	movs	r3, #4
 800be8c:	e00e      	b.n	800beac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d004      	beq.n	800bea4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e003      	b.n	800beac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	22c5      	movs	r2, #197	; 0xc5
 800bea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bc90      	pop	{r4, r7}
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	20000018 	.word	0x20000018
 800bebc:	10624dd3 	.word	0x10624dd3

0800bec0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bec0:	b490      	push	{r4, r7}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bec8:	4b18      	ldr	r3, [pc, #96]	; (800bf2c <SDMMC_GetCmdResp3+0x6c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a18      	ldr	r2, [pc, #96]	; (800bf30 <SDMMC_GetCmdResp3+0x70>)
 800bece:	fba2 2303 	umull	r2, r3, r2, r3
 800bed2:	0a5b      	lsrs	r3, r3, #9
 800bed4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bedc:	4623      	mov	r3, r4
 800bede:	1e5c      	subs	r4, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bee8:	e01b      	b.n	800bf22 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0f0      	beq.n	800bedc <SDMMC_GetCmdResp3+0x1c>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1eb      	bne.n	800bedc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d004      	beq.n	800bf1a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2204      	movs	r2, #4
 800bf14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf16:	2304      	movs	r3, #4
 800bf18:	e003      	b.n	800bf22 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	22c5      	movs	r2, #197	; 0xc5
 800bf1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bc90      	pop	{r4, r7}
 800bf2a:	4770      	bx	lr
 800bf2c:	20000018 	.word	0x20000018
 800bf30:	10624dd3 	.word	0x10624dd3

0800bf34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bf34:	b590      	push	{r4, r7, lr}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf42:	4b34      	ldr	r3, [pc, #208]	; (800c014 <SDMMC_GetCmdResp6+0xe0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a34      	ldr	r2, [pc, #208]	; (800c018 <SDMMC_GetCmdResp6+0xe4>)
 800bf48:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4c:	0a5b      	lsrs	r3, r3, #9
 800bf4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf52:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf56:	4623      	mov	r3, r4
 800bf58:	1e5c      	subs	r4, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf62:	e052      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf68:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d0f0      	beq.n	800bf56 <SDMMC_GetCmdResp6+0x22>
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1eb      	bne.n	800bf56 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf82:	f003 0304 	and.w	r3, r3, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d004      	beq.n	800bf94 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2204      	movs	r2, #4
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf90:	2304      	movs	r3, #4
 800bf92:	e03a      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e02f      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f7ff fc79 	bl	800b8a2 <SDIO_GetCommandResponse>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	7afb      	ldrb	r3, [r7, #11]
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d001      	beq.n	800bfbe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e025      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	22c5      	movs	r2, #197	; 0xc5
 800bfc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f7ff fc78 	bl	800b8bc <SDIO_GetResponse>
 800bfcc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d106      	bne.n	800bfe6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e011      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bff4:	e009      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c004:	e001      	b.n	800c00a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	371c      	adds	r7, #28
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd90      	pop	{r4, r7, pc}
 800c012:	bf00      	nop
 800c014:	20000018 	.word	0x20000018
 800c018:	10624dd3 	.word	0x10624dd3

0800c01c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c01c:	b490      	push	{r4, r7}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c024:	4b21      	ldr	r3, [pc, #132]	; (800c0ac <SDMMC_GetCmdResp7+0x90>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a21      	ldr	r2, [pc, #132]	; (800c0b0 <SDMMC_GetCmdResp7+0x94>)
 800c02a:	fba2 2303 	umull	r2, r3, r2, r3
 800c02e:	0a5b      	lsrs	r3, r3, #9
 800c030:	f241 3288 	movw	r2, #5000	; 0x1388
 800c034:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c038:	4623      	mov	r3, r4
 800c03a:	1e5c      	subs	r4, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d102      	bne.n	800c046 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c044:	e02c      	b.n	800c0a0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c04a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0f0      	beq.n	800c038 <SDMMC_GetCmdResp7+0x1c>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1eb      	bne.n	800c038 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d004      	beq.n	800c076 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2204      	movs	r2, #4
 800c070:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c072:	2304      	movs	r3, #4
 800c074:	e014      	b.n	800c0a0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c088:	2301      	movs	r3, #1
 800c08a:	e009      	b.n	800c0a0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2240      	movs	r2, #64	; 0x40
 800c09c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c09e:	2300      	movs	r3, #0
  
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bc90      	pop	{r4, r7}
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	20000018 	.word	0x20000018
 800c0b0:	10624dd3 	.word	0x10624dd3

0800c0b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	f107 001c 	add.w	r0, r7, #28
 800c0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d122      	bne.n	800c112 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d105      	bne.n	800c106 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f94a 	bl	800c3a0 <USB_CoreReset>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73fb      	strb	r3, [r7, #15]
 800c110:	e01a      	b.n	800c148 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f93e 	bl	800c3a0 <USB_CoreReset>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
 800c13a:	e005      	b.n	800c148 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d10b      	bne.n	800c166 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	f043 0206 	orr.w	r2, r3, #6
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f043 0220 	orr.w	r2, r3, #32
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c166:	7bfb      	ldrb	r3, [r7, #15]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c172:	b004      	add	sp, #16
 800c174:	4770      	bx	lr

0800c176 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c176:	b480      	push	{r7}
 800c178:	b083      	sub	sp, #12
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	f043 0201 	orr.w	r2, r3, #1
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f023 0201 	bic.w	r2, r3, #1
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d106      	bne.n	800c1e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60da      	str	r2, [r3, #12]
 800c1e4:	e00b      	b.n	800c1fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c1e6:	78fb      	ldrb	r3, [r7, #3]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d106      	bne.n	800c1fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	60da      	str	r2, [r3, #12]
 800c1f8:	e001      	b.n	800c1fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e003      	b.n	800c206 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c1fe:	2032      	movs	r0, #50	; 0x32
 800c200:	f7f7 fe6c 	bl	8003edc <HAL_Delay>

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	019b      	lsls	r3, r3, #6
 800c222:	f043 0220 	orr.w	r2, r3, #32
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3301      	adds	r3, #1
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	4a09      	ldr	r2, [pc, #36]	; (800c258 <USB_FlushTxFifo+0x48>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d901      	bls.n	800c23c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e006      	b.n	800c24a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	f003 0320 	and.w	r3, r3, #32
 800c244:	2b20      	cmp	r3, #32
 800c246:	d0f0      	beq.n	800c22a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	00030d40 	.word	0x00030d40

0800c25c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2210      	movs	r2, #16
 800c26c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4a09      	ldr	r2, [pc, #36]	; (800c29c <USB_FlushRxFifo+0x40>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d901      	bls.n	800c280 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e006      	b.n	800c28e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b10      	cmp	r3, #16
 800c28a:	d0f0      	beq.n	800c26e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	00030d40 	.word	0x00030d40

0800c2a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b089      	sub	sp, #36	; 0x24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	71fb      	strb	r3, [r7, #7]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c2be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d11a      	bne.n	800c2fc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c2c6:	88bb      	ldrh	r3, [r7, #4]
 800c2c8:	3303      	adds	r3, #3
 800c2ca:	089b      	lsrs	r3, r3, #2
 800c2cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	e00f      	b.n	800c2f4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	031a      	lsls	r2, r3, #12
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	61bb      	str	r3, [r7, #24]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d3eb      	bcc.n	800c2d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3724      	adds	r7, #36	; 0x24
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b089      	sub	sp, #36	; 0x24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	4613      	mov	r3, r2
 800c316:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	3303      	adds	r3, #3
 800c324:	089b      	lsrs	r3, r3, #2
 800c326:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c328:	2300      	movs	r3, #0
 800c32a:	61bb      	str	r3, [r7, #24]
 800c32c:	e00b      	b.n	800c346 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	601a      	str	r2, [r3, #0]
    pDest++;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	3304      	adds	r3, #4
 800c33e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	3301      	adds	r3, #1
 800c344:	61bb      	str	r3, [r7, #24]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d3ef      	bcc.n	800c32e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c34e:	69fb      	ldr	r3, [r7, #28]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3724      	adds	r7, #36	; 0x24
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4013      	ands	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c374:	68fb      	ldr	r3, [r7, #12]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr

0800c382 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c382:	b480      	push	{r7}
 800c384:	b083      	sub	sp, #12
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	f003 0301 	and.w	r3, r3, #1
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
	...

0800c3a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	60fb      	str	r3, [r7, #12]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4a13      	ldr	r2, [pc, #76]	; (800c404 <USB_CoreReset+0x64>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d901      	bls.n	800c3be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e01b      	b.n	800c3f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	daf2      	bge.n	800c3ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	f043 0201 	orr.w	r2, r3, #1
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4a09      	ldr	r2, [pc, #36]	; (800c404 <USB_CoreReset+0x64>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d901      	bls.n	800c3e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e006      	b.n	800c3f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d0f0      	beq.n	800c3d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	00030d40 	.word	0x00030d40

0800c408 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c408:	b084      	sub	sp, #16
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	f107 001c 	add.w	r0, r7, #28
 800c416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c424:	461a      	mov	r2, r3
 800c426:	2300      	movs	r3, #0
 800c428:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d018      	beq.n	800c480 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	2b01      	cmp	r3, #1
 800c452:	d10a      	bne.n	800c46a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c462:	f043 0304 	orr.w	r3, r3, #4
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	e014      	b.n	800c494 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c478:	f023 0304 	bic.w	r3, r3, #4
 800c47c:	6013      	str	r3, [r2, #0]
 800c47e:	e009      	b.n	800c494 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c48e:	f023 0304 	bic.w	r3, r3, #4
 800c492:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c494:	2110      	movs	r1, #16
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff feba 	bl	800c210 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff fedd 	bl	800c25c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	e015      	b.n	800c4d4 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d3e5      	bcc.n	800c4a8 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c4dc:	2101      	movs	r1, #1
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f8ac 	bl	800c63c <USB_DriveVbus>

  HAL_Delay(200U);
 800c4e4:	20c8      	movs	r0, #200	; 0xc8
 800c4e6:	f7f7 fcf9 	bl	8003edc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c50a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a14      	ldr	r2, [pc, #80]	; (800c560 <USB_HostInit+0x158>)
 800c510:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a13      	ldr	r2, [pc, #76]	; (800c564 <USB_HostInit+0x15c>)
 800c516:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c51a:	e009      	b.n	800c530 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2280      	movs	r2, #128	; 0x80
 800c520:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a10      	ldr	r2, [pc, #64]	; (800c568 <USB_HostInit+0x160>)
 800c526:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a10      	ldr	r2, [pc, #64]	; (800c56c <USB_HostInit+0x164>)
 800c52c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	f043 0210 	orr.w	r2, r3, #16
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	699a      	ldr	r2, [r3, #24]
 800c546:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <USB_HostInit+0x168>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c55a:	b004      	add	sp, #16
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	01000200 	.word	0x01000200
 800c564:	00e00300 	.word	0x00e00300
 800c568:	00600080 	.word	0x00600080
 800c56c:	004000e0 	.word	0x004000e0
 800c570:	a3200008 	.word	0xa3200008

0800c574 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c592:	f023 0303 	bic.w	r3, r3, #3
 800c596:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	78fb      	ldrb	r3, [r7, #3]
 800c5a2:	f003 0303 	and.w	r3, r3, #3
 800c5a6:	68f9      	ldr	r1, [r7, #12]
 800c5a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d107      	bne.n	800c5c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c5c2:	6053      	str	r3, [r2, #4]
 800c5c4:	e009      	b.n	800c5da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c5c6:	78fb      	ldrb	r3, [r7, #3]
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d106      	bne.n	800c5da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f241 7370 	movw	r3, #6000	; 0x1770
 800c5d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c608:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c616:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c618:	2064      	movs	r0, #100	; 0x64
 800c61a:	f7f7 fc5f 	bl	8003edc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c62a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c62c:	200a      	movs	r0, #10
 800c62e:	f7f7 fc55 	bl	8003edc <HAL_Delay>

  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	460b      	mov	r3, r1
 800c646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c64c:	2300      	movs	r3, #0
 800c64e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c660:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d109      	bne.n	800c680 <USB_DriveVbus+0x44>
 800c66c:	78fb      	ldrb	r3, [r7, #3]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d106      	bne.n	800c680 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c67a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c67e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c68a:	d109      	bne.n	800c6a0 <USB_DriveVbus+0x64>
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c69a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c69e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	0c5b      	lsrs	r3, r3, #17
 800c6cc:	f003 0303 	and.w	r3, r3, #3
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	b29b      	uxth	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
	...

0800c700 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	461a      	mov	r2, r3
 800c70e:	4603      	mov	r3, r0
 800c710:	70fb      	strb	r3, [r7, #3]
 800c712:	460b      	mov	r3, r1
 800c714:	70bb      	strb	r3, [r7, #2]
 800c716:	4613      	mov	r3, r2
 800c718:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	015a      	lsls	r2, r3, #5
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	4413      	add	r3, r2
 800c72a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c72e:	461a      	mov	r2, r3
 800c730:	f04f 33ff 	mov.w	r3, #4294967295
 800c734:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c736:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d87e      	bhi.n	800c83c <USB_HC_Init+0x13c>
 800c73e:	a201      	add	r2, pc, #4	; (adr r2, 800c744 <USB_HC_Init+0x44>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c755 	.word	0x0800c755
 800c748:	0800c7ff 	.word	0x0800c7ff
 800c74c:	0800c755 	.word	0x0800c755
 800c750:	0800c7c1 	.word	0x0800c7c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c760:	461a      	mov	r2, r3
 800c762:	f240 439d 	movw	r3, #1181	; 0x49d
 800c766:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c768:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	da10      	bge.n	800c792 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	4413      	add	r3, r2
 800c778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	78fa      	ldrb	r2, [r7, #3]
 800c780:	0151      	lsls	r1, r2, #5
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	440a      	add	r2, r1
 800c786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c78a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c78e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c790:	e057      	b.n	800c842 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d051      	beq.n	800c842 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c79e:	78fb      	ldrb	r3, [r7, #3]
 800c7a0:	015a      	lsls	r2, r3, #5
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	78fa      	ldrb	r2, [r7, #3]
 800c7ae:	0151      	lsls	r1, r2, #5
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	440a      	add	r2, r1
 800c7b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c7bc:	60d3      	str	r3, [r2, #12]
      break;
 800c7be:	e040      	b.n	800c842 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	015a      	lsls	r2, r3, #5
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	f240 639d 	movw	r3, #1693	; 0x69d
 800c7d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c7d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	da34      	bge.n	800c846 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c7dc:	78fb      	ldrb	r3, [r7, #3]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	78fa      	ldrb	r2, [r7, #3]
 800c7ec:	0151      	lsls	r1, r2, #5
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	440a      	add	r2, r1
 800c7f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c7fc:	e023      	b.n	800c846 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c80a:	461a      	mov	r2, r3
 800c80c:	f240 2325 	movw	r3, #549	; 0x225
 800c810:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c812:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c816:	2b00      	cmp	r3, #0
 800c818:	da17      	bge.n	800c84a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c81a:	78fb      	ldrb	r3, [r7, #3]
 800c81c:	015a      	lsls	r2, r3, #5
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	4413      	add	r3, r2
 800c822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	0151      	lsls	r1, r2, #5
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	440a      	add	r2, r1
 800c830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c834:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c838:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c83a:	e006      	b.n	800c84a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	75fb      	strb	r3, [r7, #23]
      break;
 800c840:	e004      	b.n	800c84c <USB_HC_Init+0x14c>
      break;
 800c842:	bf00      	nop
 800c844:	e002      	b.n	800c84c <USB_HC_Init+0x14c>
      break;
 800c846:	bf00      	nop
 800c848:	e000      	b.n	800c84c <USB_HC_Init+0x14c>
      break;
 800c84a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c852:	699a      	ldr	r2, [r3, #24]
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	f003 030f 	and.w	r3, r3, #15
 800c85a:	2101      	movs	r1, #1
 800c85c:	fa01 f303 	lsl.w	r3, r1, r3
 800c860:	68b9      	ldr	r1, [r7, #8]
 800c862:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c866:	4313      	orrs	r3, r2
 800c868:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c876:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	da03      	bge.n	800c886 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c87e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	e001      	b.n	800c88a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c886:	2300      	movs	r3, #0
 800c888:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c88a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d103      	bne.n	800c89a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	e001      	b.n	800c89e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c89a:	2300      	movs	r3, #0
 800c89c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c89e:	787b      	ldrb	r3, [r7, #1]
 800c8a0:	059b      	lsls	r3, r3, #22
 800c8a2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c8a6:	78bb      	ldrb	r3, [r7, #2]
 800c8a8:	02db      	lsls	r3, r3, #11
 800c8aa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c8ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c8b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c8b4:	049b      	lsls	r3, r3, #18
 800c8b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c8ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c8bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c8c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	0159      	lsls	r1, r3, #5
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	440b      	add	r3, r1
 800c8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8d4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c8da:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c8dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	d10f      	bne.n	800c904 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c8e4:	78fb      	ldrb	r3, [r7, #3]
 800c8e6:	015a      	lsls	r2, r3, #5
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	78fa      	ldrb	r2, [r7, #3]
 800c8f4:	0151      	lsls	r1, r2, #5
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	440a      	add	r2, r1
 800c8fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c902:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c904:	7dfb      	ldrb	r3, [r7, #23]
}
 800c906:	4618      	mov	r0, r3
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop

0800c914 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08c      	sub	sp, #48	; 0x30
 800c918:	af02      	add	r7, sp, #8
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	4613      	mov	r3, r2
 800c920:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	785b      	ldrb	r3, [r3, #1]
 800c92a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c92c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c930:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d028      	beq.n	800c990 <USB_HC_StartXfer+0x7c>
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	791b      	ldrb	r3, [r3, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d124      	bne.n	800c990 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10b      	bne.n	800c964 <USB_HC_StartXfer+0x50>
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	795b      	ldrb	r3, [r3, #5]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d107      	bne.n	800c964 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	785b      	ldrb	r3, [r3, #1]
 800c958:	4619      	mov	r1, r3
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f000 fa30 	bl	800cdc0 <USB_DoPing>
      return HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	e114      	b.n	800cb8e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d112      	bne.n	800c990 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	4413      	add	r3, r2
 800c972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	0151      	lsls	r1, r2, #5
 800c97c:	6a3a      	ldr	r2, [r7, #32]
 800c97e:	440a      	add	r2, r1
 800c980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c984:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c988:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2200      	movs	r2, #0
 800c98e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d018      	beq.n	800c9ca <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	8912      	ldrh	r2, [r2, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	8912      	ldrh	r2, [r2, #8]
 800c9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9ac:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c9ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c9b0:	8b7b      	ldrh	r3, [r7, #26]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d90b      	bls.n	800c9ce <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c9b6:	8b7b      	ldrh	r3, [r7, #26]
 800c9b8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c9ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	8912      	ldrh	r2, [r2, #8]
 800c9c0:	fb02 f203 	mul.w	r2, r2, r3
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	611a      	str	r2, [r3, #16]
 800c9c8:	e001      	b.n	800c9ce <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	78db      	ldrb	r3, [r3, #3]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d006      	beq.n	800c9e4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c9d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	8912      	ldrh	r2, [r2, #8]
 800c9dc:	fb02 f203 	mul.w	r2, r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c9ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9ee:	04d9      	lsls	r1, r3, #19
 800c9f0:	4b69      	ldr	r3, [pc, #420]	; (800cb98 <USB_HC_StartXfer+0x284>)
 800c9f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c9f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	7a9b      	ldrb	r3, [r3, #10]
 800c9fa:	075b      	lsls	r3, r3, #29
 800c9fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ca00:	69f9      	ldr	r1, [r7, #28]
 800ca02:	0148      	lsls	r0, r1, #5
 800ca04:	6a39      	ldr	r1, [r7, #32]
 800ca06:	4401      	add	r1, r0
 800ca08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ca0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ca0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ca10:	79fb      	ldrb	r3, [r7, #7]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d009      	beq.n	800ca2a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	68d9      	ldr	r1, [r3, #12]
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	015a      	lsls	r2, r3, #5
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca26:	460a      	mov	r2, r1
 800ca28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bf0c      	ite	eq
 800ca3a:	2301      	moveq	r3, #1
 800ca3c:	2300      	movne	r3, #0
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	69fa      	ldr	r2, [r7, #28]
 800ca52:	0151      	lsls	r1, r2, #5
 800ca54:	6a3a      	ldr	r2, [r7, #32]
 800ca56:	440a      	add	r2, r1
 800ca58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ca60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	7e7b      	ldrb	r3, [r7, #25]
 800ca72:	075b      	lsls	r3, r3, #29
 800ca74:	69f9      	ldr	r1, [r7, #28]
 800ca76:	0148      	lsls	r0, r1, #5
 800ca78:	6a39      	ldr	r1, [r7, #32]
 800ca7a:	4401      	add	r1, r0
 800ca7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ca80:	4313      	orrs	r3, r2
 800ca82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a42      	ldr	r2, [pc, #264]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800ca94:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ca96:	4b41      	ldr	r3, [pc, #260]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca9e:	4a3f      	ldr	r2, [pc, #252]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800caa0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	78db      	ldrb	r3, [r3, #3]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800caaa:	4b3c      	ldr	r3, [pc, #240]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cab2:	4a3a      	ldr	r2, [pc, #232]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800cab4:	6013      	str	r3, [r2, #0]
 800cab6:	e005      	b.n	800cac4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cab8:	4b38      	ldr	r3, [pc, #224]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cac0:	4a36      	ldr	r2, [pc, #216]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800cac2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cac4:	4b35      	ldr	r3, [pc, #212]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cacc:	4a33      	ldr	r2, [pc, #204]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800cace:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cadc:	461a      	mov	r2, r3
 800cade:	4b2f      	ldr	r3, [pc, #188]	; (800cb9c <USB_HC_StartXfer+0x288>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d001      	beq.n	800caee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	e04f      	b.n	800cb8e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	78db      	ldrb	r3, [r3, #3]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d14a      	bne.n	800cb8c <USB_HC_StartXfer+0x278>
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d046      	beq.n	800cb8c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	79db      	ldrb	r3, [r3, #7]
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d830      	bhi.n	800cb68 <USB_HC_StartXfer+0x254>
 800cb06:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <USB_HC_StartXfer+0x1f8>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cb1d 	.word	0x0800cb1d
 800cb10:	0800cb41 	.word	0x0800cb41
 800cb14:	0800cb1d 	.word	0x0800cb1d
 800cb18:	0800cb41 	.word	0x0800cb41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	3303      	adds	r3, #3
 800cb22:	089b      	lsrs	r3, r3, #2
 800cb24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cb26:	8afa      	ldrh	r2, [r7, #22]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d91c      	bls.n	800cb6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	f043 0220 	orr.w	r2, r3, #32
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	619a      	str	r2, [r3, #24]
        }
        break;
 800cb3e:	e015      	b.n	800cb6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	3303      	adds	r3, #3
 800cb46:	089b      	lsrs	r3, r3, #2
 800cb48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cb4a:	8afa      	ldrh	r2, [r7, #22]
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d90a      	bls.n	800cb70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	619a      	str	r2, [r3, #24]
        }
        break;
 800cb66:	e003      	b.n	800cb70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800cb68:	bf00      	nop
 800cb6a:	e002      	b.n	800cb72 <USB_HC_StartXfer+0x25e>
        break;
 800cb6c:	bf00      	nop
 800cb6e:	e000      	b.n	800cb72 <USB_HC_StartXfer+0x25e>
        break;
 800cb70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	68d9      	ldr	r1, [r3, #12]
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	785a      	ldrb	r2, [r3, #1]
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	b298      	uxth	r0, r3
 800cb80:	2300      	movs	r3, #0
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	4603      	mov	r3, r0
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f7ff fb8a 	bl	800c2a0 <USB_WritePacket>
  }

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3728      	adds	r7, #40	; 0x28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	1ff80000 	.word	0x1ff80000
 800cb9c:	200001a0 	.word	0x200001a0

0800cba0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	b29b      	uxth	r3, r3
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b087      	sub	sp, #28
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800cbd2:	78fb      	ldrb	r3, [r7, #3]
 800cbd4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	0c9b      	lsrs	r3, r3, #18
 800cbea:	f003 0303 	and.w	r3, r3, #3
 800cbee:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <USB_HC_Halt+0x3a>
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d16c      	bne.n	800ccd6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	0151      	lsls	r1, r2, #5
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	440a      	add	r2, r1
 800cc12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc1a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d143      	bne.n	800ccb0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	0151      	lsls	r1, r2, #5
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	440a      	add	r2, r1
 800cc3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	015a      	lsls	r2, r3, #5
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	4413      	add	r3, r2
 800cc50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	0151      	lsls	r1, r2, #5
 800cc5a:	693a      	ldr	r2, [r7, #16]
 800cc5c:	440a      	add	r2, r1
 800cc5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	0151      	lsls	r1, r2, #5
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	440a      	add	r2, r1
 800cc7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc86:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc94:	d81d      	bhi.n	800ccd2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	015a      	lsls	r2, r3, #5
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccac:	d0ec      	beq.n	800cc88 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ccae:	e080      	b.n	800cdb2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	0151      	lsls	r1, r2, #5
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	440a      	add	r2, r1
 800ccc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccce:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ccd0:	e06f      	b.n	800cdb2 <USB_HC_Halt+0x1f0>
          break;
 800ccd2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ccd4:	e06d      	b.n	800cdb2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	015a      	lsls	r2, r3, #5
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	4413      	add	r3, r2
 800ccde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	0151      	lsls	r1, r2, #5
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	440a      	add	r2, r1
 800ccec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccf4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d143      	bne.n	800cd8e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	015a      	lsls	r2, r3, #5
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	0151      	lsls	r1, r2, #5
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	440a      	add	r2, r1
 800cd1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd24:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	015a      	lsls	r2, r3, #5
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	0151      	lsls	r1, r2, #5
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	440a      	add	r2, r1
 800cd3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd44:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	015a      	lsls	r2, r3, #5
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	0151      	lsls	r1, r2, #5
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	440a      	add	r2, r1
 800cd5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd64:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	617b      	str	r3, [r7, #20]
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd72:	d81d      	bhi.n	800cdb0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd8a:	d0ec      	beq.n	800cd66 <USB_HC_Halt+0x1a4>
 800cd8c:	e011      	b.n	800cdb2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	015a      	lsls	r2, r3, #5
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	4413      	add	r3, r2
 800cd96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	0151      	lsls	r1, r2, #5
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	440a      	add	r2, r1
 800cda4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cda8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	e000      	b.n	800cdb2 <USB_HC_Halt+0x1f0>
          break;
 800cdb0:	bf00      	nop
    }
  }

  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	371c      	adds	r7, #28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	04da      	lsls	r2, r3, #19
 800cddc:	4b15      	ldr	r3, [pc, #84]	; (800ce34 <USB_DoPing+0x74>)
 800cdde:	4013      	ands	r3, r2
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	0151      	lsls	r1, r2, #5
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	440a      	add	r2, r1
 800cde8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdf0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	015a      	lsls	r2, r3, #5
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	015a      	lsls	r2, r3, #5
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	4413      	add	r3, r2
 800ce1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce1e:	461a      	mov	r2, r3
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	1ff80000 	.word	0x1ff80000

0800ce38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff f9a5 	bl	800c198 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ce4e:	2110      	movs	r1, #16
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff f9dd 	bl	800c210 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7ff fa00 	bl	800c25c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	e01f      	b.n	800cea2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ce88:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	015a      	lsls	r2, r3, #5
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	4413      	add	r3, r2
 800ce92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce96:	461a      	mov	r2, r3
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	613b      	str	r3, [r7, #16]
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2b0f      	cmp	r3, #15
 800cea6:	d9dc      	bls.n	800ce62 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	613b      	str	r3, [r7, #16]
 800ceac:	e034      	b.n	800cf18 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	015a      	lsls	r2, r3, #5
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cec4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cecc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ced4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	015a      	lsls	r2, r3, #5
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	4413      	add	r3, r2
 800cede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cee2:	461a      	mov	r2, r3
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	3301      	adds	r3, #1
 800ceec:	617b      	str	r3, [r7, #20]
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cef4:	d80c      	bhi.n	800cf10 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf0c:	d0ec      	beq.n	800cee8 <USB_StopHost+0xb0>
 800cf0e:	e000      	b.n	800cf12 <USB_StopHost+0xda>
        break;
 800cf10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	3301      	adds	r3, #1
 800cf16:	613b      	str	r3, [r7, #16]
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2b0f      	cmp	r3, #15
 800cf1c:	d9c7      	bls.n	800ceae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf24:	461a      	mov	r2, r3
 800cf26:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff f91e 	bl	800c176 <USB_EnableGlobalInt>

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b089      	sub	sp, #36	; 0x24
 800cf48:	af04      	add	r7, sp, #16
 800cf4a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	2202      	movs	r2, #2
 800cf50:	2102      	movs	r1, #2
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fcb4 	bl	800d8c0 <USBH_FindInterface>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	2bff      	cmp	r3, #255	; 0xff
 800cf60:	d002      	beq.n	800cf68 <USBH_CDC_InterfaceInit+0x24>
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d901      	bls.n	800cf6c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cf68:	2302      	movs	r3, #2
 800cf6a:	e13d      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fc89 	bl	800d888 <USBH_SelectInterface>
 800cf76:	4603      	mov	r3, r0
 800cf78:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cf7a:	7bbb      	ldrb	r3, [r7, #14]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cf80:	2302      	movs	r3, #2
 800cf82:	e131      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cf8a:	2050      	movs	r0, #80	; 0x50
 800cf8c:	f005 fe62 	bl	8012c54 <malloc>
 800cf90:	4603      	mov	r3, r0
 800cf92:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf9a:	69db      	ldr	r3, [r3, #28]
 800cf9c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	e11f      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cfa8:	2250      	movs	r2, #80	; 0x50
 800cfaa:	2100      	movs	r1, #0
 800cfac:	68b8      	ldr	r0, [r7, #8]
 800cfae:	f005 fe6c 	bl	8012c8a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	211a      	movs	r1, #26
 800cfb8:	fb01 f303 	mul.w	r3, r1, r3
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	b25b      	sxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	da15      	bge.n	800cff6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	211a      	movs	r1, #26
 800cfd0:	fb01 f303 	mul.w	r3, r1, r3
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cfda:	781a      	ldrb	r2, [r3, #0]
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	211a      	movs	r1, #26
 800cfe6:	fb01 f303 	mul.w	r3, r1, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cff0:	881a      	ldrh	r2, [r3, #0]
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	785b      	ldrb	r3, [r3, #1]
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f002 f890 	bl	800f122 <USBH_AllocPipe>
 800d002:	4603      	mov	r3, r0
 800d004:	461a      	mov	r2, r3
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	7819      	ldrb	r1, [r3, #0]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	7858      	ldrb	r0, [r3, #1]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	8952      	ldrh	r2, [r2, #10]
 800d022:	9202      	str	r2, [sp, #8]
 800d024:	2203      	movs	r2, #3
 800d026:	9201      	str	r2, [sp, #4]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4623      	mov	r3, r4
 800d02c:	4602      	mov	r2, r0
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f002 f848 	bl	800f0c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2200      	movs	r2, #0
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f005 fd59 	bl	8012af4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d042:	2300      	movs	r3, #0
 800d044:	2200      	movs	r2, #0
 800d046:	210a      	movs	r1, #10
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fc39 	bl	800d8c0 <USBH_FindInterface>
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d052:	7bfb      	ldrb	r3, [r7, #15]
 800d054:	2bff      	cmp	r3, #255	; 0xff
 800d056:	d002      	beq.n	800d05e <USBH_CDC_InterfaceInit+0x11a>
 800d058:	7bfb      	ldrb	r3, [r7, #15]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d901      	bls.n	800d062 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d05e:	2302      	movs	r3, #2
 800d060:	e0c2      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d062:	7bfb      	ldrb	r3, [r7, #15]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	211a      	movs	r1, #26
 800d068:	fb01 f303 	mul.w	r3, r1, r3
 800d06c:	4413      	add	r3, r2
 800d06e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	b25b      	sxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	da16      	bge.n	800d0a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	211a      	movs	r1, #26
 800d080:	fb01 f303 	mul.w	r3, r1, r3
 800d084:	4413      	add	r3, r2
 800d086:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d08a:	781a      	ldrb	r2, [r3, #0]
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	211a      	movs	r1, #26
 800d096:	fb01 f303 	mul.w	r3, r1, r3
 800d09a:	4413      	add	r3, r2
 800d09c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d0a0:	881a      	ldrh	r2, [r3, #0]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	835a      	strh	r2, [r3, #26]
 800d0a6:	e015      	b.n	800d0d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	211a      	movs	r1, #26
 800d0ae:	fb01 f303 	mul.w	r3, r1, r3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	211a      	movs	r1, #26
 800d0c4:	fb01 f303 	mul.w	r3, r1, r3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d0ce:	881a      	ldrh	r2, [r3, #0]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	211a      	movs	r1, #26
 800d0da:	fb01 f303 	mul.w	r3, r1, r3
 800d0de:	4413      	add	r3, r2
 800d0e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b25b      	sxtb	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	da16      	bge.n	800d11a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	211a      	movs	r1, #26
 800d0f2:	fb01 f303 	mul.w	r3, r1, r3
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d0fc:	781a      	ldrb	r2, [r3, #0]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d102:	7bfb      	ldrb	r3, [r7, #15]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	211a      	movs	r1, #26
 800d108:	fb01 f303 	mul.w	r3, r1, r3
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d112:	881a      	ldrh	r2, [r3, #0]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	835a      	strh	r2, [r3, #26]
 800d118:	e015      	b.n	800d146 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	211a      	movs	r1, #26
 800d120:	fb01 f303 	mul.w	r3, r1, r3
 800d124:	4413      	add	r3, r2
 800d126:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d130:	7bfb      	ldrb	r3, [r7, #15]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	211a      	movs	r1, #26
 800d136:	fb01 f303 	mul.w	r3, r1, r3
 800d13a:	4413      	add	r3, r2
 800d13c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d140:	881a      	ldrh	r2, [r3, #0]
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	7b9b      	ldrb	r3, [r3, #14]
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f001 ffe8 	bl	800f122 <USBH_AllocPipe>
 800d152:	4603      	mov	r3, r0
 800d154:	461a      	mov	r2, r3
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	7bdb      	ldrb	r3, [r3, #15]
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 ffde 	bl	800f122 <USBH_AllocPipe>
 800d166:	4603      	mov	r3, r0
 800d168:	461a      	mov	r2, r3
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	7b59      	ldrb	r1, [r3, #13]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	7b98      	ldrb	r0, [r3, #14]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	8b12      	ldrh	r2, [r2, #24]
 800d186:	9202      	str	r2, [sp, #8]
 800d188:	2202      	movs	r2, #2
 800d18a:	9201      	str	r2, [sp, #4]
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	4623      	mov	r3, r4
 800d190:	4602      	mov	r2, r0
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f001 ff96 	bl	800f0c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	7b19      	ldrb	r1, [r3, #12]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	7bd8      	ldrb	r0, [r3, #15]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	8b52      	ldrh	r2, [r2, #26]
 800d1b0:	9202      	str	r2, [sp, #8]
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	9201      	str	r2, [sp, #4]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 ff81 	bl	800f0c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	7b5b      	ldrb	r3, [r3, #13]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f005 fc8e 	bl	8012af4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	7b1b      	ldrb	r3, [r3, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f005 fc87 	bl	8012af4 <USBH_LL_SetToggle>

  return USBH_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd90      	pop	{r4, r7, pc}

0800d1f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	4619      	mov	r1, r3
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f001 ff76 	bl	800f102 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 ffa1 	bl	800f164 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	7b1b      	ldrb	r3, [r3, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00e      	beq.n	800d24e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	7b1b      	ldrb	r3, [r3, #12]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 ff63 	bl	800f102 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	7b1b      	ldrb	r3, [r3, #12]
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 ff8e 	bl	800f164 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	7b5b      	ldrb	r3, [r3, #13]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00e      	beq.n	800d274 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	7b5b      	ldrb	r3, [r3, #13]
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 ff50 	bl	800f102 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	7b5b      	ldrb	r3, [r3, #13]
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 ff7b 	bl	800f164 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00b      	beq.n	800d298 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	4618      	mov	r0, r3
 800d28a:	f005 fceb 	bl	8012c64 <free>
    phost->pActiveClass->pData = 0U;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d294:	2200      	movs	r2, #0
 800d296:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3340      	adds	r3, #64	; 0x40
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f8b1 	bl	800d422 <GetLineCoding>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d2c4:	7afb      	ldrb	r3, [r7, #11]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d105      	bne.n	800d2d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2d0:	2102      	movs	r1, #2
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d2d6:	7afb      	ldrb	r3, [r7, #11]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d300:	2b04      	cmp	r3, #4
 800d302:	d877      	bhi.n	800d3f4 <USBH_CDC_Process+0x114>
 800d304:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <USBH_CDC_Process+0x2c>)
 800d306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30a:	bf00      	nop
 800d30c:	0800d321 	.word	0x0800d321
 800d310:	0800d327 	.word	0x0800d327
 800d314:	0800d357 	.word	0x0800d357
 800d318:	0800d3cb 	.word	0x0800d3cb
 800d31c:	0800d3d9 	.word	0x0800d3d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
      break;
 800d324:	e06d      	b.n	800d402 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f897 	bl	800d460 <SetLineCoding>
 800d332:	4603      	mov	r3, r0
 800d334:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d336:	7bbb      	ldrb	r3, [r7, #14]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d344:	e058      	b.n	800d3f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d055      	beq.n	800d3f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2204      	movs	r2, #4
 800d350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d354:	e050      	b.n	800d3f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	3340      	adds	r3, #64	; 0x40
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f860 	bl	800d422 <GetLineCoding>
 800d362:	4603      	mov	r3, r0
 800d364:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d126      	bne.n	800d3ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d37e:	791b      	ldrb	r3, [r3, #4]
 800d380:	429a      	cmp	r2, r3
 800d382:	d13b      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d38e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d390:	429a      	cmp	r2, r3
 800d392:	d133      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d39e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d12b      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d124      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f984 	bl	800d6c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d3b8:	e020      	b.n	800d3fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d3ba:	7bbb      	ldrb	r3, [r7, #14]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d01d      	beq.n	800d3fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2204      	movs	r2, #4
 800d3c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d3c8:	e018      	b.n	800d3fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f867 	bl	800d49e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f8f8 	bl	800d5c6 <CDC_ProcessReception>
      break;
 800d3d6:	e014      	b.n	800d402 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d3d8:	2100      	movs	r1, #0
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f001 f94f 	bl	800e67e <USBH_ClrFeature>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10a      	bne.n	800d400 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d3f2:	e005      	b.n	800d400 <USBH_CDC_Process+0x120>

    default:
      break;
 800d3f4:	bf00      	nop
 800d3f6:	e004      	b.n	800d402 <USBH_CDC_Process+0x122>
      break;
 800d3f8:	bf00      	nop
 800d3fa:	e002      	b.n	800d402 <USBH_CDC_Process+0x122>
      break;
 800d3fc:	bf00      	nop
 800d3fe:	e000      	b.n	800d402 <USBH_CDC_Process+0x122>
      break;
 800d400:	bf00      	nop

  }

  return status;
 800d402:	7bfb      	ldrb	r3, [r7, #15]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b082      	sub	sp, #8
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	22a1      	movs	r2, #161	; 0xa1
 800d430:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2221      	movs	r2, #33	; 0x21
 800d436:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2207      	movs	r2, #7
 800d448:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2207      	movs	r2, #7
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 faf4 	bl	800ea3e <USBH_CtlReq>
 800d456:	4603      	mov	r3, r0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2221      	movs	r2, #33	; 0x21
 800d46e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2220      	movs	r2, #32
 800d474:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2207      	movs	r2, #7
 800d486:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2207      	movs	r2, #7
 800d48c:	4619      	mov	r1, r3
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f001 fad5 	bl	800ea3e <USBH_CtlReq>
 800d494:	4603      	mov	r3, r0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af02      	add	r7, sp, #8
 800d4a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d002      	beq.n	800d4c4 <CDC_ProcessTransmission+0x26>
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d025      	beq.n	800d50e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800d4c2:	e07c      	b.n	800d5be <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	8b12      	ldrh	r2, [r2, #24]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d90c      	bls.n	800d4ea <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	69d9      	ldr	r1, [r3, #28]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	8b1a      	ldrh	r2, [r3, #24]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	7b58      	ldrb	r0, [r3, #13]
 800d4dc:	2301      	movs	r3, #1
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 fdab 	bl	800f03e <USBH_BulkSendData>
 800d4e8:	e00c      	b.n	800d504 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	7b58      	ldrb	r0, [r3, #13]
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 fd9d 	bl	800f03e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2202      	movs	r2, #2
 800d508:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d50c:	e057      	b.n	800d5be <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	7b5b      	ldrb	r3, [r3, #13]
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f005 fac3 	bl	8012aa0 <USBH_LL_GetURBState>
 800d51a:	4603      	mov	r3, r0
 800d51c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d51e:	7afb      	ldrb	r3, [r7, #11]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d136      	bne.n	800d592 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	8b12      	ldrh	r2, [r2, #24]
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d90e      	bls.n	800d54e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	8b12      	ldrh	r2, [r2, #24]
 800d538:	1a9a      	subs	r2, r3, r2
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	8b12      	ldrh	r2, [r2, #24]
 800d546:	441a      	add	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	61da      	str	r2, [r3, #28]
 800d54c:	e002      	b.n	800d554 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d564:	e006      	b.n	800d574 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f892 	bl	800d698 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2204      	movs	r2, #4
 800d578:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d588:	2300      	movs	r3, #0
 800d58a:	2200      	movs	r2, #0
 800d58c:	f002 f90c 	bl	800f7a8 <osMessageQueuePut>
      break;
 800d590:	e014      	b.n	800d5bc <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800d592:	7afb      	ldrb	r3, [r7, #11]
 800d594:	2b02      	cmp	r3, #2
 800d596:	d111      	bne.n	800d5bc <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2204      	movs	r2, #4
 800d5a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f002 f8f6 	bl	800f7a8 <osMessageQueuePut>
      break;
 800d5bc:	bf00      	nop
  }
}
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b086      	sub	sp, #24
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d002      	beq.n	800d5ec <CDC_ProcessReception+0x26>
 800d5e6:	2b04      	cmp	r3, #4
 800d5e8:	d00e      	beq.n	800d608 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d5ea:	e051      	b.n	800d690 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	6a19      	ldr	r1, [r3, #32]
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	8b5a      	ldrh	r2, [r3, #26]
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	7b1b      	ldrb	r3, [r3, #12]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f001 fd45 	bl	800f088 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2204      	movs	r2, #4
 800d602:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d606:	e043      	b.n	800d690 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	7b1b      	ldrb	r3, [r3, #12]
 800d60c:	4619      	mov	r1, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f005 fa46 	bl	8012aa0 <USBH_LL_GetURBState>
 800d614:	4603      	mov	r3, r0
 800d616:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d618:	7cfb      	ldrb	r3, [r7, #19]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d137      	bne.n	800d68e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	7b1b      	ldrb	r3, [r3, #12]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f005 f9a9 	bl	801297c <USBH_LL_GetLastXferSize>
 800d62a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	429a      	cmp	r2, r3
 800d634:	d016      	beq.n	800d664 <CDC_ProcessReception+0x9e>
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	8b5b      	ldrh	r3, [r3, #26]
 800d63a:	461a      	mov	r2, r3
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4293      	cmp	r3, r2
 800d640:	d910      	bls.n	800d664 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	1ad2      	subs	r2, r2, r3
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	6a1a      	ldr	r2, [r3, #32]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	441a      	add	r2, r3
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2203      	movs	r2, #3
 800d65e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d662:	e006      	b.n	800d672 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f81d 	bl	800d6ac <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2204      	movs	r2, #4
 800d676:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d686:	2300      	movs	r3, #0
 800d688:	2200      	movs	r2, #0
 800d68a:	f002 f88d 	bl	800f7a8 <osMessageQueuePut>
      break;
 800d68e:	bf00      	nop
  }
}
 800d690:	bf00      	nop
 800d692:	3718      	adds	r7, #24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d101      	bne.n	800d6ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	e044      	b.n	800d776 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	79fa      	ldrb	r2, [r7, #7]
 800d6f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 f841 	bl	800d78c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800d738:	2200      	movs	r2, #0
 800d73a:	2104      	movs	r1, #4
 800d73c:	2010      	movs	r0, #16
 800d73e:	f001 ffad 	bl	800f69c <osMessageQueueNew>
 800d742:	4602      	mov	r2, r0
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800d74a:	4b0d      	ldr	r3, [pc, #52]	; (800d780 <USBH_Init+0xac>)
 800d74c:	4a0d      	ldr	r2, [pc, #52]	; (800d784 <USBH_Init+0xb0>)
 800d74e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800d750:	4b0b      	ldr	r3, [pc, #44]	; (800d780 <USBH_Init+0xac>)
 800d752:	2280      	movs	r2, #128	; 0x80
 800d754:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800d756:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <USBH_Init+0xac>)
 800d758:	2218      	movs	r2, #24
 800d75a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800d75c:	4a08      	ldr	r2, [pc, #32]	; (800d780 <USBH_Init+0xac>)
 800d75e:	68f9      	ldr	r1, [r7, #12]
 800d760:	4809      	ldr	r0, [pc, #36]	; (800d788 <USBH_Init+0xb4>)
 800d762:	f001 fdb3 	bl	800f2cc <osThreadNew>
 800d766:	4602      	mov	r2, r0
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f005 f852 	bl	8012818 <USBH_LL_Init>

  return USBH_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	200053c4 	.word	0x200053c4
 800d784:	080135b0 	.word	0x080135b0
 800d788:	0800e3f5 	.word	0x0800e3f5

0800d78c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d794:	2300      	movs	r3, #0
 800d796:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d798:	2300      	movs	r3, #0
 800d79a:	60fb      	str	r3, [r7, #12]
 800d79c:	e009      	b.n	800d7b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	33e0      	adds	r3, #224	; 0xe0
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b0e      	cmp	r3, #14
 800d7b6:	d9f2      	bls.n	800d79e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	e009      	b.n	800d7d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7d8:	d3f1      	bcc.n	800d7be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2240      	movs	r2, #64	; 0x40
 800d7fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d016      	beq.n	800d876 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10e      	bne.n	800d870 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d858:	1c59      	adds	r1, r3, #1
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	33de      	adds	r3, #222	; 0xde
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	73fb      	strb	r3, [r7, #15]
 800d86e:	e004      	b.n	800d87a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d870:	2302      	movs	r3, #2
 800d872:	73fb      	strb	r3, [r7, #15]
 800d874:	e001      	b.n	800d87a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d876:	2302      	movs	r3, #2
 800d878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	460b      	mov	r3, r1
 800d892:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d89e:	78fa      	ldrb	r2, [r7, #3]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d204      	bcs.n	800d8ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	78fa      	ldrb	r2, [r7, #3]
 800d8a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d8ac:	e001      	b.n	800d8b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3714      	adds	r7, #20
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b087      	sub	sp, #28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	4608      	mov	r0, r1
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	70fb      	strb	r3, [r7, #3]
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	70bb      	strb	r3, [r7, #2]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d8e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d8ea:	e025      	b.n	800d938 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	221a      	movs	r2, #26
 800d8f0:	fb02 f303 	mul.w	r3, r2, r3
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	795b      	ldrb	r3, [r3, #5]
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	429a      	cmp	r2, r3
 800d906:	d002      	beq.n	800d90e <USBH_FindInterface+0x4e>
 800d908:	78fb      	ldrb	r3, [r7, #3]
 800d90a:	2bff      	cmp	r3, #255	; 0xff
 800d90c:	d111      	bne.n	800d932 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d912:	78ba      	ldrb	r2, [r7, #2]
 800d914:	429a      	cmp	r2, r3
 800d916:	d002      	beq.n	800d91e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d918:	78bb      	ldrb	r3, [r7, #2]
 800d91a:	2bff      	cmp	r3, #255	; 0xff
 800d91c:	d109      	bne.n	800d932 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d922:	787a      	ldrb	r2, [r7, #1]
 800d924:	429a      	cmp	r2, r3
 800d926:	d002      	beq.n	800d92e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d928:	787b      	ldrb	r3, [r7, #1]
 800d92a:	2bff      	cmp	r3, #255	; 0xff
 800d92c:	d101      	bne.n	800d932 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	e006      	b.n	800d940 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	3301      	adds	r3, #1
 800d936:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d938:	7dfb      	ldrb	r3, [r7, #23]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d9d6      	bls.n	800d8ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d93e:	23ff      	movs	r3, #255	; 0xff
}
 800d940:	4618      	mov	r0, r3
 800d942:	371c      	adds	r7, #28
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f004 ff9b 	bl	8012890 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d95a:	2101      	movs	r1, #1
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f005 f8b2 	bl	8012ac6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b088      	sub	sp, #32
 800d970:	af04      	add	r7, sp, #16
 800d972:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d974:	2302      	movs	r3, #2
 800d976:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b01      	cmp	r3, #1
 800d986:	d102      	bne.n	800d98e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2203      	movs	r2, #3
 800d98c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b0b      	cmp	r3, #11
 800d996:	f200 823c 	bhi.w	800de12 <USBH_Process+0x4a6>
 800d99a:	a201      	add	r2, pc, #4	; (adr r2, 800d9a0 <USBH_Process+0x34>)
 800d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a0:	0800d9d1 	.word	0x0800d9d1
 800d9a4:	0800da1f 	.word	0x0800da1f
 800d9a8:	0800daa3 	.word	0x0800daa3
 800d9ac:	0800dd91 	.word	0x0800dd91
 800d9b0:	0800de13 	.word	0x0800de13
 800d9b4:	0800db63 	.word	0x0800db63
 800d9b8:	0800dd1b 	.word	0x0800dd1b
 800d9bc:	0800dbb5 	.word	0x0800dbb5
 800d9c0:	0800dbf1 	.word	0x0800dbf1
 800d9c4:	0800dc2b 	.word	0x0800dc2b
 800d9c8:	0800dc73 	.word	0x0800dc73
 800d9cc:	0800dd79 	.word	0x0800dd79
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 821c 	beq.w	800de16 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d9e4:	20c8      	movs	r0, #200	; 0xc8
 800d9e6:	f005 f8b8 	bl	8012b5a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f004 ffab 	bl	8012946 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da14:	2300      	movs	r3, #0
 800da16:	2200      	movs	r2, #0
 800da18:	f001 fec6 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800da1c:	e1fb      	b.n	800de16 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800da24:	2b01      	cmp	r3, #1
 800da26:	d107      	bne.n	800da38 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2202      	movs	r2, #2
 800da34:	701a      	strb	r2, [r3, #0]
 800da36:	e025      	b.n	800da84 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800da3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da42:	d914      	bls.n	800da6e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800da4a:	3301      	adds	r3, #1
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d903      	bls.n	800da66 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	220d      	movs	r2, #13
 800da62:	701a      	strb	r2, [r3, #0]
 800da64:	e00e      	b.n	800da84 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	701a      	strb	r2, [r3, #0]
 800da6c:	e00a      	b.n	800da84 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800da74:	f103 020a 	add.w	r2, r3, #10
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800da7e:	200a      	movs	r0, #10
 800da80:	f005 f86b 	bl	8012b5a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da98:	2300      	movs	r3, #0
 800da9a:	2200      	movs	r2, #0
 800da9c:	f001 fe84 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800daa0:	e1c0      	b.n	800de24 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d005      	beq.n	800dab8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dab2:	2104      	movs	r1, #4
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800dab8:	2064      	movs	r0, #100	; 0x64
 800daba:	f005 f84e 	bl	8012b5a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f004 ff1c 	bl	80128fc <USBH_LL_GetSpeed>
 800dac4:	4603      	mov	r3, r0
 800dac6:	461a      	mov	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2205      	movs	r2, #5
 800dad2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800dad4:	2100      	movs	r1, #0
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f001 fb23 	bl	800f122 <USBH_AllocPipe>
 800dadc:	4603      	mov	r3, r0
 800dade:	461a      	mov	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800dae4:	2180      	movs	r1, #128	; 0x80
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f001 fb1b 	bl	800f122 <USBH_AllocPipe>
 800daec:	4603      	mov	r3, r0
 800daee:	461a      	mov	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	7919      	ldrb	r1, [r3, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800db08:	b292      	uxth	r2, r2
 800db0a:	9202      	str	r2, [sp, #8]
 800db0c:	2200      	movs	r2, #0
 800db0e:	9201      	str	r2, [sp, #4]
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	4603      	mov	r3, r0
 800db14:	2280      	movs	r2, #128	; 0x80
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f001 fad4 	bl	800f0c4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7959      	ldrb	r1, [r3, #5]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800db30:	b292      	uxth	r2, r2
 800db32:	9202      	str	r2, [sp, #8]
 800db34:	2200      	movs	r2, #0
 800db36:	9201      	str	r2, [sp, #4]
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	4603      	mov	r3, r0
 800db3c:	2200      	movs	r2, #0
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f001 fac0 	bl	800f0c4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db58:	2300      	movs	r3, #0
 800db5a:	2200      	movs	r2, #0
 800db5c:	f001 fe24 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800db60:	e160      	b.n	800de24 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f964 	bl	800de30 <USBH_HandleEnum>
 800db68:	4603      	mov	r3, r0
 800db6a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	f040 8152 	bne.w	800de1a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800db84:	2b01      	cmp	r3, #1
 800db86:	d103      	bne.n	800db90 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2208      	movs	r2, #8
 800db8c:	701a      	strb	r2, [r3, #0]
 800db8e:	e002      	b.n	800db96 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2207      	movs	r2, #7
 800db94:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2205      	movs	r2, #5
 800db9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbaa:	2300      	movs	r3, #0
 800dbac:	2200      	movs	r2, #0
 800dbae:	f001 fdfb 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800dbb2:	e132      	b.n	800de1a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 812f 	beq.w	800de1e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbc6:	2101      	movs	r1, #1
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2208      	movs	r2, #8
 800dbd0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2205      	movs	r2, #5
 800dbd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f001 fddd 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800dbee:	e116      	b.n	800de1e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fcf8 	bl	800e5f0 <USBH_SetCfg>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d102      	bne.n	800dc0c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2209      	movs	r2, #9
 800dc0a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc20:	2300      	movs	r3, #0
 800dc22:	2200      	movs	r2, #0
 800dc24:	f001 fdc0 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800dc28:	e0fc      	b.n	800de24 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800dc30:	f003 0320 	and.w	r3, r3, #32
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00a      	beq.n	800dc4e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800dc38:	2101      	movs	r1, #1
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 fcfb 	bl	800e636 <USBH_SetFeature>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	220a      	movs	r2, #10
 800dc4a:	701a      	strb	r2, [r3, #0]
 800dc4c:	e002      	b.n	800dc54 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	220a      	movs	r2, #10
 800dc52:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc68:	2300      	movs	r3, #0
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f001 fd9c 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800dc70:	e0d8      	b.n	800de24 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d03f      	beq.n	800dcfc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dc84:	2300      	movs	r3, #0
 800dc86:	73fb      	strb	r3, [r7, #15]
 800dc88:	e016      	b.n	800dcb8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800dc8a:	7bfa      	ldrb	r2, [r7, #15]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	32de      	adds	r2, #222	; 0xde
 800dc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc94:	791a      	ldrb	r2, [r3, #4]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d108      	bne.n	800dcb2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800dca0:	7bfa      	ldrb	r2, [r7, #15]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	32de      	adds	r2, #222	; 0xde
 800dca6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800dcb0:	e005      	b.n	800dcbe <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	73fb      	strb	r3, [r7, #15]
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d0e5      	beq.n	800dc8a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d016      	beq.n	800dcf6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	4798      	blx	r3
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d109      	bne.n	800dcee <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2206      	movs	r2, #6
 800dcde:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dce6:	2103      	movs	r1, #3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	4798      	blx	r3
 800dcec:	e006      	b.n	800dcfc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	220d      	movs	r2, #13
 800dcf2:	701a      	strb	r2, [r3, #0]
 800dcf4:	e002      	b.n	800dcfc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	220d      	movs	r2, #13
 800dcfa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2205      	movs	r2, #5
 800dd00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd10:	2300      	movs	r3, #0
 800dd12:	2200      	movs	r2, #0
 800dd14:	f001 fd48 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800dd18:	e084      	b.n	800de24 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d017      	beq.n	800dd54 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
 800dd30:	4603      	mov	r3, r0
 800dd32:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d103      	bne.n	800dd44 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	220b      	movs	r2, #11
 800dd40:	701a      	strb	r2, [r3, #0]
 800dd42:	e00a      	b.n	800dd5a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d106      	bne.n	800dd5a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	220d      	movs	r2, #13
 800dd50:	701a      	strb	r2, [r3, #0]
 800dd52:	e002      	b.n	800dd5a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	220d      	movs	r2, #13
 800dd58:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2205      	movs	r2, #5
 800dd5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd6e:	2300      	movs	r3, #0
 800dd70:	2200      	movs	r2, #0
 800dd72:	f001 fd19 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800dd76:	e055      	b.n	800de24 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d04f      	beq.n	800de22 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	4798      	blx	r3
      }
      break;
 800dd8e:	e048      	b.n	800de22 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff fcf7 	bl	800d78c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d009      	beq.n	800ddbc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d005      	beq.n	800ddd2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddcc:	2105      	movs	r1, #5
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d107      	bne.n	800ddee <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff fdb0 	bl	800d94c <USBH_Start>
 800ddec:	e002      	b.n	800ddf4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f004 fd4e 	bl	8012890 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de08:	2300      	movs	r3, #0
 800de0a:	2200      	movs	r2, #0
 800de0c:	f001 fccc 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      break;
 800de10:	e008      	b.n	800de24 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800de12:	bf00      	nop
 800de14:	e006      	b.n	800de24 <USBH_Process+0x4b8>
      break;
 800de16:	bf00      	nop
 800de18:	e004      	b.n	800de24 <USBH_Process+0x4b8>
      break;
 800de1a:	bf00      	nop
 800de1c:	e002      	b.n	800de24 <USBH_Process+0x4b8>
    break;
 800de1e:	bf00      	nop
 800de20:	e000      	b.n	800de24 <USBH_Process+0x4b8>
      break;
 800de22:	bf00      	nop
  }
  return USBH_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop

0800de30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af04      	add	r7, sp, #16
 800de36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800de38:	2301      	movs	r3, #1
 800de3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800de3c:	2301      	movs	r3, #1
 800de3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	2b07      	cmp	r3, #7
 800de46:	f200 8208 	bhi.w	800e25a <USBH_HandleEnum+0x42a>
 800de4a:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <USBH_HandleEnum+0x20>)
 800de4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de50:	0800de71 	.word	0x0800de71
 800de54:	0800df2f 	.word	0x0800df2f
 800de58:	0800df99 	.word	0x0800df99
 800de5c:	0800e027 	.word	0x0800e027
 800de60:	0800e091 	.word	0x0800e091
 800de64:	0800e101 	.word	0x0800e101
 800de68:	0800e19d 	.word	0x0800e19d
 800de6c:	0800e21b 	.word	0x0800e21b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800de70:	2108      	movs	r1, #8
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 faec 	bl	800e450 <USBH_Get_DevDesc>
 800de78:	4603      	mov	r3, r0
 800de7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800de7c:	7bbb      	ldrb	r3, [r7, #14]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d130      	bne.n	800dee4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7919      	ldrb	r1, [r3, #4]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800dea6:	b292      	uxth	r2, r2
 800dea8:	9202      	str	r2, [sp, #8]
 800deaa:	2200      	movs	r2, #0
 800deac:	9201      	str	r2, [sp, #4]
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4603      	mov	r3, r0
 800deb2:	2280      	movs	r2, #128	; 0x80
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f001 f905 	bl	800f0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	7959      	ldrb	r1, [r3, #5]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dece:	b292      	uxth	r2, r2
 800ded0:	9202      	str	r2, [sp, #8]
 800ded2:	2200      	movs	r2, #0
 800ded4:	9201      	str	r2, [sp, #4]
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	4603      	mov	r3, r0
 800deda:	2200      	movs	r2, #0
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f001 f8f1 	bl	800f0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dee2:	e1bc      	b.n	800e25e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dee4:	7bbb      	ldrb	r3, [r7, #14]
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	f040 81b9 	bne.w	800e25e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800def2:	3301      	adds	r3, #1
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df02:	2b03      	cmp	r3, #3
 800df04:	d903      	bls.n	800df0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	220d      	movs	r2, #13
 800df0a:	701a      	strb	r2, [r3, #0]
      break;
 800df0c:	e1a7      	b.n	800e25e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	795b      	ldrb	r3, [r3, #5]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f001 f925 	bl	800f164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	791b      	ldrb	r3, [r3, #4]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f001 f91f 	bl	800f164 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	701a      	strb	r2, [r3, #0]
      break;
 800df2c:	e197      	b.n	800e25e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800df2e:	2112      	movs	r1, #18
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fa8d 	bl	800e450 <USBH_Get_DevDesc>
 800df36:	4603      	mov	r3, r0
 800df38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800df3a:	7bbb      	ldrb	r3, [r7, #14]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d103      	bne.n	800df48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2202      	movs	r2, #2
 800df44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800df46:	e18c      	b.n	800e262 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	2b03      	cmp	r3, #3
 800df4c:	f040 8189 	bne.w	800e262 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df56:	3301      	adds	r3, #1
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df66:	2b03      	cmp	r3, #3
 800df68:	d903      	bls.n	800df72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	220d      	movs	r2, #13
 800df6e:	701a      	strb	r2, [r3, #0]
      break;
 800df70:	e177      	b.n	800e262 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	795b      	ldrb	r3, [r3, #5]
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f001 f8f3 	bl	800f164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	791b      	ldrb	r3, [r3, #4]
 800df82:	4619      	mov	r1, r3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f001 f8ed 	bl	800f164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
      break;
 800df96:	e164      	b.n	800e262 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800df98:	2101      	movs	r1, #1
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fb04 	bl	800e5a8 <USBH_SetAddress>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dfa4:	7bbb      	ldrb	r3, [r7, #14]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d132      	bne.n	800e010 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800dfaa:	2002      	movs	r0, #2
 800dfac:	f004 fdd5 	bl	8012b5a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2203      	movs	r2, #3
 800dfbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	7919      	ldrb	r1, [r3, #4]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dfd2:	b292      	uxth	r2, r2
 800dfd4:	9202      	str	r2, [sp, #8]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	9201      	str	r2, [sp, #4]
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2280      	movs	r2, #128	; 0x80
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f001 f86f 	bl	800f0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	7959      	ldrb	r1, [r3, #5]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dffa:	b292      	uxth	r2, r2
 800dffc:	9202      	str	r2, [sp, #8]
 800dffe:	2200      	movs	r2, #0
 800e000:	9201      	str	r2, [sp, #4]
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	4603      	mov	r3, r0
 800e006:	2200      	movs	r2, #0
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f001 f85b 	bl	800f0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e00e:	e12a      	b.n	800e266 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	2b03      	cmp	r3, #3
 800e014:	f040 8127 	bne.w	800e266 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	220d      	movs	r2, #13
 800e01c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	705a      	strb	r2, [r3, #1]
      break;
 800e024:	e11f      	b.n	800e266 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e026:	2109      	movs	r1, #9
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fa39 	bl	800e4a0 <USBH_Get_CfgDesc>
 800e02e:	4603      	mov	r3, r0
 800e030:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d103      	bne.n	800e040 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2204      	movs	r2, #4
 800e03c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e03e:	e114      	b.n	800e26a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e040:	7bbb      	ldrb	r3, [r7, #14]
 800e042:	2b03      	cmp	r3, #3
 800e044:	f040 8111 	bne.w	800e26a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e04e:	3301      	adds	r3, #1
 800e050:	b2da      	uxtb	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d903      	bls.n	800e06a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	220d      	movs	r2, #13
 800e066:	701a      	strb	r2, [r3, #0]
      break;
 800e068:	e0ff      	b.n	800e26a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	795b      	ldrb	r3, [r3, #5]
 800e06e:	4619      	mov	r1, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f001 f877 	bl	800f164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	791b      	ldrb	r3, [r3, #4]
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f001 f871 	bl	800f164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	701a      	strb	r2, [r3, #0]
      break;
 800e08e:	e0ec      	b.n	800e26a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fa01 	bl	800e4a0 <USBH_Get_CfgDesc>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e0a2:	7bbb      	ldrb	r3, [r7, #14]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d103      	bne.n	800e0b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2205      	movs	r2, #5
 800e0ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e0ae:	e0de      	b.n	800e26e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e0b0:	7bbb      	ldrb	r3, [r7, #14]
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	f040 80db 	bne.w	800e26e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e0be:	3301      	adds	r3, #1
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	d903      	bls.n	800e0da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	220d      	movs	r2, #13
 800e0d6:	701a      	strb	r2, [r3, #0]
      break;
 800e0d8:	e0c9      	b.n	800e26e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	795b      	ldrb	r3, [r3, #5]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f001 f83f 	bl	800f164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	791b      	ldrb	r3, [r3, #4]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 f839 	bl	800f164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	701a      	strb	r2, [r3, #0]
      break;
 800e0fe:	e0b6      	b.n	800e26e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e106:	2b00      	cmp	r3, #0
 800e108:	d036      	beq.n	800e178 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e116:	23ff      	movs	r3, #255	; 0xff
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 f9e5 	bl	800e4e8 <USBH_Get_StringDesc>
 800e11e:	4603      	mov	r3, r0
 800e120:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e122:	7bbb      	ldrb	r3, [r7, #14]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d111      	bne.n	800e14c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2206      	movs	r2, #6
 800e12c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2205      	movs	r2, #5
 800e132:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e142:	2300      	movs	r3, #0
 800e144:	2200      	movs	r2, #0
 800e146:	f001 fb2f 	bl	800f7a8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e14a:	e092      	b.n	800e272 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e14c:	7bbb      	ldrb	r3, [r7, #14]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	f040 808f 	bne.w	800e272 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2206      	movs	r2, #6
 800e158:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2205      	movs	r2, #5
 800e15e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e16e:	2300      	movs	r3, #0
 800e170:	2200      	movs	r2, #0
 800e172:	f001 fb19 	bl	800f7a8 <osMessageQueuePut>
      break;
 800e176:	e07c      	b.n	800e272 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2206      	movs	r2, #6
 800e17c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2205      	movs	r2, #5
 800e182:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e192:	2300      	movs	r3, #0
 800e194:	2200      	movs	r2, #0
 800e196:	f001 fb07 	bl	800f7a8 <osMessageQueuePut>
      break;
 800e19a:	e06a      	b.n	800e272 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d027      	beq.n	800e1f6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e1b2:	23ff      	movs	r3, #255	; 0xff
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f997 	bl	800e4e8 <USBH_Get_StringDesc>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e1be:	7bbb      	ldrb	r3, [r7, #14]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d103      	bne.n	800e1cc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2207      	movs	r2, #7
 800e1c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e1ca:	e054      	b.n	800e276 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e1cc:	7bbb      	ldrb	r3, [r7, #14]
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d151      	bne.n	800e276 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2207      	movs	r2, #7
 800e1d6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2205      	movs	r2, #5
 800e1dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f001 fada 	bl	800f7a8 <osMessageQueuePut>
      break;
 800e1f4:	e03f      	b.n	800e276 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2207      	movs	r2, #7
 800e1fa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2205      	movs	r2, #5
 800e200:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e210:	2300      	movs	r3, #0
 800e212:	2200      	movs	r2, #0
 800e214:	f001 fac8 	bl	800f7a8 <osMessageQueuePut>
      break;
 800e218:	e02d      	b.n	800e276 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e220:	2b00      	cmp	r3, #0
 800e222:	d017      	beq.n	800e254 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e230:	23ff      	movs	r3, #255	; 0xff
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f958 	bl	800e4e8 <USBH_Get_StringDesc>
 800e238:	4603      	mov	r3, r0
 800e23a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e246:	e018      	b.n	800e27a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e248:	7bbb      	ldrb	r3, [r7, #14]
 800e24a:	2b03      	cmp	r3, #3
 800e24c:	d115      	bne.n	800e27a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	73fb      	strb	r3, [r7, #15]
      break;
 800e252:	e012      	b.n	800e27a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e254:	2300      	movs	r3, #0
 800e256:	73fb      	strb	r3, [r7, #15]
      break;
 800e258:	e00f      	b.n	800e27a <USBH_HandleEnum+0x44a>

    default:
      break;
 800e25a:	bf00      	nop
 800e25c:	e00e      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e25e:	bf00      	nop
 800e260:	e00c      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e262:	bf00      	nop
 800e264:	e00a      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e266:	bf00      	nop
 800e268:	e008      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e26a:	bf00      	nop
 800e26c:	e006      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e26e:	bf00      	nop
 800e270:	e004      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e272:	bf00      	nop
 800e274:	e002      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e276:	bf00      	nop
 800e278:	e000      	b.n	800e27c <USBH_HandleEnum+0x44c>
      break;
 800e27a:	bf00      	nop
  }
  return Status;
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop

0800e288 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e29a:	bf00      	nop
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b082      	sub	sp, #8
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2b4:	1c5a      	adds	r2, r3, #1
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f804 	bl	800e2ca <USBH_HandleSof>
}
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	2b0b      	cmp	r3, #11
 800e2da:	d10a      	bne.n	800e2f2 <USBH_HandleSof+0x28>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d005      	beq.n	800e2f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	4798      	blx	r3
  }
}
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b082      	sub	sp, #8
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e31e:	2300      	movs	r3, #0
 800e320:	2200      	movs	r2, #0
 800e322:	f001 fa41 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif

  return;
 800e326:	bf00      	nop
}
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e32e:	b480      	push	{r7}
 800e330:	b083      	sub	sp, #12
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e33e:	bf00      	nop
}
 800e340:	370c      	adds	r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b082      	sub	sp, #8
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2201      	movs	r2, #1
 800e356:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e37e:	2300      	movs	r3, #0
 800e380:	2200      	movs	r2, #0
 800e382:	f001 fa11 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f004 fa88 	bl	80128c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	791b      	ldrb	r3, [r3, #4]
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 fed1 	bl	800f164 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	795b      	ldrb	r3, [r3, #5]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fecb 	bl	800f164 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f001 f9df 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e408:	f04f 33ff 	mov.w	r3, #4294967295
 800e40c:	2200      	movs	r2, #0
 800e40e:	f001 fa3f 	bl	800f890 <osMessageQueueGet>
 800e412:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1f0      	bne.n	800e3fc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff faa6 	bl	800d96c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e420:	e7ec      	b.n	800e3fc <USBH_Process_OS+0x8>

0800e422 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e43e:	2300      	movs	r3, #0
 800e440:	2200      	movs	r2, #0
 800e442:	f001 f9b1 	bl	800f7a8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af02      	add	r7, sp, #8
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e462:	78fb      	ldrb	r3, [r7, #3]
 800e464:	b29b      	uxth	r3, r3
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	4613      	mov	r3, r2
 800e46a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e46e:	2100      	movs	r1, #0
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 f864 	bl	800e53e <USBH_GetDescriptor>
 800e476:	4603      	mov	r3, r0
 800e478:	73fb      	strb	r3, [r7, #15]
 800e47a:	7bfb      	ldrb	r3, [r7, #15]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e48c:	78fa      	ldrb	r2, [r7, #3]
 800e48e:	b292      	uxth	r2, r2
 800e490:	4619      	mov	r1, r3
 800e492:	f000 f918 	bl	800e6c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e496:	7bfb      	ldrb	r3, [r7, #15]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af02      	add	r7, sp, #8
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	331c      	adds	r3, #28
 800e4b0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e4b2:	887b      	ldrh	r3, [r7, #2]
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4bc:	2100      	movs	r1, #0
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f83d 	bl	800e53e <USBH_GetDescriptor>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	72fb      	strb	r3, [r7, #11]
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d107      	bne.n	800e4de <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e4d4:	887a      	ldrh	r2, [r7, #2]
 800e4d6:	68f9      	ldr	r1, [r7, #12]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 f964 	bl	800e7a6 <USBH_ParseCfgDesc>
  }

  return status;
 800e4de:	7afb      	ldrb	r3, [r7, #11]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	607a      	str	r2, [r7, #4]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	72fb      	strb	r3, [r7, #11]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800e4fc:	7afb      	ldrb	r3, [r7, #11]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e504:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e50c:	893b      	ldrh	r3, [r7, #8]
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	460b      	mov	r3, r1
 800e512:	2100      	movs	r1, #0
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 f812 	bl	800e53e <USBH_GetDescriptor>
 800e51a:	4603      	mov	r3, r0
 800e51c:	75fb      	strb	r3, [r7, #23]
 800e51e:	7dfb      	ldrb	r3, [r7, #23]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d107      	bne.n	800e534 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e52a:	893a      	ldrh	r2, [r7, #8]
 800e52c:	6879      	ldr	r1, [r7, #4]
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 fa37 	bl	800e9a2 <USBH_ParseStringDesc>
  }

  return status;
 800e534:	7dfb      	ldrb	r3, [r7, #23]
}
 800e536:	4618      	mov	r0, r3
 800e538:	3718      	adds	r7, #24
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	60f8      	str	r0, [r7, #12]
 800e546:	607b      	str	r3, [r7, #4]
 800e548:	460b      	mov	r3, r1
 800e54a:	72fb      	strb	r3, [r7, #11]
 800e54c:	4613      	mov	r3, r2
 800e54e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	789b      	ldrb	r3, [r3, #2]
 800e554:	2b01      	cmp	r3, #1
 800e556:	d11c      	bne.n	800e592 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e558:	7afb      	ldrb	r3, [r7, #11]
 800e55a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2206      	movs	r2, #6
 800e568:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	893a      	ldrh	r2, [r7, #8]
 800e56e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e570:	893b      	ldrh	r3, [r7, #8]
 800e572:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e57a:	d104      	bne.n	800e586 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f240 4209 	movw	r2, #1033	; 0x409
 800e582:	829a      	strh	r2, [r3, #20]
 800e584:	e002      	b.n	800e58c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	8b3a      	ldrh	r2, [r7, #24]
 800e590:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e592:	8b3b      	ldrh	r3, [r7, #24]
 800e594:	461a      	mov	r2, r3
 800e596:	6879      	ldr	r1, [r7, #4]
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f000 fa50 	bl	800ea3e <USBH_CtlReq>
 800e59e:	4603      	mov	r3, r0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	789b      	ldrb	r3, [r3, #2]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d10f      	bne.n	800e5dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2205      	movs	r2, #5
 800e5c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e5c8:	78fb      	ldrb	r3, [r7, #3]
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2100      	movs	r1, #0
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fa2c 	bl	800ea3e <USBH_CtlReq>
 800e5e6:	4603      	mov	r3, r0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	789b      	ldrb	r3, [r3, #2]
 800e600:	2b01      	cmp	r3, #1
 800e602:	d10e      	bne.n	800e622 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2209      	movs	r2, #9
 800e60e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	887a      	ldrh	r2, [r7, #2]
 800e614:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e622:	2200      	movs	r2, #0
 800e624:	2100      	movs	r1, #0
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 fa09 	bl	800ea3e <USBH_CtlReq>
 800e62c:	4603      	mov	r3, r0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	789b      	ldrb	r3, [r3, #2]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d10f      	bne.n	800e66a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2203      	movs	r2, #3
 800e654:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e656:	78fb      	ldrb	r3, [r7, #3]
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e66a:	2200      	movs	r2, #0
 800e66c:	2100      	movs	r1, #0
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f9e5 	bl	800ea3e <USBH_CtlReq>
 800e674:	4603      	mov	r3, r0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
 800e686:	460b      	mov	r3, r1
 800e688:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	789b      	ldrb	r3, [r3, #2]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d10f      	bne.n	800e6b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2202      	movs	r2, #2
 800e696:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e6a4:	78fb      	ldrb	r3, [r7, #3]
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f9c1 	bl	800ea3e <USBH_CtlReq>
 800e6bc:	4603      	mov	r3, r0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b085      	sub	sp, #20
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	60f8      	str	r0, [r7, #12]
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	781a      	ldrb	r2, [r3, #0]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	785a      	ldrb	r2, [r3, #1]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	3302      	adds	r3, #2
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	3303      	adds	r3, #3
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	791a      	ldrb	r2, [r3, #4]
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	795a      	ldrb	r2, [r3, #5]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	799a      	ldrb	r2, [r3, #6]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	79da      	ldrb	r2, [r3, #7]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e720:	88fb      	ldrh	r3, [r7, #6]
 800e722:	2b08      	cmp	r3, #8
 800e724:	d939      	bls.n	800e79a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	3308      	adds	r3, #8
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	3309      	adds	r3, #9
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	b29b      	uxth	r3, r3
 800e736:	021b      	lsls	r3, r3, #8
 800e738:	b29b      	uxth	r3, r3
 800e73a:	4313      	orrs	r3, r2
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	330a      	adds	r3, #10
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	b29a      	uxth	r2, r3
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	330b      	adds	r3, #11
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	b29b      	uxth	r3, r3
 800e752:	021b      	lsls	r3, r3, #8
 800e754:	b29b      	uxth	r3, r3
 800e756:	4313      	orrs	r3, r2
 800e758:	b29a      	uxth	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	330c      	adds	r3, #12
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	b29a      	uxth	r2, r3
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	330d      	adds	r3, #13
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	021b      	lsls	r3, r3, #8
 800e770:	b29b      	uxth	r3, r3
 800e772:	4313      	orrs	r3, r2
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	7b9a      	ldrb	r2, [r3, #14]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	7bda      	ldrb	r2, [r3, #15]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	7c1a      	ldrb	r2, [r3, #16]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	7c5a      	ldrb	r2, [r3, #17]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	745a      	strb	r2, [r3, #17]
  }
}
 800e79a:	bf00      	nop
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b08a      	sub	sp, #40	; 0x28
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	60f8      	str	r0, [r7, #12]
 800e7ae:	60b9      	str	r1, [r7, #8]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	781a      	ldrb	r2, [r3, #0]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	785a      	ldrb	r2, [r3, #1]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	3302      	adds	r3, #2
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	3303      	adds	r3, #3
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	021b      	lsls	r3, r3, #8
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	791a      	ldrb	r2, [r3, #4]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	795a      	ldrb	r2, [r3, #5]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	799a      	ldrb	r2, [r3, #6]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	79da      	ldrb	r2, [r3, #7]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	7a1a      	ldrb	r2, [r3, #8]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e81c:	88fb      	ldrh	r3, [r7, #6]
 800e81e:	2b09      	cmp	r3, #9
 800e820:	d95f      	bls.n	800e8e2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e822:	2309      	movs	r3, #9
 800e824:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e826:	2300      	movs	r3, #0
 800e828:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e82a:	e051      	b.n	800e8d0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e82c:	f107 0316 	add.w	r3, r7, #22
 800e830:	4619      	mov	r1, r3
 800e832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e834:	f000 f8e8 	bl	800ea08 <USBH_GetNextDesc>
 800e838:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	785b      	ldrb	r3, [r3, #1]
 800e83e:	2b04      	cmp	r3, #4
 800e840:	d146      	bne.n	800e8d0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e846:	221a      	movs	r2, #26
 800e848:	fb02 f303 	mul.w	r3, r2, r3
 800e84c:	3308      	adds	r3, #8
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	4413      	add	r3, r2
 800e852:	3302      	adds	r3, #2
 800e854:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e858:	69f8      	ldr	r0, [r7, #28]
 800e85a:	f000 f846 	bl	800e8ea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e85e:	2300      	movs	r3, #0
 800e860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e864:	2300      	movs	r3, #0
 800e866:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e868:	e022      	b.n	800e8b0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e86a:	f107 0316 	add.w	r3, r7, #22
 800e86e:	4619      	mov	r1, r3
 800e870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e872:	f000 f8c9 	bl	800ea08 <USBH_GetNextDesc>
 800e876:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	785b      	ldrb	r3, [r3, #1]
 800e87c:	2b05      	cmp	r3, #5
 800e87e:	d117      	bne.n	800e8b0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e884:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e888:	3201      	adds	r2, #1
 800e88a:	00d2      	lsls	r2, r2, #3
 800e88c:	211a      	movs	r1, #26
 800e88e:	fb01 f303 	mul.w	r3, r1, r3
 800e892:	4413      	add	r3, r2
 800e894:	3308      	adds	r3, #8
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	4413      	add	r3, r2
 800e89a:	3304      	adds	r3, #4
 800e89c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800e89e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8a0:	69b8      	ldr	r0, [r7, #24]
 800e8a2:	f000 f851 	bl	800e948 <USBH_ParseEPDesc>
            ep_ix++;
 800e8a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	791b      	ldrb	r3, [r3, #4]
 800e8b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d204      	bcs.n	800e8c6 <USBH_ParseCfgDesc+0x120>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	885a      	ldrh	r2, [r3, #2]
 800e8c0:	8afb      	ldrh	r3, [r7, #22]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d8d1      	bhi.n	800e86a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e8c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e8d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d804      	bhi.n	800e8e2 <USBH_ParseCfgDesc+0x13c>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	885a      	ldrh	r2, [r3, #2]
 800e8dc:	8afb      	ldrh	r3, [r7, #22]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d8a4      	bhi.n	800e82c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e8e2:	bf00      	nop
 800e8e4:	3728      	adds	r7, #40	; 0x28
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	781a      	ldrb	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	785a      	ldrb	r2, [r3, #1]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	789a      	ldrb	r2, [r3, #2]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	78da      	ldrb	r2, [r3, #3]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	791a      	ldrb	r2, [r3, #4]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	795a      	ldrb	r2, [r3, #5]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	799a      	ldrb	r2, [r3, #6]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	79da      	ldrb	r2, [r3, #7]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	7a1a      	ldrb	r2, [r3, #8]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	721a      	strb	r2, [r3, #8]
}
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	781a      	ldrb	r2, [r3, #0]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	785a      	ldrb	r2, [r3, #1]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	789a      	ldrb	r2, [r3, #2]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	78da      	ldrb	r2, [r3, #3]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	3304      	adds	r3, #4
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	b29a      	uxth	r2, r3
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	3305      	adds	r3, #5
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	b29b      	uxth	r3, r3
 800e982:	021b      	lsls	r3, r3, #8
 800e984:	b29b      	uxth	r3, r3
 800e986:	4313      	orrs	r3, r2
 800e988:	b29a      	uxth	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	799a      	ldrb	r2, [r3, #6]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	719a      	strb	r2, [r3, #6]
}
 800e996:	bf00      	nop
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr

0800e9a2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e9a2:	b480      	push	{r7}
 800e9a4:	b087      	sub	sp, #28
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	60f8      	str	r0, [r7, #12]
 800e9aa:	60b9      	str	r1, [r7, #8]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d120      	bne.n	800e9fc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	1e9a      	subs	r2, r3, #2
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	bf28      	it	cs
 800e9c6:	4613      	movcs	r3, r2
 800e9c8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3302      	adds	r3, #2
 800e9ce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	82fb      	strh	r3, [r7, #22]
 800e9d4:	e00b      	b.n	800e9ee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e9d6:	8afb      	ldrh	r3, [r7, #22]
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	4413      	add	r3, r2
 800e9dc:	781a      	ldrb	r2, [r3, #0]
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e9e8:	8afb      	ldrh	r3, [r7, #22]
 800e9ea:	3302      	adds	r3, #2
 800e9ec:	82fb      	strh	r3, [r7, #22]
 800e9ee:	8afa      	ldrh	r2, [r7, #22]
 800e9f0:	8abb      	ldrh	r3, [r7, #20]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d3ef      	bcc.n	800e9d6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	701a      	strb	r2, [r3, #0]
  }
}
 800e9fc:	bf00      	nop
 800e9fe:	371c      	adds	r7, #28
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	881a      	ldrh	r2, [r3, #0]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	4413      	add	r3, r2
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea30:	68fb      	ldr	r3, [r7, #12]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b086      	sub	sp, #24
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	60f8      	str	r0, [r7, #12]
 800ea46:	60b9      	str	r1, [r7, #8]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	789b      	ldrb	r3, [r3, #2]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d002      	beq.n	800ea5e <USBH_CtlReq+0x20>
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	d01d      	beq.n	800ea98 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ea5c:	e043      	b.n	800eae6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	88fa      	ldrh	r2, [r7, #6]
 800ea68:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2202      	movs	r2, #2
 800ea74:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ea76:	2301      	movs	r3, #1
 800ea78:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2203      	movs	r2, #3
 800ea7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ea8e:	2300      	movs	r3, #0
 800ea90:	2200      	movs	r2, #0
 800ea92:	f000 fe89 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ea96:	e026      	b.n	800eae6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f000 f829 	bl	800eaf0 <USBH_HandleControl>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <USBH_CtlReq+0x70>
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d106      	bne.n	800eabc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2201      	movs	r2, #1
 800eab2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	761a      	strb	r2, [r3, #24]
 800eaba:	e005      	b.n	800eac8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d102      	bne.n	800eac8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2201      	movs	r2, #1
 800eac6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2203      	movs	r2, #3
 800eacc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eadc:	2300      	movs	r3, #0
 800eade:	2200      	movs	r2, #0
 800eae0:	f000 fe62 	bl	800f7a8 <osMessageQueuePut>
      break;
 800eae4:	bf00      	nop
  }
  return status;
 800eae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af02      	add	r7, sp, #8
 800eaf6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eafc:	2300      	movs	r3, #0
 800eafe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7e1b      	ldrb	r3, [r3, #24]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	2b0a      	cmp	r3, #10
 800eb08:	f200 822b 	bhi.w	800ef62 <USBH_HandleControl+0x472>
 800eb0c:	a201      	add	r2, pc, #4	; (adr r2, 800eb14 <USBH_HandleControl+0x24>)
 800eb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb12:	bf00      	nop
 800eb14:	0800eb41 	.word	0x0800eb41
 800eb18:	0800eb5b 	.word	0x0800eb5b
 800eb1c:	0800ebfd 	.word	0x0800ebfd
 800eb20:	0800ec23 	.word	0x0800ec23
 800eb24:	0800ecaf 	.word	0x0800ecaf
 800eb28:	0800ecdb 	.word	0x0800ecdb
 800eb2c:	0800ed9d 	.word	0x0800ed9d
 800eb30:	0800edbf 	.word	0x0800edbf
 800eb34:	0800ee51 	.word	0x0800ee51
 800eb38:	0800ee79 	.word	0x0800ee79
 800eb3c:	0800ef0b 	.word	0x0800ef0b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f103 0110 	add.w	r1, r3, #16
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	795b      	ldrb	r3, [r3, #5]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 fa19 	bl	800ef84 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2202      	movs	r2, #2
 800eb56:	761a      	strb	r2, [r3, #24]
      break;
 800eb58:	e20e      	b.n	800ef78 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	795b      	ldrb	r3, [r3, #5]
 800eb5e:	4619      	mov	r1, r3
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f003 ff9d 	bl	8012aa0 <USBH_LL_GetURBState>
 800eb66:	4603      	mov	r3, r0
 800eb68:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800eb6a:	7bbb      	ldrb	r3, [r7, #14]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d12c      	bne.n	800ebca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	7c1b      	ldrb	r3, [r3, #16]
 800eb74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb78:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	8adb      	ldrh	r3, [r3, #22]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00a      	beq.n	800eb98 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800eb82:	7b7b      	ldrb	r3, [r7, #13]
 800eb84:	2b80      	cmp	r3, #128	; 0x80
 800eb86:	d103      	bne.n	800eb90 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2203      	movs	r2, #3
 800eb8c:	761a      	strb	r2, [r3, #24]
 800eb8e:	e00d      	b.n	800ebac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2205      	movs	r2, #5
 800eb94:	761a      	strb	r2, [r3, #24]
 800eb96:	e009      	b.n	800ebac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800eb98:	7b7b      	ldrb	r3, [r7, #13]
 800eb9a:	2b80      	cmp	r3, #128	; 0x80
 800eb9c:	d103      	bne.n	800eba6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2209      	movs	r2, #9
 800eba2:	761a      	strb	r2, [r3, #24]
 800eba4:	e002      	b.n	800ebac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2207      	movs	r2, #7
 800ebaa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2203      	movs	r2, #3
 800ebb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f000 fdf0 	bl	800f7a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ebc8:	e1cd      	b.n	800ef66 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ebca:	7bbb      	ldrb	r3, [r7, #14]
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	d003      	beq.n	800ebd8 <USBH_HandleControl+0xe8>
 800ebd0:	7bbb      	ldrb	r3, [r7, #14]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	f040 81c7 	bne.w	800ef66 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	220b      	movs	r2, #11
 800ebdc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2203      	movs	r2, #3
 800ebe2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f000 fdd7 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ebfa:	e1b4      	b.n	800ef66 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6899      	ldr	r1, [r3, #8]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	899a      	ldrh	r2, [r3, #12]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	791b      	ldrb	r3, [r3, #4]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f9f4 	bl	800f002 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2204      	movs	r2, #4
 800ec1e:	761a      	strb	r2, [r3, #24]
      break;
 800ec20:	e1aa      	b.n	800ef78 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	791b      	ldrb	r3, [r3, #4]
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f003 ff39 	bl	8012aa0 <USBH_LL_GetURBState>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ec32:	7bbb      	ldrb	r3, [r7, #14]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d110      	bne.n	800ec5a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2209      	movs	r2, #9
 800ec3c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2203      	movs	r2, #3
 800ec42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ec52:	2300      	movs	r3, #0
 800ec54:	2200      	movs	r2, #0
 800ec56:	f000 fda7 	bl	800f7a8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ec5a:	7bbb      	ldrb	r3, [r7, #14]
 800ec5c:	2b05      	cmp	r3, #5
 800ec5e:	d110      	bne.n	800ec82 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ec60:	2303      	movs	r3, #3
 800ec62:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2203      	movs	r2, #3
 800ec68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ec78:	2300      	movs	r3, #0
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f000 fd94 	bl	800f7a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ec80:	e173      	b.n	800ef6a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ec82:	7bbb      	ldrb	r3, [r7, #14]
 800ec84:	2b04      	cmp	r3, #4
 800ec86:	f040 8170 	bne.w	800ef6a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	220b      	movs	r2, #11
 800ec8e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2203      	movs	r2, #3
 800ec94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eca4:	2300      	movs	r3, #0
 800eca6:	2200      	movs	r2, #0
 800eca8:	f000 fd7e 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ecac:	e15d      	b.n	800ef6a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6899      	ldr	r1, [r3, #8]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	899a      	ldrh	r2, [r3, #12]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	7958      	ldrb	r0, [r3, #5]
 800ecba:	2301      	movs	r3, #1
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f979 	bl	800efb8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2206      	movs	r2, #6
 800ecd6:	761a      	strb	r2, [r3, #24]
      break;
 800ecd8:	e14e      	b.n	800ef78 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	795b      	ldrb	r3, [r3, #5]
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f003 fedd 	bl	8012aa0 <USBH_LL_GetURBState>
 800ece6:	4603      	mov	r3, r0
 800ece8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ecea:	7bbb      	ldrb	r3, [r7, #14]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d111      	bne.n	800ed14 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2207      	movs	r2, #7
 800ecf4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2203      	movs	r2, #3
 800ecfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f000 fd4b 	bl	800f7a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ed12:	e12c      	b.n	800ef6e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800ed14:	7bbb      	ldrb	r3, [r7, #14]
 800ed16:	2b05      	cmp	r3, #5
 800ed18:	d113      	bne.n	800ed42 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	220c      	movs	r2, #12
 800ed1e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ed20:	2303      	movs	r3, #3
 800ed22:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2203      	movs	r2, #3
 800ed28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f000 fd34 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ed40:	e115      	b.n	800ef6e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ed42:	7bbb      	ldrb	r3, [r7, #14]
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d111      	bne.n	800ed6c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2205      	movs	r2, #5
 800ed4c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2203      	movs	r2, #3
 800ed52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ed62:	2300      	movs	r3, #0
 800ed64:	2200      	movs	r2, #0
 800ed66:	f000 fd1f 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ed6a:	e100      	b.n	800ef6e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800ed6c:	7bbb      	ldrb	r3, [r7, #14]
 800ed6e:	2b04      	cmp	r3, #4
 800ed70:	f040 80fd 	bne.w	800ef6e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	220b      	movs	r2, #11
 800ed78:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2203      	movs	r2, #3
 800ed82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ed92:	2300      	movs	r3, #0
 800ed94:	2200      	movs	r2, #0
 800ed96:	f000 fd07 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ed9a:	e0e8      	b.n	800ef6e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	791b      	ldrb	r3, [r3, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	2100      	movs	r1, #0
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 f92c 	bl	800f002 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2208      	movs	r2, #8
 800edba:	761a      	strb	r2, [r3, #24]

      break;
 800edbc:	e0dc      	b.n	800ef78 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	791b      	ldrb	r3, [r3, #4]
 800edc2:	4619      	mov	r1, r3
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f003 fe6b 	bl	8012aa0 <USBH_LL_GetURBState>
 800edca:	4603      	mov	r3, r0
 800edcc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800edce:	7bbb      	ldrb	r3, [r7, #14]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d113      	bne.n	800edfc <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	220d      	movs	r2, #13
 800edd8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2203      	movs	r2, #3
 800ede2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800edf2:	2300      	movs	r3, #0
 800edf4:	2200      	movs	r2, #0
 800edf6:	f000 fcd7 	bl	800f7a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800edfa:	e0ba      	b.n	800ef72 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800edfc:	7bbb      	ldrb	r3, [r7, #14]
 800edfe:	2b04      	cmp	r3, #4
 800ee00:	d111      	bne.n	800ee26 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	220b      	movs	r2, #11
 800ee06:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2203      	movs	r2, #3
 800ee0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f000 fcc2 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ee24:	e0a5      	b.n	800ef72 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
 800ee28:	2b05      	cmp	r3, #5
 800ee2a:	f040 80a2 	bne.w	800ef72 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2203      	movs	r2, #3
 800ee36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee46:	2300      	movs	r3, #0
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f000 fcad 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ee4e:	e090      	b.n	800ef72 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	795a      	ldrb	r2, [r3, #5]
 800ee54:	2301      	movs	r3, #1
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 f8aa 	bl	800efb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	220a      	movs	r2, #10
 800ee74:	761a      	strb	r2, [r3, #24]
      break;
 800ee76:	e07f      	b.n	800ef78 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	795b      	ldrb	r3, [r3, #5]
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f003 fe0e 	bl	8012aa0 <USBH_LL_GetURBState>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ee88:	7bbb      	ldrb	r3, [r7, #14]
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d113      	bne.n	800eeb6 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	220d      	movs	r2, #13
 800ee96:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2203      	movs	r2, #3
 800ee9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eeac:	2300      	movs	r3, #0
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f000 fc7a 	bl	800f7a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eeb4:	e05f      	b.n	800ef76 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	d111      	bne.n	800eee0 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2209      	movs	r2, #9
 800eec0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2203      	movs	r2, #3
 800eec6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eed6:	2300      	movs	r3, #0
 800eed8:	2200      	movs	r2, #0
 800eeda:	f000 fc65 	bl	800f7a8 <osMessageQueuePut>
      break;
 800eede:	e04a      	b.n	800ef76 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800eee0:	7bbb      	ldrb	r3, [r7, #14]
 800eee2:	2b04      	cmp	r3, #4
 800eee4:	d147      	bne.n	800ef76 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	220b      	movs	r2, #11
 800eeea:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2203      	movs	r2, #3
 800eef0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ef00:	2300      	movs	r3, #0
 800ef02:	2200      	movs	r2, #0
 800ef04:	f000 fc50 	bl	800f7a8 <osMessageQueuePut>
      break;
 800ef08:	e035      	b.n	800ef76 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	7e5b      	ldrb	r3, [r3, #25]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	765a      	strb	r2, [r3, #25]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7e5b      	ldrb	r3, [r3, #25]
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d806      	bhi.n	800ef2c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2201      	movs	r2, #1
 800ef22:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ef2a:	e025      	b.n	800ef78 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef32:	2106      	movs	r1, #6
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	795b      	ldrb	r3, [r3, #5]
 800ef42:	4619      	mov	r1, r3
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 f90d 	bl	800f164 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	791b      	ldrb	r3, [r3, #4]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 f907 	bl	800f164 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ef60:	e00a      	b.n	800ef78 <USBH_HandleControl+0x488>

    default:
      break;
 800ef62:	bf00      	nop
 800ef64:	e008      	b.n	800ef78 <USBH_HandleControl+0x488>
      break;
 800ef66:	bf00      	nop
 800ef68:	e006      	b.n	800ef78 <USBH_HandleControl+0x488>
      break;
 800ef6a:	bf00      	nop
 800ef6c:	e004      	b.n	800ef78 <USBH_HandleControl+0x488>
      break;
 800ef6e:	bf00      	nop
 800ef70:	e002      	b.n	800ef78 <USBH_HandleControl+0x488>
      break;
 800ef72:	bf00      	nop
 800ef74:	e000      	b.n	800ef78 <USBH_HandleControl+0x488>
      break;
 800ef76:	bf00      	nop
  }

  return status;
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop

0800ef84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af04      	add	r7, sp, #16
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ef92:	79f9      	ldrb	r1, [r7, #7]
 800ef94:	2300      	movs	r3, #0
 800ef96:	9303      	str	r3, [sp, #12]
 800ef98:	2308      	movs	r3, #8
 800ef9a:	9302      	str	r3, [sp, #8]
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	9301      	str	r3, [sp, #4]
 800efa0:	2300      	movs	r3, #0
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	2300      	movs	r3, #0
 800efa6:	2200      	movs	r2, #0
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f003 fd48 	bl	8012a3e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b088      	sub	sp, #32
 800efbc:	af04      	add	r7, sp, #16
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	4611      	mov	r1, r2
 800efc4:	461a      	mov	r2, r3
 800efc6:	460b      	mov	r3, r1
 800efc8:	80fb      	strh	r3, [r7, #6]
 800efca:	4613      	mov	r3, r2
 800efcc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800efd8:	2300      	movs	r3, #0
 800efda:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800efdc:	7979      	ldrb	r1, [r7, #5]
 800efde:	7e3b      	ldrb	r3, [r7, #24]
 800efe0:	9303      	str	r3, [sp, #12]
 800efe2:	88fb      	ldrh	r3, [r7, #6]
 800efe4:	9302      	str	r3, [sp, #8]
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	9301      	str	r3, [sp, #4]
 800efea:	2301      	movs	r3, #1
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	2300      	movs	r3, #0
 800eff0:	2200      	movs	r2, #0
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f003 fd23 	bl	8012a3e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b088      	sub	sp, #32
 800f006:	af04      	add	r7, sp, #16
 800f008:	60f8      	str	r0, [r7, #12]
 800f00a:	60b9      	str	r1, [r7, #8]
 800f00c:	4611      	mov	r1, r2
 800f00e:	461a      	mov	r2, r3
 800f010:	460b      	mov	r3, r1
 800f012:	80fb      	strh	r3, [r7, #6]
 800f014:	4613      	mov	r3, r2
 800f016:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f018:	7979      	ldrb	r1, [r7, #5]
 800f01a:	2300      	movs	r3, #0
 800f01c:	9303      	str	r3, [sp, #12]
 800f01e:	88fb      	ldrh	r3, [r7, #6]
 800f020:	9302      	str	r3, [sp, #8]
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	2301      	movs	r3, #1
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	2300      	movs	r3, #0
 800f02c:	2201      	movs	r2, #1
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f003 fd05 	bl	8012a3e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f034:	2300      	movs	r3, #0

}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b088      	sub	sp, #32
 800f042:	af04      	add	r7, sp, #16
 800f044:	60f8      	str	r0, [r7, #12]
 800f046:	60b9      	str	r1, [r7, #8]
 800f048:	4611      	mov	r1, r2
 800f04a:	461a      	mov	r2, r3
 800f04c:	460b      	mov	r3, r1
 800f04e:	80fb      	strh	r3, [r7, #6]
 800f050:	4613      	mov	r3, r2
 800f052:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d001      	beq.n	800f062 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f05e:	2300      	movs	r3, #0
 800f060:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f062:	7979      	ldrb	r1, [r7, #5]
 800f064:	7e3b      	ldrb	r3, [r7, #24]
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	88fb      	ldrh	r3, [r7, #6]
 800f06a:	9302      	str	r3, [sp, #8]
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	9301      	str	r3, [sp, #4]
 800f070:	2301      	movs	r3, #1
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	2302      	movs	r3, #2
 800f076:	2200      	movs	r2, #0
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f003 fce0 	bl	8012a3e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b088      	sub	sp, #32
 800f08c:	af04      	add	r7, sp, #16
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	4611      	mov	r1, r2
 800f094:	461a      	mov	r2, r3
 800f096:	460b      	mov	r3, r1
 800f098:	80fb      	strh	r3, [r7, #6]
 800f09a:	4613      	mov	r3, r2
 800f09c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f09e:	7979      	ldrb	r1, [r7, #5]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	9303      	str	r3, [sp, #12]
 800f0a4:	88fb      	ldrh	r3, [r7, #6]
 800f0a6:	9302      	str	r3, [sp, #8]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f003 fcc2 	bl	8012a3e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f0ba:	2300      	movs	r3, #0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af04      	add	r7, sp, #16
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	70fb      	strb	r3, [r7, #3]
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	70bb      	strb	r3, [r7, #2]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f0de:	7878      	ldrb	r0, [r7, #1]
 800f0e0:	78ba      	ldrb	r2, [r7, #2]
 800f0e2:	78f9      	ldrb	r1, [r7, #3]
 800f0e4:	8b3b      	ldrh	r3, [r7, #24]
 800f0e6:	9302      	str	r3, [sp, #8]
 800f0e8:	7d3b      	ldrb	r3, [r7, #20]
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	7c3b      	ldrb	r3, [r7, #16]
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f003 fc55 	bl	80129a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b082      	sub	sp, #8
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f10e:	78fb      	ldrb	r3, [r7, #3]
 800f110:	4619      	mov	r1, r3
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f003 fc74 	bl	8012a00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b084      	sub	sp, #16
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	460b      	mov	r3, r1
 800f12c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 f836 	bl	800f1a0 <USBH_GetFreePipe>
 800f134:	4603      	mov	r3, r0
 800f136:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f13e:	4293      	cmp	r3, r2
 800f140:	d00a      	beq.n	800f158 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f142:	78fa      	ldrb	r2, [r7, #3]
 800f144:	89fb      	ldrh	r3, [r7, #14]
 800f146:	f003 030f 	and.w	r3, r3, #15
 800f14a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f14e:	6879      	ldr	r1, [r7, #4]
 800f150:	33e0      	adds	r3, #224	; 0xe0
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	440b      	add	r3, r1
 800f156:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f158:	89fb      	ldrh	r3, [r7, #14]
 800f15a:	b2db      	uxtb	r3, r3
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	460b      	mov	r3, r1
 800f16e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	2b0a      	cmp	r3, #10
 800f174:	d80d      	bhi.n	800f192 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f176:	78fb      	ldrb	r3, [r7, #3]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	33e0      	adds	r3, #224	; 0xe0
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	4413      	add	r3, r2
 800f180:	685a      	ldr	r2, [r3, #4]
 800f182:	78fb      	ldrb	r3, [r7, #3]
 800f184:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f188:	6879      	ldr	r1, [r7, #4]
 800f18a:	33e0      	adds	r3, #224	; 0xe0
 800f18c:	009b      	lsls	r3, r3, #2
 800f18e:	440b      	add	r3, r1
 800f190:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	73fb      	strb	r3, [r7, #15]
 800f1b0:	e00f      	b.n	800f1d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	33e0      	adds	r3, #224	; 0xe0
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4413      	add	r3, r2
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d102      	bne.n	800f1cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	e007      	b.n	800f1dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	73fb      	strb	r3, [r7, #15]
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	2b0a      	cmp	r3, #10
 800f1d6:	d9ec      	bls.n	800f1b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f1d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3714      	adds	r7, #20
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f1e8:	b480      	push	{r7}
 800f1ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f1ec:	bf00      	nop
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
	...

0800f1f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1fe:	f3ef 8305 	mrs	r3, IPSR
 800f202:	60bb      	str	r3, [r7, #8]
  return(result);
 800f204:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f206:	2b00      	cmp	r3, #0
 800f208:	d10f      	bne.n	800f22a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f20a:	f3ef 8310 	mrs	r3, PRIMASK
 800f20e:	607b      	str	r3, [r7, #4]
  return(result);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d105      	bne.n	800f222 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f216:	f3ef 8311 	mrs	r3, BASEPRI
 800f21a:	603b      	str	r3, [r7, #0]
  return(result);
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d007      	beq.n	800f232 <osKernelInitialize+0x3a>
 800f222:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <osKernelInitialize+0x64>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b02      	cmp	r3, #2
 800f228:	d103      	bne.n	800f232 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f22a:	f06f 0305 	mvn.w	r3, #5
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	e00c      	b.n	800f24c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f232:	4b0a      	ldr	r3, [pc, #40]	; (800f25c <osKernelInitialize+0x64>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d105      	bne.n	800f246 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f23a:	4b08      	ldr	r3, [pc, #32]	; (800f25c <osKernelInitialize+0x64>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f240:	2300      	movs	r3, #0
 800f242:	60fb      	str	r3, [r7, #12]
 800f244:	e002      	b.n	800f24c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f246:	f04f 33ff 	mov.w	r3, #4294967295
 800f24a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f24c:	68fb      	ldr	r3, [r7, #12]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	200001a4 	.word	0x200001a4

0800f260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f266:	f3ef 8305 	mrs	r3, IPSR
 800f26a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f26c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10f      	bne.n	800f292 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f272:	f3ef 8310 	mrs	r3, PRIMASK
 800f276:	607b      	str	r3, [r7, #4]
  return(result);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d105      	bne.n	800f28a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f27e:	f3ef 8311 	mrs	r3, BASEPRI
 800f282:	603b      	str	r3, [r7, #0]
  return(result);
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d007      	beq.n	800f29a <osKernelStart+0x3a>
 800f28a:	4b0f      	ldr	r3, [pc, #60]	; (800f2c8 <osKernelStart+0x68>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d103      	bne.n	800f29a <osKernelStart+0x3a>
    stat = osErrorISR;
 800f292:	f06f 0305 	mvn.w	r3, #5
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	e010      	b.n	800f2bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f29a:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <osKernelStart+0x68>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d109      	bne.n	800f2b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f2a2:	f7ff ffa1 	bl	800f1e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f2a6:	4b08      	ldr	r3, [pc, #32]	; (800f2c8 <osKernelStart+0x68>)
 800f2a8:	2202      	movs	r2, #2
 800f2aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f2ac:	f001 fc7c 	bl	8010ba8 <vTaskStartScheduler>
      stat = osOK;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	e002      	b.n	800f2bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	200001a4 	.word	0x200001a4

0800f2cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b090      	sub	sp, #64	; 0x40
 800f2d0:	af04      	add	r7, sp, #16
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2dc:	f3ef 8305 	mrs	r3, IPSR
 800f2e0:	61fb      	str	r3, [r7, #28]
  return(result);
 800f2e2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f040 808f 	bne.w	800f408 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f2ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d105      	bne.n	800f302 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2f6:	f3ef 8311 	mrs	r3, BASEPRI
 800f2fa:	617b      	str	r3, [r7, #20]
  return(result);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <osThreadNew+0x3e>
 800f302:	4b44      	ldr	r3, [pc, #272]	; (800f414 <osThreadNew+0x148>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b02      	cmp	r3, #2
 800f308:	d07e      	beq.n	800f408 <osThreadNew+0x13c>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d07b      	beq.n	800f408 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f310:	2380      	movs	r3, #128	; 0x80
 800f312:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f314:	2318      	movs	r3, #24
 800f316:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f318:	2300      	movs	r3, #0
 800f31a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295
 800f320:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d045      	beq.n	800f3b4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d002      	beq.n	800f336 <osThreadNew+0x6a>
        name = attr->name;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	699b      	ldr	r3, [r3, #24]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	699b      	ldr	r3, [r3, #24]
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	2b00      	cmp	r3, #0
 800f348:	d008      	beq.n	800f35c <osThreadNew+0x90>
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	2b38      	cmp	r3, #56	; 0x38
 800f34e:	d805      	bhi.n	800f35c <osThreadNew+0x90>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <osThreadNew+0x94>
        return (NULL);
 800f35c:	2300      	movs	r3, #0
 800f35e:	e054      	b.n	800f40a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d003      	beq.n	800f370 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	695b      	ldr	r3, [r3, #20]
 800f36c:	089b      	lsrs	r3, r3, #2
 800f36e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00e      	beq.n	800f396 <osThreadNew+0xca>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	2b5b      	cmp	r3, #91	; 0x5b
 800f37e:	d90a      	bls.n	800f396 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f384:	2b00      	cmp	r3, #0
 800f386:	d006      	beq.n	800f396 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	695b      	ldr	r3, [r3, #20]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d002      	beq.n	800f396 <osThreadNew+0xca>
        mem = 1;
 800f390:	2301      	movs	r3, #1
 800f392:	623b      	str	r3, [r7, #32]
 800f394:	e010      	b.n	800f3b8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d10c      	bne.n	800f3b8 <osThreadNew+0xec>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d108      	bne.n	800f3b8 <osThreadNew+0xec>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d104      	bne.n	800f3b8 <osThreadNew+0xec>
          mem = 0;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	623b      	str	r3, [r7, #32]
 800f3b2:	e001      	b.n	800f3b8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f3b8:	6a3b      	ldr	r3, [r7, #32]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d110      	bne.n	800f3e0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f3c6:	9202      	str	r2, [sp, #8]
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f001 f947 	bl	8010668 <xTaskCreateStatic>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	613b      	str	r3, [r7, #16]
 800f3de:	e013      	b.n	800f408 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d110      	bne.n	800f408 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	f107 0310 	add.w	r3, r7, #16
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	9300      	str	r3, [sp, #0]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f001 f98f 	bl	801071c <xTaskCreate>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b01      	cmp	r3, #1
 800f402:	d001      	beq.n	800f408 <osThreadNew+0x13c>
          hTask = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f408:	693b      	ldr	r3, [r7, #16]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3730      	adds	r7, #48	; 0x30
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	200001a4 	.word	0x200001a4

0800f418 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800f418:	b580      	push	{r7, lr}
 800f41a:	b088      	sub	sp, #32
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f424:	f3ef 8305 	mrs	r3, IPSR
 800f428:	617b      	str	r3, [r7, #20]
  return(result);
 800f42a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10f      	bne.n	800f450 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f430:	f3ef 8310 	mrs	r3, PRIMASK
 800f434:	613b      	str	r3, [r7, #16]
  return(result);
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d105      	bne.n	800f448 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f43c:	f3ef 8311 	mrs	r3, BASEPRI
 800f440:	60fb      	str	r3, [r7, #12]
  return(result);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d007      	beq.n	800f458 <osThreadSuspend+0x40>
 800f448:	4b0c      	ldr	r3, [pc, #48]	; (800f47c <osThreadSuspend+0x64>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b02      	cmp	r3, #2
 800f44e:	d103      	bne.n	800f458 <osThreadSuspend+0x40>
    stat = osErrorISR;
 800f450:	f06f 0305 	mvn.w	r3, #5
 800f454:	61fb      	str	r3, [r7, #28]
 800f456:	e00b      	b.n	800f470 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d103      	bne.n	800f466 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800f45e:	f06f 0303 	mvn.w	r3, #3
 800f462:	61fb      	str	r3, [r7, #28]
 800f464:	e004      	b.n	800f470 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800f466:	2300      	movs	r3, #0
 800f468:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800f46a:	69b8      	ldr	r0, [r7, #24]
 800f46c:	f001 fa9a 	bl	80109a4 <vTaskSuspend>
  }

  return (stat);
 800f470:	69fb      	ldr	r3, [r7, #28]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3720      	adds	r7, #32
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	200001a4 	.word	0x200001a4

0800f480 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f48c:	f3ef 8305 	mrs	r3, IPSR
 800f490:	617b      	str	r3, [r7, #20]
  return(result);
 800f492:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10f      	bne.n	800f4b8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f498:	f3ef 8310 	mrs	r3, PRIMASK
 800f49c:	613b      	str	r3, [r7, #16]
  return(result);
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d105      	bne.n	800f4b0 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4a4:	f3ef 8311 	mrs	r3, BASEPRI
 800f4a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d007      	beq.n	800f4c0 <osThreadResume+0x40>
 800f4b0:	4b0c      	ldr	r3, [pc, #48]	; (800f4e4 <osThreadResume+0x64>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d103      	bne.n	800f4c0 <osThreadResume+0x40>
    stat = osErrorISR;
 800f4b8:	f06f 0305 	mvn.w	r3, #5
 800f4bc:	61fb      	str	r3, [r7, #28]
 800f4be:	e00b      	b.n	800f4d8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d103      	bne.n	800f4ce <osThreadResume+0x4e>
    stat = osErrorParameter;
 800f4c6:	f06f 0303 	mvn.w	r3, #3
 800f4ca:	61fb      	str	r3, [r7, #28]
 800f4cc:	e004      	b.n	800f4d8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800f4d2:	69b8      	ldr	r0, [r7, #24]
 800f4d4:	f001 fb0a 	bl	8010aec <vTaskResume>
  }

  return (stat);
 800f4d8:	69fb      	ldr	r3, [r7, #28]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3720      	adds	r7, #32
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	200001a4 	.word	0x200001a4

0800f4e8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f002 fc4b 	bl	8011d8c <pvTimerGetTimerID>
 800f4f6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d005      	beq.n	800f50a <TimerCallback+0x22>
    callb->func (callb->arg);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	6852      	ldr	r2, [r2, #4]
 800f506:	4610      	mov	r0, r2
 800f508:	4798      	blx	r3
  }
}
 800f50a:	bf00      	nop
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
	...

0800f514 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f514:	b580      	push	{r7, lr}
 800f516:	b08e      	sub	sp, #56	; 0x38
 800f518:	af02      	add	r7, sp, #8
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	607a      	str	r2, [r7, #4]
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	460b      	mov	r3, r1
 800f522:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f524:	2300      	movs	r3, #0
 800f526:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f528:	f3ef 8305 	mrs	r3, IPSR
 800f52c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f52e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800f530:	2b00      	cmp	r3, #0
 800f532:	d16a      	bne.n	800f60a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f534:	f3ef 8310 	mrs	r3, PRIMASK
 800f538:	617b      	str	r3, [r7, #20]
  return(result);
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d105      	bne.n	800f54c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f540:	f3ef 8311 	mrs	r3, BASEPRI
 800f544:	613b      	str	r3, [r7, #16]
  return(result);
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d003      	beq.n	800f554 <osTimerNew+0x40>
 800f54c:	4b31      	ldr	r3, [pc, #196]	; (800f614 <osTimerNew+0x100>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2b02      	cmp	r3, #2
 800f552:	d05a      	beq.n	800f60a <osTimerNew+0xf6>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d057      	beq.n	800f60a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f55a:	2008      	movs	r0, #8
 800f55c:	f002 fe78 	bl	8012250 <pvPortMalloc>
 800f560:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d050      	beq.n	800f60a <osTimerNew+0xf6>
      callb->func = func;
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f574:	7afb      	ldrb	r3, [r7, #11]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d102      	bne.n	800f580 <osTimerNew+0x6c>
        reload = pdFALSE;
 800f57a:	2300      	movs	r3, #0
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
 800f57e:	e001      	b.n	800f584 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800f580:	2301      	movs	r3, #1
 800f582:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800f584:	f04f 33ff 	mov.w	r3, #4294967295
 800f588:	623b      	str	r3, [r7, #32]
      name = NULL;
 800f58a:	2300      	movs	r3, #0
 800f58c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d01c      	beq.n	800f5ce <osTimerNew+0xba>
        if (attr->name != NULL) {
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <osTimerNew+0x8e>
          name = attr->name;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d006      	beq.n	800f5b8 <osTimerNew+0xa4>
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	2b2b      	cmp	r3, #43	; 0x2b
 800f5b0:	d902      	bls.n	800f5b8 <osTimerNew+0xa4>
          mem = 1;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	623b      	str	r3, [r7, #32]
 800f5b6:	e00c      	b.n	800f5d2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d108      	bne.n	800f5d2 <osTimerNew+0xbe>
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d104      	bne.n	800f5d2 <osTimerNew+0xbe>
            mem = 0;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	623b      	str	r3, [r7, #32]
 800f5cc:	e001      	b.n	800f5d2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800f5d2:	6a3b      	ldr	r3, [r7, #32]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d10c      	bne.n	800f5f2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	9301      	str	r3, [sp, #4]
 800f5de:	4b0e      	ldr	r3, [pc, #56]	; (800f618 <osTimerNew+0x104>)
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5ea:	f002 f85a 	bl	80116a2 <xTimerCreateStatic>
 800f5ee:	62b8      	str	r0, [r7, #40]	; 0x28
 800f5f0:	e00b      	b.n	800f60a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d108      	bne.n	800f60a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f5f8:	4b07      	ldr	r3, [pc, #28]	; (800f618 <osTimerNew+0x104>)
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f600:	2101      	movs	r1, #1
 800f602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f604:	f002 f82c 	bl	8011660 <xTimerCreate>
 800f608:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3730      	adds	r7, #48	; 0x30
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	200001a4 	.word	0x200001a4
 800f618:	0800f4e9 	.word	0x0800f4e9

0800f61c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08a      	sub	sp, #40	; 0x28
 800f620:	af02      	add	r7, sp, #8
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f62a:	f3ef 8305 	mrs	r3, IPSR
 800f62e:	617b      	str	r3, [r7, #20]
  return(result);
 800f630:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10f      	bne.n	800f656 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f636:	f3ef 8310 	mrs	r3, PRIMASK
 800f63a:	613b      	str	r3, [r7, #16]
  return(result);
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d105      	bne.n	800f64e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f642:	f3ef 8311 	mrs	r3, BASEPRI
 800f646:	60fb      	str	r3, [r7, #12]
  return(result);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d007      	beq.n	800f65e <osTimerStart+0x42>
 800f64e:	4b12      	ldr	r3, [pc, #72]	; (800f698 <osTimerStart+0x7c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b02      	cmp	r3, #2
 800f654:	d103      	bne.n	800f65e <osTimerStart+0x42>
    stat = osErrorISR;
 800f656:	f06f 0305 	mvn.w	r3, #5
 800f65a:	61fb      	str	r3, [r7, #28]
 800f65c:	e017      	b.n	800f68e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d103      	bne.n	800f66c <osTimerStart+0x50>
    stat = osErrorParameter;
 800f664:	f06f 0303 	mvn.w	r3, #3
 800f668:	61fb      	str	r3, [r7, #28]
 800f66a:	e010      	b.n	800f68e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f66c:	2300      	movs	r3, #0
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	2300      	movs	r3, #0
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	2104      	movs	r1, #4
 800f676:	69b8      	ldr	r0, [r7, #24]
 800f678:	f002 f88a 	bl	8011790 <xTimerGenericCommand>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d102      	bne.n	800f688 <osTimerStart+0x6c>
      stat = osOK;
 800f682:	2300      	movs	r3, #0
 800f684:	61fb      	str	r3, [r7, #28]
 800f686:	e002      	b.n	800f68e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800f688:	f06f 0302 	mvn.w	r3, #2
 800f68c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800f68e:	69fb      	ldr	r3, [r7, #28]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3720      	adds	r7, #32
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	200001a4 	.word	0x200001a4

0800f69c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b08c      	sub	sp, #48	; 0x30
 800f6a0:	af02      	add	r7, sp, #8
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6ac:	f3ef 8305 	mrs	r3, IPSR
 800f6b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800f6b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d170      	bne.n	800f79a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6b8:	f3ef 8310 	mrs	r3, PRIMASK
 800f6bc:	617b      	str	r3, [r7, #20]
  return(result);
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d105      	bne.n	800f6d0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6c4:	f3ef 8311 	mrs	r3, BASEPRI
 800f6c8:	613b      	str	r3, [r7, #16]
  return(result);
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d003      	beq.n	800f6d8 <osMessageQueueNew+0x3c>
 800f6d0:	4b34      	ldr	r3, [pc, #208]	; (800f7a4 <osMessageQueueNew+0x108>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d060      	beq.n	800f79a <osMessageQueueNew+0xfe>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d05d      	beq.n	800f79a <osMessageQueueNew+0xfe>
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d05a      	beq.n	800f79a <osMessageQueueNew+0xfe>
    mem = -1;
 800f6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d029      	beq.n	800f744 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d012      	beq.n	800f71e <osMessageQueueNew+0x82>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	2b4f      	cmp	r3, #79	; 0x4f
 800f6fe:	d90e      	bls.n	800f71e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00a      	beq.n	800f71e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	695a      	ldr	r2, [r3, #20]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	fb01 f303 	mul.w	r3, r1, r3
 800f714:	429a      	cmp	r2, r3
 800f716:	d302      	bcc.n	800f71e <osMessageQueueNew+0x82>
        mem = 1;
 800f718:	2301      	movs	r3, #1
 800f71a:	623b      	str	r3, [r7, #32]
 800f71c:	e014      	b.n	800f748 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d110      	bne.n	800f748 <osMessageQueueNew+0xac>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10c      	bne.n	800f748 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f732:	2b00      	cmp	r3, #0
 800f734:	d108      	bne.n	800f748 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	695b      	ldr	r3, [r3, #20]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d104      	bne.n	800f748 <osMessageQueueNew+0xac>
          mem = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	623b      	str	r3, [r7, #32]
 800f742:	e001      	b.n	800f748 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d10c      	bne.n	800f768 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	691a      	ldr	r2, [r3, #16]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6899      	ldr	r1, [r3, #8]
 800f756:	2300      	movs	r3, #0
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	460b      	mov	r3, r1
 800f75c:	68b9      	ldr	r1, [r7, #8]
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f000 fa58 	bl	800fc14 <xQueueGenericCreateStatic>
 800f764:	6278      	str	r0, [r7, #36]	; 0x24
 800f766:	e008      	b.n	800f77a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f768:	6a3b      	ldr	r3, [r7, #32]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d105      	bne.n	800f77a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f76e:	2200      	movs	r2, #0
 800f770:	68b9      	ldr	r1, [r7, #8]
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f000 fac1 	bl	800fcfa <xQueueGenericCreate>
 800f778:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00c      	beq.n	800f79a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d003      	beq.n	800f78e <osMessageQueueNew+0xf2>
        name = attr->name;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	61fb      	str	r3, [r7, #28]
 800f78c:	e001      	b.n	800f792 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f78e:	2300      	movs	r3, #0
 800f790:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f792:	69f9      	ldr	r1, [r7, #28]
 800f794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f796:	f000 ff0b 	bl	80105b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3728      	adds	r7, #40	; 0x28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	200001a4 	.word	0x200001a4

0800f7a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	; 0x28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	603b      	str	r3, [r7, #0]
 800f7b4:	4613      	mov	r3, r2
 800f7b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7c0:	f3ef 8305 	mrs	r3, IPSR
 800f7c4:	61fb      	str	r3, [r7, #28]
  return(result);
 800f7c6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d10f      	bne.n	800f7ec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f7d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d105      	bne.n	800f7e4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f7d8:	f3ef 8311 	mrs	r3, BASEPRI
 800f7dc:	617b      	str	r3, [r7, #20]
  return(result);
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d02c      	beq.n	800f83e <osMessageQueuePut+0x96>
 800f7e4:	4b28      	ldr	r3, [pc, #160]	; (800f888 <osMessageQueuePut+0xe0>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d128      	bne.n	800f83e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d005      	beq.n	800f7fe <osMessageQueuePut+0x56>
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <osMessageQueuePut+0x56>
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d003      	beq.n	800f806 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f7fe:	f06f 0303 	mvn.w	r3, #3
 800f802:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f804:	e039      	b.n	800f87a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f806:	2300      	movs	r3, #0
 800f808:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f80a:	f107 0210 	add.w	r2, r7, #16
 800f80e:	2300      	movs	r3, #0
 800f810:	68b9      	ldr	r1, [r7, #8]
 800f812:	6a38      	ldr	r0, [r7, #32]
 800f814:	f000 fbce 	bl	800ffb4 <xQueueGenericSendFromISR>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d003      	beq.n	800f826 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f81e:	f06f 0302 	mvn.w	r3, #2
 800f822:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f824:	e029      	b.n	800f87a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d026      	beq.n	800f87a <osMessageQueuePut+0xd2>
 800f82c:	4b17      	ldr	r3, [pc, #92]	; (800f88c <osMessageQueuePut+0xe4>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	f3bf 8f4f 	dsb	sy
 800f838:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f83c:	e01d      	b.n	800f87a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f83e:	6a3b      	ldr	r3, [r7, #32]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <osMessageQueuePut+0xa2>
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d103      	bne.n	800f852 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f84a:	f06f 0303 	mvn.w	r3, #3
 800f84e:	627b      	str	r3, [r7, #36]	; 0x24
 800f850:	e014      	b.n	800f87c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f852:	2300      	movs	r3, #0
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	68b9      	ldr	r1, [r7, #8]
 800f858:	6a38      	ldr	r0, [r7, #32]
 800f85a:	f000 fab1 	bl	800fdc0 <xQueueGenericSend>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b01      	cmp	r3, #1
 800f862:	d00b      	beq.n	800f87c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f86a:	f06f 0301 	mvn.w	r3, #1
 800f86e:	627b      	str	r3, [r7, #36]	; 0x24
 800f870:	e004      	b.n	800f87c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f872:	f06f 0302 	mvn.w	r3, #2
 800f876:	627b      	str	r3, [r7, #36]	; 0x24
 800f878:	e000      	b.n	800f87c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f87a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3728      	adds	r7, #40	; 0x28
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	200001a4 	.word	0x200001a4
 800f88c:	e000ed04 	.word	0xe000ed04

0800f890 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f890:	b580      	push	{r7, lr}
 800f892:	b08a      	sub	sp, #40	; 0x28
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
 800f89c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8a6:	f3ef 8305 	mrs	r3, IPSR
 800f8aa:	61fb      	str	r3, [r7, #28]
  return(result);
 800f8ac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d10f      	bne.n	800f8d2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8b2:	f3ef 8310 	mrs	r3, PRIMASK
 800f8b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d105      	bne.n	800f8ca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8be:	f3ef 8311 	mrs	r3, BASEPRI
 800f8c2:	617b      	str	r3, [r7, #20]
  return(result);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d02c      	beq.n	800f924 <osMessageQueueGet+0x94>
 800f8ca:	4b28      	ldr	r3, [pc, #160]	; (800f96c <osMessageQueueGet+0xdc>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d128      	bne.n	800f924 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d005      	beq.n	800f8e4 <osMessageQueueGet+0x54>
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d002      	beq.n	800f8e4 <osMessageQueueGet+0x54>
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d003      	beq.n	800f8ec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f8e4:	f06f 0303 	mvn.w	r3, #3
 800f8e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8ea:	e038      	b.n	800f95e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f8f0:	f107 0310 	add.w	r3, r7, #16
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	68b9      	ldr	r1, [r7, #8]
 800f8f8:	6a38      	ldr	r0, [r7, #32]
 800f8fa:	f000 fccb 	bl	8010294 <xQueueReceiveFromISR>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b01      	cmp	r3, #1
 800f902:	d003      	beq.n	800f90c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f904:	f06f 0302 	mvn.w	r3, #2
 800f908:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f90a:	e028      	b.n	800f95e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d025      	beq.n	800f95e <osMessageQueueGet+0xce>
 800f912:	4b17      	ldr	r3, [pc, #92]	; (800f970 <osMessageQueueGet+0xe0>)
 800f914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f918:	601a      	str	r2, [r3, #0]
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f922:	e01c      	b.n	800f95e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d002      	beq.n	800f930 <osMessageQueueGet+0xa0>
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d103      	bne.n	800f938 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f930:	f06f 0303 	mvn.w	r3, #3
 800f934:	627b      	str	r3, [r7, #36]	; 0x24
 800f936:	e013      	b.n	800f960 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	68b9      	ldr	r1, [r7, #8]
 800f93c:	6a38      	ldr	r0, [r7, #32]
 800f93e:	f000 fbcd 	bl	80100dc <xQueueReceive>
 800f942:	4603      	mov	r3, r0
 800f944:	2b01      	cmp	r3, #1
 800f946:	d00b      	beq.n	800f960 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d003      	beq.n	800f956 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f94e:	f06f 0301 	mvn.w	r3, #1
 800f952:	627b      	str	r3, [r7, #36]	; 0x24
 800f954:	e004      	b.n	800f960 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f956:	f06f 0302 	mvn.w	r3, #2
 800f95a:	627b      	str	r3, [r7, #36]	; 0x24
 800f95c:	e000      	b.n	800f960 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f95e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f962:	4618      	mov	r0, r3
 800f964:	3728      	adds	r7, #40	; 0x28
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	200001a4 	.word	0x200001a4
 800f970:	e000ed04 	.word	0xe000ed04

0800f974 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	4a07      	ldr	r2, [pc, #28]	; (800f9a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800f984:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	4a06      	ldr	r2, [pc, #24]	; (800f9a4 <vApplicationGetIdleTaskMemory+0x30>)
 800f98a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2280      	movs	r2, #128	; 0x80
 800f990:	601a      	str	r2, [r3, #0]
}
 800f992:	bf00      	nop
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	200001a8 	.word	0x200001a8
 800f9a4:	20000204 	.word	0x20000204

0800f9a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	4a07      	ldr	r2, [pc, #28]	; (800f9d4 <vApplicationGetTimerTaskMemory+0x2c>)
 800f9b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	4a06      	ldr	r2, [pc, #24]	; (800f9d8 <vApplicationGetTimerTaskMemory+0x30>)
 800f9be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f9c6:	601a      	str	r2, [r3, #0]
}
 800f9c8:	bf00      	nop
 800f9ca:	3714      	adds	r7, #20
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr
 800f9d4:	20000404 	.word	0x20000404
 800f9d8:	20000460 	.word	0x20000460

0800f9dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f103 0208 	add.w	r2, r3, #8
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f103 0208 	add.w	r2, r3, #8
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f103 0208 	add.w	r2, r3, #8
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa2a:	bf00      	nop
 800fa2c:	370c      	adds	r7, #12
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr

0800fa36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa36:	b480      	push	{r7}
 800fa38:	b085      	sub	sp, #20
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	689a      	ldr	r2, [r3, #8]
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	601a      	str	r2, [r3, #0]
}
 800fa72:	bf00      	nop
 800fa74:	3714      	adds	r7, #20
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b085      	sub	sp, #20
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa94:	d103      	bne.n	800fa9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	60fb      	str	r3, [r7, #12]
 800fa9c:	e00c      	b.n	800fab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	3308      	adds	r3, #8
 800faa2:	60fb      	str	r3, [r7, #12]
 800faa4:	e002      	b.n	800faac <vListInsert+0x2e>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	60fb      	str	r3, [r7, #12]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d2f6      	bcs.n	800faa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	683a      	ldr	r2, [r7, #0]
 800fad2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	601a      	str	r2, [r3, #0]
}
 800fae4:	bf00      	nop
 800fae6:	3714      	adds	r7, #20
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	691b      	ldr	r3, [r3, #16]
 800fafc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	6892      	ldr	r2, [r2, #8]
 800fb06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	6852      	ldr	r2, [r2, #4]
 800fb10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d103      	bne.n	800fb24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	689a      	ldr	r2, [r3, #8]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	1e5a      	subs	r2, r3, #1
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3714      	adds	r7, #20
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d109      	bne.n	800fb6c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	60bb      	str	r3, [r7, #8]
 800fb6a:	e7fe      	b.n	800fb6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fb6c:	f002 fa56 	bl	801201c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb78:	68f9      	ldr	r1, [r7, #12]
 800fb7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fb7c:	fb01 f303 	mul.w	r3, r1, r3
 800fb80:	441a      	add	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	68f9      	ldr	r1, [r7, #12]
 800fba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fba2:	fb01 f303 	mul.w	r3, r1, r3
 800fba6:	441a      	add	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	22ff      	movs	r2, #255	; 0xff
 800fbb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	22ff      	movs	r2, #255	; 0xff
 800fbb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d114      	bne.n	800fbec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d01a      	beq.n	800fc00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3310      	adds	r3, #16
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f001 fa6a 	bl	80110a8 <xTaskRemoveFromEventList>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d012      	beq.n	800fc00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fbda:	4b0d      	ldr	r3, [pc, #52]	; (800fc10 <xQueueGenericReset+0xcc>)
 800fbdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbe0:	601a      	str	r2, [r3, #0]
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	e009      	b.n	800fc00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3310      	adds	r3, #16
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff fef3 	bl	800f9dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3324      	adds	r3, #36	; 0x24
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7ff feee 	bl	800f9dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fc00:	f002 fa3a 	bl	8012078 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fc04:	2301      	movs	r3, #1
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	e000ed04 	.word	0xe000ed04

0800fc14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b08e      	sub	sp, #56	; 0x38
 800fc18:	af02      	add	r7, sp, #8
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
 800fc20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d109      	bne.n	800fc3c <xQueueGenericCreateStatic+0x28>
 800fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc3a:	e7fe      	b.n	800fc3a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d109      	bne.n	800fc56 <xQueueGenericCreateStatic+0x42>
 800fc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	627b      	str	r3, [r7, #36]	; 0x24
 800fc54:	e7fe      	b.n	800fc54 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d002      	beq.n	800fc62 <xQueueGenericCreateStatic+0x4e>
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <xQueueGenericCreateStatic+0x52>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <xQueueGenericCreateStatic+0x54>
 800fc66:	2300      	movs	r3, #0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d109      	bne.n	800fc80 <xQueueGenericCreateStatic+0x6c>
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	623b      	str	r3, [r7, #32]
 800fc7e:	e7fe      	b.n	800fc7e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d102      	bne.n	800fc8c <xQueueGenericCreateStatic+0x78>
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <xQueueGenericCreateStatic+0x7c>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <xQueueGenericCreateStatic+0x7e>
 800fc90:	2300      	movs	r3, #0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d109      	bne.n	800fcaa <xQueueGenericCreateStatic+0x96>
 800fc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	61fb      	str	r3, [r7, #28]
 800fca8:	e7fe      	b.n	800fca8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fcaa:	2350      	movs	r3, #80	; 0x50
 800fcac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	2b50      	cmp	r3, #80	; 0x50
 800fcb2:	d009      	beq.n	800fcc8 <xQueueGenericCreateStatic+0xb4>
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	61bb      	str	r3, [r7, #24]
 800fcc6:	e7fe      	b.n	800fcc6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fcc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00d      	beq.n	800fcf0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fcdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	4613      	mov	r3, r2
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	68b9      	ldr	r1, [r7, #8]
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	f000 f844 	bl	800fd78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3730      	adds	r7, #48	; 0x30
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b08a      	sub	sp, #40	; 0x28
 800fcfe:	af02      	add	r7, sp, #8
 800fd00:	60f8      	str	r0, [r7, #12]
 800fd02:	60b9      	str	r1, [r7, #8]
 800fd04:	4613      	mov	r3, r2
 800fd06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d109      	bne.n	800fd22 <xQueueGenericCreate+0x28>
 800fd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd12:	f383 8811 	msr	BASEPRI, r3
 800fd16:	f3bf 8f6f 	isb	sy
 800fd1a:	f3bf 8f4f 	dsb	sy
 800fd1e:	613b      	str	r3, [r7, #16]
 800fd20:	e7fe      	b.n	800fd20 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d102      	bne.n	800fd2e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	61fb      	str	r3, [r7, #28]
 800fd2c:	e004      	b.n	800fd38 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	fb02 f303 	mul.w	r3, r2, r3
 800fd36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	3350      	adds	r3, #80	; 0x50
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f002 fa87 	bl	8012250 <pvPortMalloc>
 800fd42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d011      	beq.n	800fd6e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	3350      	adds	r3, #80	; 0x50
 800fd52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd5c:	79fa      	ldrb	r2, [r7, #7]
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	4613      	mov	r3, r2
 800fd64:	697a      	ldr	r2, [r7, #20]
 800fd66:	68b9      	ldr	r1, [r7, #8]
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f000 f805 	bl	800fd78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd6e:	69bb      	ldr	r3, [r7, #24]
	}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3720      	adds	r7, #32
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
 800fd84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d103      	bne.n	800fd94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	69ba      	ldr	r2, [r7, #24]
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	e002      	b.n	800fd9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fda6:	2101      	movs	r1, #1
 800fda8:	69b8      	ldr	r0, [r7, #24]
 800fdaa:	f7ff fecb 	bl	800fb44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	78fa      	ldrb	r2, [r7, #3]
 800fdb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fdb6:	bf00      	nop
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
	...

0800fdc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b08e      	sub	sp, #56	; 0x38
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d109      	bne.n	800fdf0 <xQueueGenericSend+0x30>
 800fddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdee:	e7fe      	b.n	800fdee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d103      	bne.n	800fdfe <xQueueGenericSend+0x3e>
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d101      	bne.n	800fe02 <xQueueGenericSend+0x42>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e000      	b.n	800fe04 <xQueueGenericSend+0x44>
 800fe02:	2300      	movs	r3, #0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d109      	bne.n	800fe1c <xQueueGenericSend+0x5c>
 800fe08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0c:	f383 8811 	msr	BASEPRI, r3
 800fe10:	f3bf 8f6f 	isb	sy
 800fe14:	f3bf 8f4f 	dsb	sy
 800fe18:	627b      	str	r3, [r7, #36]	; 0x24
 800fe1a:	e7fe      	b.n	800fe1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d103      	bne.n	800fe2a <xQueueGenericSend+0x6a>
 800fe22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d101      	bne.n	800fe2e <xQueueGenericSend+0x6e>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e000      	b.n	800fe30 <xQueueGenericSend+0x70>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d109      	bne.n	800fe48 <xQueueGenericSend+0x88>
 800fe34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	623b      	str	r3, [r7, #32]
 800fe46:	e7fe      	b.n	800fe46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe48:	f001 fae4 	bl	8011414 <xTaskGetSchedulerState>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d102      	bne.n	800fe58 <xQueueGenericSend+0x98>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d101      	bne.n	800fe5c <xQueueGenericSend+0x9c>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e000      	b.n	800fe5e <xQueueGenericSend+0x9e>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d109      	bne.n	800fe76 <xQueueGenericSend+0xb6>
 800fe62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe66:	f383 8811 	msr	BASEPRI, r3
 800fe6a:	f3bf 8f6f 	isb	sy
 800fe6e:	f3bf 8f4f 	dsb	sy
 800fe72:	61fb      	str	r3, [r7, #28]
 800fe74:	e7fe      	b.n	800fe74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe76:	f002 f8d1 	bl	801201c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d302      	bcc.n	800fe8c <xQueueGenericSend+0xcc>
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	2b02      	cmp	r3, #2
 800fe8a:	d129      	bne.n	800fee0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	68b9      	ldr	r1, [r7, #8]
 800fe90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe92:	f000 fa7c 	bl	801038e <prvCopyDataToQueue>
 800fe96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d010      	beq.n	800fec2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea2:	3324      	adds	r3, #36	; 0x24
 800fea4:	4618      	mov	r0, r3
 800fea6:	f001 f8ff 	bl	80110a8 <xTaskRemoveFromEventList>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d013      	beq.n	800fed8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800feb0:	4b3f      	ldr	r3, [pc, #252]	; (800ffb0 <xQueueGenericSend+0x1f0>)
 800feb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feb6:	601a      	str	r2, [r3, #0]
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	e00a      	b.n	800fed8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d007      	beq.n	800fed8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fec8:	4b39      	ldr	r3, [pc, #228]	; (800ffb0 <xQueueGenericSend+0x1f0>)
 800feca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fece:	601a      	str	r2, [r3, #0]
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fed8:	f002 f8ce 	bl	8012078 <vPortExitCritical>
				return pdPASS;
 800fedc:	2301      	movs	r3, #1
 800fede:	e063      	b.n	800ffa8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d103      	bne.n	800feee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fee6:	f002 f8c7 	bl	8012078 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800feea:	2300      	movs	r3, #0
 800feec:	e05c      	b.n	800ffa8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800feee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d106      	bne.n	800ff02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fef4:	f107 0314 	add.w	r3, r7, #20
 800fef8:	4618      	mov	r0, r3
 800fefa:	f001 f937 	bl	801116c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fefe:	2301      	movs	r3, #1
 800ff00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff02:	f002 f8b9 	bl	8012078 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff06:	f000 feb3 	bl	8010c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff0a:	f002 f887 	bl	801201c <vPortEnterCritical>
 800ff0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff14:	b25b      	sxtb	r3, r3
 800ff16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff1a:	d103      	bne.n	800ff24 <xQueueGenericSend+0x164>
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff2a:	b25b      	sxtb	r3, r3
 800ff2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff30:	d103      	bne.n	800ff3a <xQueueGenericSend+0x17a>
 800ff32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff34:	2200      	movs	r2, #0
 800ff36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff3a:	f002 f89d 	bl	8012078 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff3e:	1d3a      	adds	r2, r7, #4
 800ff40:	f107 0314 	add.w	r3, r7, #20
 800ff44:	4611      	mov	r1, r2
 800ff46:	4618      	mov	r0, r3
 800ff48:	f001 f926 	bl	8011198 <xTaskCheckForTimeOut>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d124      	bne.n	800ff9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff54:	f000 fb13 	bl	801057e <prvIsQueueFull>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d018      	beq.n	800ff90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff60:	3310      	adds	r3, #16
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	4611      	mov	r1, r2
 800ff66:	4618      	mov	r0, r3
 800ff68:	f001 f850 	bl	801100c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff6e:	f000 fa9e 	bl	80104ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff72:	f000 fe8b 	bl	8010c8c <xTaskResumeAll>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f47f af7c 	bne.w	800fe76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ff7e:	4b0c      	ldr	r3, [pc, #48]	; (800ffb0 <xQueueGenericSend+0x1f0>)
 800ff80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	f3bf 8f4f 	dsb	sy
 800ff8a:	f3bf 8f6f 	isb	sy
 800ff8e:	e772      	b.n	800fe76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ff90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff92:	f000 fa8c 	bl	80104ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff96:	f000 fe79 	bl	8010c8c <xTaskResumeAll>
 800ff9a:	e76c      	b.n	800fe76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ff9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff9e:	f000 fa86 	bl	80104ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffa2:	f000 fe73 	bl	8010c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ffa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3738      	adds	r7, #56	; 0x38
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	e000ed04 	.word	0xe000ed04

0800ffb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b08e      	sub	sp, #56	; 0x38
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d109      	bne.n	800ffe0 <xQueueGenericSendFromISR+0x2c>
 800ffcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	627b      	str	r3, [r7, #36]	; 0x24
 800ffde:	e7fe      	b.n	800ffde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d103      	bne.n	800ffee <xQueueGenericSendFromISR+0x3a>
 800ffe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d101      	bne.n	800fff2 <xQueueGenericSendFromISR+0x3e>
 800ffee:	2301      	movs	r3, #1
 800fff0:	e000      	b.n	800fff4 <xQueueGenericSendFromISR+0x40>
 800fff2:	2300      	movs	r3, #0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d109      	bne.n	801000c <xQueueGenericSendFromISR+0x58>
 800fff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffc:	f383 8811 	msr	BASEPRI, r3
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	623b      	str	r3, [r7, #32]
 801000a:	e7fe      	b.n	801000a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2b02      	cmp	r3, #2
 8010010:	d103      	bne.n	801001a <xQueueGenericSendFromISR+0x66>
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010016:	2b01      	cmp	r3, #1
 8010018:	d101      	bne.n	801001e <xQueueGenericSendFromISR+0x6a>
 801001a:	2301      	movs	r3, #1
 801001c:	e000      	b.n	8010020 <xQueueGenericSendFromISR+0x6c>
 801001e:	2300      	movs	r3, #0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d109      	bne.n	8010038 <xQueueGenericSendFromISR+0x84>
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	61fb      	str	r3, [r7, #28]
 8010036:	e7fe      	b.n	8010036 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010038:	f002 f8cc 	bl	80121d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801003c:	f3ef 8211 	mrs	r2, BASEPRI
 8010040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	61ba      	str	r2, [r7, #24]
 8010052:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010054:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010056:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801005c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010060:	429a      	cmp	r2, r3
 8010062:	d302      	bcc.n	801006a <xQueueGenericSendFromISR+0xb6>
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	2b02      	cmp	r3, #2
 8010068:	d12c      	bne.n	80100c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801006a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	68b9      	ldr	r1, [r7, #8]
 8010078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801007a:	f000 f988 	bl	801038e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801007e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010086:	d112      	bne.n	80100ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	2b00      	cmp	r3, #0
 801008e:	d016      	beq.n	80100be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010092:	3324      	adds	r3, #36	; 0x24
 8010094:	4618      	mov	r0, r3
 8010096:	f001 f807 	bl	80110a8 <xTaskRemoveFromEventList>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00e      	beq.n	80100be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00b      	beq.n	80100be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2201      	movs	r2, #1
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	e007      	b.n	80100be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80100ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100b2:	3301      	adds	r3, #1
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	b25a      	sxtb	r2, r3
 80100b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80100be:	2301      	movs	r3, #1
 80100c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80100c2:	e001      	b.n	80100c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80100c4:	2300      	movs	r3, #0
 80100c6:	637b      	str	r3, [r7, #52]	; 0x34
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3738      	adds	r7, #56	; 0x38
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b08c      	sub	sp, #48	; 0x30
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80100e8:	2300      	movs	r3, #0
 80100ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d109      	bne.n	801010a <xQueueReceive+0x2e>
	__asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fa:	f383 8811 	msr	BASEPRI, r3
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	623b      	str	r3, [r7, #32]
 8010108:	e7fe      	b.n	8010108 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d103      	bne.n	8010118 <xQueueReceive+0x3c>
 8010110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010114:	2b00      	cmp	r3, #0
 8010116:	d101      	bne.n	801011c <xQueueReceive+0x40>
 8010118:	2301      	movs	r3, #1
 801011a:	e000      	b.n	801011e <xQueueReceive+0x42>
 801011c:	2300      	movs	r3, #0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d109      	bne.n	8010136 <xQueueReceive+0x5a>
 8010122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	61fb      	str	r3, [r7, #28]
 8010134:	e7fe      	b.n	8010134 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010136:	f001 f96d 	bl	8011414 <xTaskGetSchedulerState>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d102      	bne.n	8010146 <xQueueReceive+0x6a>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d101      	bne.n	801014a <xQueueReceive+0x6e>
 8010146:	2301      	movs	r3, #1
 8010148:	e000      	b.n	801014c <xQueueReceive+0x70>
 801014a:	2300      	movs	r3, #0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d109      	bne.n	8010164 <xQueueReceive+0x88>
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	61bb      	str	r3, [r7, #24]
 8010162:	e7fe      	b.n	8010162 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010164:	f001 ff5a 	bl	801201c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801016c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010170:	2b00      	cmp	r3, #0
 8010172:	d01f      	beq.n	80101b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010174:	68b9      	ldr	r1, [r7, #8]
 8010176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010178:	f000 f973 	bl	8010462 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801017c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017e:	1e5a      	subs	r2, r3, #1
 8010180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010182:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00f      	beq.n	80101ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801018c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018e:	3310      	adds	r3, #16
 8010190:	4618      	mov	r0, r3
 8010192:	f000 ff89 	bl	80110a8 <xTaskRemoveFromEventList>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d007      	beq.n	80101ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801019c:	4b3c      	ldr	r3, [pc, #240]	; (8010290 <xQueueReceive+0x1b4>)
 801019e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101a2:	601a      	str	r2, [r3, #0]
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80101ac:	f001 ff64 	bl	8012078 <vPortExitCritical>
				return pdPASS;
 80101b0:	2301      	movs	r3, #1
 80101b2:	e069      	b.n	8010288 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d103      	bne.n	80101c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80101ba:	f001 ff5d 	bl	8012078 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80101be:	2300      	movs	r3, #0
 80101c0:	e062      	b.n	8010288 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80101c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d106      	bne.n	80101d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101c8:	f107 0310 	add.w	r3, r7, #16
 80101cc:	4618      	mov	r0, r3
 80101ce:	f000 ffcd 	bl	801116c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101d2:	2301      	movs	r3, #1
 80101d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80101d6:	f001 ff4f 	bl	8012078 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80101da:	f000 fd49 	bl	8010c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101de:	f001 ff1d 	bl	801201c <vPortEnterCritical>
 80101e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101e8:	b25b      	sxtb	r3, r3
 80101ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ee:	d103      	bne.n	80101f8 <xQueueReceive+0x11c>
 80101f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101fe:	b25b      	sxtb	r3, r3
 8010200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010204:	d103      	bne.n	801020e <xQueueReceive+0x132>
 8010206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010208:	2200      	movs	r2, #0
 801020a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801020e:	f001 ff33 	bl	8012078 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010212:	1d3a      	adds	r2, r7, #4
 8010214:	f107 0310 	add.w	r3, r7, #16
 8010218:	4611      	mov	r1, r2
 801021a:	4618      	mov	r0, r3
 801021c:	f000 ffbc 	bl	8011198 <xTaskCheckForTimeOut>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d123      	bne.n	801026e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010228:	f000 f993 	bl	8010552 <prvIsQueueEmpty>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d017      	beq.n	8010262 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010234:	3324      	adds	r3, #36	; 0x24
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	4611      	mov	r1, r2
 801023a:	4618      	mov	r0, r3
 801023c:	f000 fee6 	bl	801100c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010242:	f000 f934 	bl	80104ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010246:	f000 fd21 	bl	8010c8c <xTaskResumeAll>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d189      	bne.n	8010164 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010250:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <xQueueReceive+0x1b4>)
 8010252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010256:	601a      	str	r2, [r3, #0]
 8010258:	f3bf 8f4f 	dsb	sy
 801025c:	f3bf 8f6f 	isb	sy
 8010260:	e780      	b.n	8010164 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010264:	f000 f923 	bl	80104ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010268:	f000 fd10 	bl	8010c8c <xTaskResumeAll>
 801026c:	e77a      	b.n	8010164 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801026e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010270:	f000 f91d 	bl	80104ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010274:	f000 fd0a 	bl	8010c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801027a:	f000 f96a 	bl	8010552 <prvIsQueueEmpty>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	f43f af6f 	beq.w	8010164 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010286:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010288:	4618      	mov	r0, r3
 801028a:	3730      	adds	r7, #48	; 0x30
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	e000ed04 	.word	0xe000ed04

08010294 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b08e      	sub	sp, #56	; 0x38
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80102a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d109      	bne.n	80102be <xQueueReceiveFromISR+0x2a>
 80102aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ae:	f383 8811 	msr	BASEPRI, r3
 80102b2:	f3bf 8f6f 	isb	sy
 80102b6:	f3bf 8f4f 	dsb	sy
 80102ba:	623b      	str	r3, [r7, #32]
 80102bc:	e7fe      	b.n	80102bc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d103      	bne.n	80102cc <xQueueReceiveFromISR+0x38>
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d101      	bne.n	80102d0 <xQueueReceiveFromISR+0x3c>
 80102cc:	2301      	movs	r3, #1
 80102ce:	e000      	b.n	80102d2 <xQueueReceiveFromISR+0x3e>
 80102d0:	2300      	movs	r3, #0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d109      	bne.n	80102ea <xQueueReceiveFromISR+0x56>
 80102d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102da:	f383 8811 	msr	BASEPRI, r3
 80102de:	f3bf 8f6f 	isb	sy
 80102e2:	f3bf 8f4f 	dsb	sy
 80102e6:	61fb      	str	r3, [r7, #28]
 80102e8:	e7fe      	b.n	80102e8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102ea:	f001 ff73 	bl	80121d4 <vPortValidateInterruptPriority>
	__asm volatile
 80102ee:	f3ef 8211 	mrs	r2, BASEPRI
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	61ba      	str	r2, [r7, #24]
 8010304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010308:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	2b00      	cmp	r3, #0
 8010314:	d02f      	beq.n	8010376 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801031c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010320:	68b9      	ldr	r1, [r7, #8]
 8010322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010324:	f000 f89d 	bl	8010462 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032a:	1e5a      	subs	r2, r3, #1
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010338:	d112      	bne.n	8010360 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d016      	beq.n	8010370 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010344:	3310      	adds	r3, #16
 8010346:	4618      	mov	r0, r3
 8010348:	f000 feae 	bl	80110a8 <xTaskRemoveFromEventList>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00e      	beq.n	8010370 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00b      	beq.n	8010370 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	601a      	str	r2, [r3, #0]
 801035e:	e007      	b.n	8010370 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010364:	3301      	adds	r3, #1
 8010366:	b2db      	uxtb	r3, r3
 8010368:	b25a      	sxtb	r2, r3
 801036a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010370:	2301      	movs	r3, #1
 8010372:	637b      	str	r3, [r7, #52]	; 0x34
 8010374:	e001      	b.n	801037a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8010376:	2300      	movs	r3, #0
 8010378:	637b      	str	r3, [r7, #52]	; 0x34
 801037a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010386:	4618      	mov	r0, r3
 8010388:	3738      	adds	r7, #56	; 0x38
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b086      	sub	sp, #24
 8010392:	af00      	add	r7, sp, #0
 8010394:	60f8      	str	r0, [r7, #12]
 8010396:	60b9      	str	r1, [r7, #8]
 8010398:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801039a:	2300      	movs	r3, #0
 801039c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d10d      	bne.n	80103c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d14d      	bne.n	8010450 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f001 f849 	bl	8011450 <xTaskPriorityDisinherit>
 80103be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	609a      	str	r2, [r3, #8]
 80103c6:	e043      	b.n	8010450 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d119      	bne.n	8010402 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6858      	ldr	r0, [r3, #4]
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103d6:	461a      	mov	r2, r3
 80103d8:	68b9      	ldr	r1, [r7, #8]
 80103da:	f002 fc4b 	bl	8012c74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	685a      	ldr	r2, [r3, #4]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103e6:	441a      	add	r2, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	685a      	ldr	r2, [r3, #4]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d32b      	bcc.n	8010450 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	605a      	str	r2, [r3, #4]
 8010400:	e026      	b.n	8010450 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	68d8      	ldr	r0, [r3, #12]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801040a:	461a      	mov	r2, r3
 801040c:	68b9      	ldr	r1, [r7, #8]
 801040e:	f002 fc31 	bl	8012c74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	68da      	ldr	r2, [r3, #12]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801041a:	425b      	negs	r3, r3
 801041c:	441a      	add	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	68da      	ldr	r2, [r3, #12]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	429a      	cmp	r2, r3
 801042c:	d207      	bcs.n	801043e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	689a      	ldr	r2, [r3, #8]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010436:	425b      	negs	r3, r3
 8010438:	441a      	add	r2, r3
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2b02      	cmp	r3, #2
 8010442:	d105      	bne.n	8010450 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d002      	beq.n	8010450 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	3b01      	subs	r3, #1
 801044e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	1c5a      	adds	r2, r3, #1
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010458:	697b      	ldr	r3, [r7, #20]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3718      	adds	r7, #24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010462:	b580      	push	{r7, lr}
 8010464:	b082      	sub	sp, #8
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
 801046a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010470:	2b00      	cmp	r3, #0
 8010472:	d018      	beq.n	80104a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	68da      	ldr	r2, [r3, #12]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801047c:	441a      	add	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68da      	ldr	r2, [r3, #12]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	689b      	ldr	r3, [r3, #8]
 801048a:	429a      	cmp	r2, r3
 801048c:	d303      	bcc.n	8010496 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68d9      	ldr	r1, [r3, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801049e:	461a      	mov	r2, r3
 80104a0:	6838      	ldr	r0, [r7, #0]
 80104a2:	f002 fbe7 	bl	8012c74 <memcpy>
	}
}
 80104a6:	bf00      	nop
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b084      	sub	sp, #16
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80104b6:	f001 fdb1 	bl	801201c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104c2:	e011      	b.n	80104e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d012      	beq.n	80104f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	3324      	adds	r3, #36	; 0x24
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 fde9 	bl	80110a8 <xTaskRemoveFromEventList>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80104dc:	f000 febc 	bl	8011258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80104e0:	7bfb      	ldrb	r3, [r7, #15]
 80104e2:	3b01      	subs	r3, #1
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	dce9      	bgt.n	80104c4 <prvUnlockQueue+0x16>
 80104f0:	e000      	b.n	80104f4 <prvUnlockQueue+0x46>
					break;
 80104f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	22ff      	movs	r2, #255	; 0xff
 80104f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80104fc:	f001 fdbc 	bl	8012078 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010500:	f001 fd8c 	bl	801201c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801050a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801050c:	e011      	b.n	8010532 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d012      	beq.n	801053c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	3310      	adds	r3, #16
 801051a:	4618      	mov	r0, r3
 801051c:	f000 fdc4 	bl	80110a8 <xTaskRemoveFromEventList>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010526:	f000 fe97 	bl	8011258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801052a:	7bbb      	ldrb	r3, [r7, #14]
 801052c:	3b01      	subs	r3, #1
 801052e:	b2db      	uxtb	r3, r3
 8010530:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010536:	2b00      	cmp	r3, #0
 8010538:	dce9      	bgt.n	801050e <prvUnlockQueue+0x60>
 801053a:	e000      	b.n	801053e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801053c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	22ff      	movs	r2, #255	; 0xff
 8010542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010546:	f001 fd97 	bl	8012078 <vPortExitCritical>
}
 801054a:	bf00      	nop
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b084      	sub	sp, #16
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801055a:	f001 fd5f 	bl	801201c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010562:	2b00      	cmp	r3, #0
 8010564:	d102      	bne.n	801056c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010566:	2301      	movs	r3, #1
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	e001      	b.n	8010570 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801056c:	2300      	movs	r3, #0
 801056e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010570:	f001 fd82 	bl	8012078 <vPortExitCritical>

	return xReturn;
 8010574:	68fb      	ldr	r3, [r7, #12]
}
 8010576:	4618      	mov	r0, r3
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010586:	f001 fd49 	bl	801201c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010592:	429a      	cmp	r2, r3
 8010594:	d102      	bne.n	801059c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010596:	2301      	movs	r3, #1
 8010598:	60fb      	str	r3, [r7, #12]
 801059a:	e001      	b.n	80105a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801059c:	2300      	movs	r3, #0
 801059e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105a0:	f001 fd6a 	bl	8012078 <vPortExitCritical>

	return xReturn;
 80105a4:	68fb      	ldr	r3, [r7, #12]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
	...

080105b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80105b0:	b480      	push	{r7}
 80105b2:	b085      	sub	sp, #20
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80105ba:	2300      	movs	r3, #0
 80105bc:	60fb      	str	r3, [r7, #12]
 80105be:	e014      	b.n	80105ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80105c0:	4a0e      	ldr	r2, [pc, #56]	; (80105fc <vQueueAddToRegistry+0x4c>)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d10b      	bne.n	80105e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80105cc:	490b      	ldr	r1, [pc, #44]	; (80105fc <vQueueAddToRegistry+0x4c>)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	683a      	ldr	r2, [r7, #0]
 80105d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80105d6:	4a09      	ldr	r2, [pc, #36]	; (80105fc <vQueueAddToRegistry+0x4c>)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	4413      	add	r3, r2
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80105e2:	e005      	b.n	80105f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3301      	adds	r3, #1
 80105e8:	60fb      	str	r3, [r7, #12]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2b07      	cmp	r3, #7
 80105ee:	d9e7      	bls.n	80105c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80105f0:	bf00      	nop
 80105f2:	3714      	adds	r7, #20
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	200053e8 	.word	0x200053e8

08010600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010610:	f001 fd04 	bl	801201c <vPortEnterCritical>
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801061a:	b25b      	sxtb	r3, r3
 801061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010620:	d103      	bne.n	801062a <vQueueWaitForMessageRestricted+0x2a>
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	2200      	movs	r2, #0
 8010626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010630:	b25b      	sxtb	r3, r3
 8010632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010636:	d103      	bne.n	8010640 <vQueueWaitForMessageRestricted+0x40>
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010640:	f001 fd1a 	bl	8012078 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010648:	2b00      	cmp	r3, #0
 801064a:	d106      	bne.n	801065a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	3324      	adds	r3, #36	; 0x24
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	68b9      	ldr	r1, [r7, #8]
 8010654:	4618      	mov	r0, r3
 8010656:	f000 fcfd 	bl	8011054 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801065a:	6978      	ldr	r0, [r7, #20]
 801065c:	f7ff ff27 	bl	80104ae <prvUnlockQueue>
	}
 8010660:	bf00      	nop
 8010662:	3718      	adds	r7, #24
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010668:	b580      	push	{r7, lr}
 801066a:	b08e      	sub	sp, #56	; 0x38
 801066c:	af04      	add	r7, sp, #16
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010678:	2b00      	cmp	r3, #0
 801067a:	d109      	bne.n	8010690 <xTaskCreateStatic+0x28>
	__asm volatile
 801067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010680:	f383 8811 	msr	BASEPRI, r3
 8010684:	f3bf 8f6f 	isb	sy
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	623b      	str	r3, [r7, #32]
 801068e:	e7fe      	b.n	801068e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010692:	2b00      	cmp	r3, #0
 8010694:	d109      	bne.n	80106aa <xTaskCreateStatic+0x42>
 8010696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	61fb      	str	r3, [r7, #28]
 80106a8:	e7fe      	b.n	80106a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80106aa:	235c      	movs	r3, #92	; 0x5c
 80106ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	2b5c      	cmp	r3, #92	; 0x5c
 80106b2:	d009      	beq.n	80106c8 <xTaskCreateStatic+0x60>
 80106b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b8:	f383 8811 	msr	BASEPRI, r3
 80106bc:	f3bf 8f6f 	isb	sy
 80106c0:	f3bf 8f4f 	dsb	sy
 80106c4:	61bb      	str	r3, [r7, #24]
 80106c6:	e7fe      	b.n	80106c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80106c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01e      	beq.n	801070e <xTaskCreateStatic+0xa6>
 80106d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d01b      	beq.n	801070e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80106da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	2202      	movs	r2, #2
 80106e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80106e8:	2300      	movs	r3, #0
 80106ea:	9303      	str	r3, [sp, #12]
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	9302      	str	r3, [sp, #8]
 80106f0:	f107 0314 	add.w	r3, r7, #20
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	9300      	str	r3, [sp, #0]
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	68b9      	ldr	r1, [r7, #8]
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f000 f850 	bl	80107a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010708:	f000 f8dc 	bl	80108c4 <prvAddNewTaskToReadyList>
 801070c:	e001      	b.n	8010712 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801070e:	2300      	movs	r3, #0
 8010710:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010712:	697b      	ldr	r3, [r7, #20]
	}
 8010714:	4618      	mov	r0, r3
 8010716:	3728      	adds	r7, #40	; 0x28
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801071c:	b580      	push	{r7, lr}
 801071e:	b08c      	sub	sp, #48	; 0x30
 8010720:	af04      	add	r7, sp, #16
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	603b      	str	r3, [r7, #0]
 8010728:	4613      	mov	r3, r2
 801072a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801072c:	88fb      	ldrh	r3, [r7, #6]
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	4618      	mov	r0, r3
 8010732:	f001 fd8d 	bl	8012250 <pvPortMalloc>
 8010736:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00e      	beq.n	801075c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801073e:	205c      	movs	r0, #92	; 0x5c
 8010740:	f001 fd86 	bl	8012250 <pvPortMalloc>
 8010744:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d003      	beq.n	8010754 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	697a      	ldr	r2, [r7, #20]
 8010750:	631a      	str	r2, [r3, #48]	; 0x30
 8010752:	e005      	b.n	8010760 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010754:	6978      	ldr	r0, [r7, #20]
 8010756:	f001 fe3d 	bl	80123d4 <vPortFree>
 801075a:	e001      	b.n	8010760 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801075c:	2300      	movs	r3, #0
 801075e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d017      	beq.n	8010796 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801076e:	88fa      	ldrh	r2, [r7, #6]
 8010770:	2300      	movs	r3, #0
 8010772:	9303      	str	r3, [sp, #12]
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	9302      	str	r3, [sp, #8]
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	9301      	str	r3, [sp, #4]
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	68b9      	ldr	r1, [r7, #8]
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f000 f80e 	bl	80107a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801078a:	69f8      	ldr	r0, [r7, #28]
 801078c:	f000 f89a 	bl	80108c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010790:	2301      	movs	r3, #1
 8010792:	61bb      	str	r3, [r7, #24]
 8010794:	e002      	b.n	801079c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010796:	f04f 33ff 	mov.w	r3, #4294967295
 801079a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801079c:	69bb      	ldr	r3, [r7, #24]
	}
 801079e:	4618      	mov	r0, r3
 80107a0:	3720      	adds	r7, #32
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b088      	sub	sp, #32
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	60f8      	str	r0, [r7, #12]
 80107ae:	60b9      	str	r1, [r7, #8]
 80107b0:	607a      	str	r2, [r7, #4]
 80107b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80107b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	461a      	mov	r2, r3
 80107be:	21a5      	movs	r1, #165	; 0xa5
 80107c0:	f002 fa63 	bl	8012c8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80107ce:	3b01      	subs	r3, #1
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	4413      	add	r3, r2
 80107d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	f023 0307 	bic.w	r3, r3, #7
 80107dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	f003 0307 	and.w	r3, r3, #7
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d009      	beq.n	80107fc <prvInitialiseNewTask+0x56>
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	f383 8811 	msr	BASEPRI, r3
 80107f0:	f3bf 8f6f 	isb	sy
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	617b      	str	r3, [r7, #20]
 80107fa:	e7fe      	b.n	80107fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d01f      	beq.n	8010842 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010802:	2300      	movs	r3, #0
 8010804:	61fb      	str	r3, [r7, #28]
 8010806:	e012      	b.n	801082e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010808:	68ba      	ldr	r2, [r7, #8]
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	4413      	add	r3, r2
 801080e:	7819      	ldrb	r1, [r3, #0]
 8010810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	4413      	add	r3, r2
 8010816:	3334      	adds	r3, #52	; 0x34
 8010818:	460a      	mov	r2, r1
 801081a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801081c:	68ba      	ldr	r2, [r7, #8]
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	4413      	add	r3, r2
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d006      	beq.n	8010836 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	3301      	adds	r3, #1
 801082c:	61fb      	str	r3, [r7, #28]
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	2b0f      	cmp	r3, #15
 8010832:	d9e9      	bls.n	8010808 <prvInitialiseNewTask+0x62>
 8010834:	e000      	b.n	8010838 <prvInitialiseNewTask+0x92>
			{
				break;
 8010836:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083a:	2200      	movs	r2, #0
 801083c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010840:	e003      	b.n	801084a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010844:	2200      	movs	r2, #0
 8010846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	2b37      	cmp	r3, #55	; 0x37
 801084e:	d901      	bls.n	8010854 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010850:	2337      	movs	r3, #55	; 0x37
 8010852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801085e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010862:	2200      	movs	r2, #0
 8010864:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	3304      	adds	r3, #4
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff f8d6 	bl	800fa1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	3318      	adds	r3, #24
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff f8d1 	bl	800fa1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801087e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010888:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801088e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010892:	2200      	movs	r2, #0
 8010894:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010898:	2200      	movs	r2, #0
 801089a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	68f9      	ldr	r1, [r7, #12]
 80108a2:	69b8      	ldr	r0, [r7, #24]
 80108a4:	f001 fa92 	bl	8011dcc <pxPortInitialiseStack>
 80108a8:	4602      	mov	r2, r0
 80108aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80108ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d002      	beq.n	80108ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80108b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108ba:	bf00      	nop
 80108bc:	3720      	adds	r7, #32
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
	...

080108c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80108cc:	f001 fba6 	bl	801201c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80108d0:	4b2d      	ldr	r3, [pc, #180]	; (8010988 <prvAddNewTaskToReadyList+0xc4>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	3301      	adds	r3, #1
 80108d6:	4a2c      	ldr	r2, [pc, #176]	; (8010988 <prvAddNewTaskToReadyList+0xc4>)
 80108d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80108da:	4b2c      	ldr	r3, [pc, #176]	; (801098c <prvAddNewTaskToReadyList+0xc8>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d109      	bne.n	80108f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80108e2:	4a2a      	ldr	r2, [pc, #168]	; (801098c <prvAddNewTaskToReadyList+0xc8>)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80108e8:	4b27      	ldr	r3, [pc, #156]	; (8010988 <prvAddNewTaskToReadyList+0xc4>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d110      	bne.n	8010912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80108f0:	f000 fcd6 	bl	80112a0 <prvInitialiseTaskLists>
 80108f4:	e00d      	b.n	8010912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80108f6:	4b26      	ldr	r3, [pc, #152]	; (8010990 <prvAddNewTaskToReadyList+0xcc>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d109      	bne.n	8010912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80108fe:	4b23      	ldr	r3, [pc, #140]	; (801098c <prvAddNewTaskToReadyList+0xc8>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010908:	429a      	cmp	r2, r3
 801090a:	d802      	bhi.n	8010912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801090c:	4a1f      	ldr	r2, [pc, #124]	; (801098c <prvAddNewTaskToReadyList+0xc8>)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010912:	4b20      	ldr	r3, [pc, #128]	; (8010994 <prvAddNewTaskToReadyList+0xd0>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	3301      	adds	r3, #1
 8010918:	4a1e      	ldr	r2, [pc, #120]	; (8010994 <prvAddNewTaskToReadyList+0xd0>)
 801091a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801091c:	4b1d      	ldr	r3, [pc, #116]	; (8010994 <prvAddNewTaskToReadyList+0xd0>)
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010928:	4b1b      	ldr	r3, [pc, #108]	; (8010998 <prvAddNewTaskToReadyList+0xd4>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	429a      	cmp	r2, r3
 801092e:	d903      	bls.n	8010938 <prvAddNewTaskToReadyList+0x74>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010934:	4a18      	ldr	r2, [pc, #96]	; (8010998 <prvAddNewTaskToReadyList+0xd4>)
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801093c:	4613      	mov	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4a15      	ldr	r2, [pc, #84]	; (801099c <prvAddNewTaskToReadyList+0xd8>)
 8010946:	441a      	add	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	3304      	adds	r3, #4
 801094c:	4619      	mov	r1, r3
 801094e:	4610      	mov	r0, r2
 8010950:	f7ff f871 	bl	800fa36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010954:	f001 fb90 	bl	8012078 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010958:	4b0d      	ldr	r3, [pc, #52]	; (8010990 <prvAddNewTaskToReadyList+0xcc>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00e      	beq.n	801097e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010960:	4b0a      	ldr	r3, [pc, #40]	; (801098c <prvAddNewTaskToReadyList+0xc8>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801096a:	429a      	cmp	r2, r3
 801096c:	d207      	bcs.n	801097e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801096e:	4b0c      	ldr	r3, [pc, #48]	; (80109a0 <prvAddNewTaskToReadyList+0xdc>)
 8010970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801097e:	bf00      	nop
 8010980:	3708      	adds	r7, #8
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20000d34 	.word	0x20000d34
 801098c:	20000860 	.word	0x20000860
 8010990:	20000d40 	.word	0x20000d40
 8010994:	20000d50 	.word	0x20000d50
 8010998:	20000d3c 	.word	0x20000d3c
 801099c:	20000864 	.word	0x20000864
 80109a0:	e000ed04 	.word	0xe000ed04

080109a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80109ac:	f001 fb36 	bl	801201c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d102      	bne.n	80109bc <vTaskSuspend+0x18>
 80109b6:	4b2f      	ldr	r3, [pc, #188]	; (8010a74 <vTaskSuspend+0xd0>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	e000      	b.n	80109be <vTaskSuspend+0x1a>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	3304      	adds	r3, #4
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff f893 	bl	800faf0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d004      	beq.n	80109dc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3318      	adds	r3, #24
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7ff f88a 	bl	800faf0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	3304      	adds	r3, #4
 80109e0:	4619      	mov	r1, r3
 80109e2:	4825      	ldr	r0, [pc, #148]	; (8010a78 <vTaskSuspend+0xd4>)
 80109e4:	f7ff f827 	bl	800fa36 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d103      	bne.n	80109fc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80109fc:	f001 fb3c 	bl	8012078 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8010a00:	4b1e      	ldr	r3, [pc, #120]	; (8010a7c <vTaskSuspend+0xd8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d005      	beq.n	8010a14 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8010a08:	f001 fb08 	bl	801201c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8010a0c:	f000 fce2 	bl	80113d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8010a10:	f001 fb32 	bl	8012078 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8010a14:	4b17      	ldr	r3, [pc, #92]	; (8010a74 <vTaskSuspend+0xd0>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d126      	bne.n	8010a6c <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8010a1e:	4b17      	ldr	r3, [pc, #92]	; (8010a7c <vTaskSuspend+0xd8>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d016      	beq.n	8010a54 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8010a26:	4b16      	ldr	r3, [pc, #88]	; (8010a80 <vTaskSuspend+0xdc>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d009      	beq.n	8010a42 <vTaskSuspend+0x9e>
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	60bb      	str	r3, [r7, #8]
 8010a40:	e7fe      	b.n	8010a40 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8010a42:	4b10      	ldr	r3, [pc, #64]	; (8010a84 <vTaskSuspend+0xe0>)
 8010a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a52:	e00b      	b.n	8010a6c <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8010a54:	4b08      	ldr	r3, [pc, #32]	; (8010a78 <vTaskSuspend+0xd4>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <vTaskSuspend+0xe4>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d103      	bne.n	8010a68 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8010a60:	4b04      	ldr	r3, [pc, #16]	; (8010a74 <vTaskSuspend+0xd0>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	601a      	str	r2, [r3, #0]
	}
 8010a66:	e001      	b.n	8010a6c <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8010a68:	f000 fa74 	bl	8010f54 <vTaskSwitchContext>
	}
 8010a6c:	bf00      	nop
 8010a6e:	3710      	adds	r7, #16
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	20000860 	.word	0x20000860
 8010a78:	20000d20 	.word	0x20000d20
 8010a7c:	20000d40 	.word	0x20000d40
 8010a80:	20000d5c 	.word	0x20000d5c
 8010a84:	e000ed04 	.word	0xe000ed04
 8010a88:	20000d34 	.word	0x20000d34

08010a8c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b087      	sub	sp, #28
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010a94:	2300      	movs	r3, #0
 8010a96:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d109      	bne.n	8010ab6 <prvTaskIsTaskSuspended+0x2a>
 8010aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa6:	f383 8811 	msr	BASEPRI, r3
 8010aaa:	f3bf 8f6f 	isb	sy
 8010aae:	f3bf 8f4f 	dsb	sy
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e7fe      	b.n	8010ab4 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	695b      	ldr	r3, [r3, #20]
 8010aba:	4a0a      	ldr	r2, [pc, #40]	; (8010ae4 <prvTaskIsTaskSuspended+0x58>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d10a      	bne.n	8010ad6 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ac4:	4a08      	ldr	r2, [pc, #32]	; (8010ae8 <prvTaskIsTaskSuspended+0x5c>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d005      	beq.n	8010ad6 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ad6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010ad8:	4618      	mov	r0, r3
 8010ada:	371c      	adds	r7, #28
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr
 8010ae4:	20000d20 	.word	0x20000d20
 8010ae8:	20000cf4 	.word	0x20000cf4

08010aec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d109      	bne.n	8010b12 <vTaskResume+0x26>
 8010afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b02:	f383 8811 	msr	BASEPRI, r3
 8010b06:	f3bf 8f6f 	isb	sy
 8010b0a:	f3bf 8f4f 	dsb	sy
 8010b0e:	60bb      	str	r3, [r7, #8]
 8010b10:	e7fe      	b.n	8010b10 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8010b12:	4b21      	ldr	r3, [pc, #132]	; (8010b98 <vTaskResume+0xac>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d038      	beq.n	8010b8e <vTaskResume+0xa2>
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d035      	beq.n	8010b8e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8010b22:	f001 fa7b 	bl	801201c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f7ff ffb0 	bl	8010a8c <prvTaskIsTaskSuspended>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d02b      	beq.n	8010b8a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	3304      	adds	r3, #4
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fe ffda 	bl	800faf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b40:	4b16      	ldr	r3, [pc, #88]	; (8010b9c <vTaskResume+0xb0>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d903      	bls.n	8010b50 <vTaskResume+0x64>
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b4c:	4a13      	ldr	r2, [pc, #76]	; (8010b9c <vTaskResume+0xb0>)
 8010b4e:	6013      	str	r3, [r2, #0]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b54:	4613      	mov	r3, r2
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	4413      	add	r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	4a10      	ldr	r2, [pc, #64]	; (8010ba0 <vTaskResume+0xb4>)
 8010b5e:	441a      	add	r2, r3
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	3304      	adds	r3, #4
 8010b64:	4619      	mov	r1, r3
 8010b66:	4610      	mov	r0, r2
 8010b68:	f7fe ff65 	bl	800fa36 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b70:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <vTaskResume+0xac>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d307      	bcc.n	8010b8a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010b7a:	4b0a      	ldr	r3, [pc, #40]	; (8010ba4 <vTaskResume+0xb8>)
 8010b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b80:	601a      	str	r2, [r3, #0]
 8010b82:	f3bf 8f4f 	dsb	sy
 8010b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010b8a:	f001 fa75 	bl	8012078 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b8e:	bf00      	nop
 8010b90:	3710      	adds	r7, #16
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	20000860 	.word	0x20000860
 8010b9c:	20000d3c 	.word	0x20000d3c
 8010ba0:	20000864 	.word	0x20000864
 8010ba4:	e000ed04 	.word	0xe000ed04

08010ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b08a      	sub	sp, #40	; 0x28
 8010bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bb6:	463a      	mov	r2, r7
 8010bb8:	1d39      	adds	r1, r7, #4
 8010bba:	f107 0308 	add.w	r3, r7, #8
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fe fed8 	bl	800f974 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010bc4:	6839      	ldr	r1, [r7, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	68ba      	ldr	r2, [r7, #8]
 8010bca:	9202      	str	r2, [sp, #8]
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	2300      	movs	r3, #0
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	460a      	mov	r2, r1
 8010bd6:	4920      	ldr	r1, [pc, #128]	; (8010c58 <vTaskStartScheduler+0xb0>)
 8010bd8:	4820      	ldr	r0, [pc, #128]	; (8010c5c <vTaskStartScheduler+0xb4>)
 8010bda:	f7ff fd45 	bl	8010668 <xTaskCreateStatic>
 8010bde:	4602      	mov	r2, r0
 8010be0:	4b1f      	ldr	r3, [pc, #124]	; (8010c60 <vTaskStartScheduler+0xb8>)
 8010be2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010be4:	4b1e      	ldr	r3, [pc, #120]	; (8010c60 <vTaskStartScheduler+0xb8>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010bec:	2301      	movs	r3, #1
 8010bee:	617b      	str	r3, [r7, #20]
 8010bf0:	e001      	b.n	8010bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d102      	bne.n	8010c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010bfc:	f000 fce8 	bl	80115d0 <xTimerCreateTimerTask>
 8010c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d115      	bne.n	8010c34 <vTaskStartScheduler+0x8c>
 8010c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0c:	f383 8811 	msr	BASEPRI, r3
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	f3bf 8f4f 	dsb	sy
 8010c18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c1a:	4b12      	ldr	r3, [pc, #72]	; (8010c64 <vTaskStartScheduler+0xbc>)
 8010c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c22:	4b11      	ldr	r3, [pc, #68]	; (8010c68 <vTaskStartScheduler+0xc0>)
 8010c24:	2201      	movs	r2, #1
 8010c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c28:	4b10      	ldr	r3, [pc, #64]	; (8010c6c <vTaskStartScheduler+0xc4>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c2e:	f001 f957 	bl	8011ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c32:	e00d      	b.n	8010c50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c3a:	d109      	bne.n	8010c50 <vTaskStartScheduler+0xa8>
 8010c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	60fb      	str	r3, [r7, #12]
 8010c4e:	e7fe      	b.n	8010c4e <vTaskStartScheduler+0xa6>
}
 8010c50:	bf00      	nop
 8010c52:	3718      	adds	r7, #24
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	080135bc 	.word	0x080135bc
 8010c5c:	08011271 	.word	0x08011271
 8010c60:	20000d58 	.word	0x20000d58
 8010c64:	20000d54 	.word	0x20000d54
 8010c68:	20000d40 	.word	0x20000d40
 8010c6c:	20000d38 	.word	0x20000d38

08010c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c70:	b480      	push	{r7}
 8010c72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010c74:	4b04      	ldr	r3, [pc, #16]	; (8010c88 <vTaskSuspendAll+0x18>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	3301      	adds	r3, #1
 8010c7a:	4a03      	ldr	r2, [pc, #12]	; (8010c88 <vTaskSuspendAll+0x18>)
 8010c7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010c7e:	bf00      	nop
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr
 8010c88:	20000d5c 	.word	0x20000d5c

08010c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c92:	2300      	movs	r3, #0
 8010c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c96:	2300      	movs	r3, #0
 8010c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c9a:	4b41      	ldr	r3, [pc, #260]	; (8010da0 <xTaskResumeAll+0x114>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d109      	bne.n	8010cb6 <xTaskResumeAll+0x2a>
 8010ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca6:	f383 8811 	msr	BASEPRI, r3
 8010caa:	f3bf 8f6f 	isb	sy
 8010cae:	f3bf 8f4f 	dsb	sy
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	e7fe      	b.n	8010cb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010cb6:	f001 f9b1 	bl	801201c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010cba:	4b39      	ldr	r3, [pc, #228]	; (8010da0 <xTaskResumeAll+0x114>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	4a37      	ldr	r2, [pc, #220]	; (8010da0 <xTaskResumeAll+0x114>)
 8010cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cc4:	4b36      	ldr	r3, [pc, #216]	; (8010da0 <xTaskResumeAll+0x114>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d162      	bne.n	8010d92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ccc:	4b35      	ldr	r3, [pc, #212]	; (8010da4 <xTaskResumeAll+0x118>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d05e      	beq.n	8010d92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cd4:	e02f      	b.n	8010d36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cd6:	4b34      	ldr	r3, [pc, #208]	; (8010da8 <xTaskResumeAll+0x11c>)
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	68db      	ldr	r3, [r3, #12]
 8010cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	3318      	adds	r3, #24
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fe ff04 	bl	800faf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	3304      	adds	r3, #4
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fe feff 	bl	800faf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf6:	4b2d      	ldr	r3, [pc, #180]	; (8010dac <xTaskResumeAll+0x120>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d903      	bls.n	8010d06 <xTaskResumeAll+0x7a>
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d02:	4a2a      	ldr	r2, [pc, #168]	; (8010dac <xTaskResumeAll+0x120>)
 8010d04:	6013      	str	r3, [r2, #0]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	4a27      	ldr	r2, [pc, #156]	; (8010db0 <xTaskResumeAll+0x124>)
 8010d14:	441a      	add	r2, r3
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	3304      	adds	r3, #4
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	4610      	mov	r0, r2
 8010d1e:	f7fe fe8a 	bl	800fa36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d26:	4b23      	ldr	r3, [pc, #140]	; (8010db4 <xTaskResumeAll+0x128>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d302      	bcc.n	8010d36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010d30:	4b21      	ldr	r3, [pc, #132]	; (8010db8 <xTaskResumeAll+0x12c>)
 8010d32:	2201      	movs	r2, #1
 8010d34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d36:	4b1c      	ldr	r3, [pc, #112]	; (8010da8 <xTaskResumeAll+0x11c>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1cb      	bne.n	8010cd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d44:	f000 fb46 	bl	80113d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010d48:	4b1c      	ldr	r3, [pc, #112]	; (8010dbc <xTaskResumeAll+0x130>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d010      	beq.n	8010d76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d54:	f000 f846 	bl	8010de4 <xTaskIncrementTick>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d002      	beq.n	8010d64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010d5e:	4b16      	ldr	r3, [pc, #88]	; (8010db8 <xTaskResumeAll+0x12c>)
 8010d60:	2201      	movs	r2, #1
 8010d62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	3b01      	subs	r3, #1
 8010d68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d1f1      	bne.n	8010d54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010d70:	4b12      	ldr	r3, [pc, #72]	; (8010dbc <xTaskResumeAll+0x130>)
 8010d72:	2200      	movs	r2, #0
 8010d74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d76:	4b10      	ldr	r3, [pc, #64]	; (8010db8 <xTaskResumeAll+0x12c>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d009      	beq.n	8010d92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d82:	4b0f      	ldr	r3, [pc, #60]	; (8010dc0 <xTaskResumeAll+0x134>)
 8010d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d92:	f001 f971 	bl	8012078 <vPortExitCritical>

	return xAlreadyYielded;
 8010d96:	68bb      	ldr	r3, [r7, #8]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	20000d5c 	.word	0x20000d5c
 8010da4:	20000d34 	.word	0x20000d34
 8010da8:	20000cf4 	.word	0x20000cf4
 8010dac:	20000d3c 	.word	0x20000d3c
 8010db0:	20000864 	.word	0x20000864
 8010db4:	20000860 	.word	0x20000860
 8010db8:	20000d48 	.word	0x20000d48
 8010dbc:	20000d44 	.word	0x20000d44
 8010dc0:	e000ed04 	.word	0xe000ed04

08010dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010dca:	4b05      	ldr	r3, [pc, #20]	; (8010de0 <xTaskGetTickCount+0x1c>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010dd0:	687b      	ldr	r3, [r7, #4]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	370c      	adds	r7, #12
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	20000d38 	.word	0x20000d38

08010de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010dea:	2300      	movs	r3, #0
 8010dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010dee:	4b4e      	ldr	r3, [pc, #312]	; (8010f28 <xTaskIncrementTick+0x144>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f040 8088 	bne.w	8010f08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010df8:	4b4c      	ldr	r3, [pc, #304]	; (8010f2c <xTaskIncrementTick+0x148>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e00:	4a4a      	ldr	r2, [pc, #296]	; (8010f2c <xTaskIncrementTick+0x148>)
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d11f      	bne.n	8010e4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e0c:	4b48      	ldr	r3, [pc, #288]	; (8010f30 <xTaskIncrementTick+0x14c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d009      	beq.n	8010e2a <xTaskIncrementTick+0x46>
 8010e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1a:	f383 8811 	msr	BASEPRI, r3
 8010e1e:	f3bf 8f6f 	isb	sy
 8010e22:	f3bf 8f4f 	dsb	sy
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	e7fe      	b.n	8010e28 <xTaskIncrementTick+0x44>
 8010e2a:	4b41      	ldr	r3, [pc, #260]	; (8010f30 <xTaskIncrementTick+0x14c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	4b40      	ldr	r3, [pc, #256]	; (8010f34 <xTaskIncrementTick+0x150>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	4a3e      	ldr	r2, [pc, #248]	; (8010f30 <xTaskIncrementTick+0x14c>)
 8010e36:	6013      	str	r3, [r2, #0]
 8010e38:	4a3e      	ldr	r2, [pc, #248]	; (8010f34 <xTaskIncrementTick+0x150>)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6013      	str	r3, [r2, #0]
 8010e3e:	4b3e      	ldr	r3, [pc, #248]	; (8010f38 <xTaskIncrementTick+0x154>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3301      	adds	r3, #1
 8010e44:	4a3c      	ldr	r2, [pc, #240]	; (8010f38 <xTaskIncrementTick+0x154>)
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	f000 fac4 	bl	80113d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e4c:	4b3b      	ldr	r3, [pc, #236]	; (8010f3c <xTaskIncrementTick+0x158>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	693a      	ldr	r2, [r7, #16]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d349      	bcc.n	8010eea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e56:	4b36      	ldr	r3, [pc, #216]	; (8010f30 <xTaskIncrementTick+0x14c>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d104      	bne.n	8010e6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e60:	4b36      	ldr	r3, [pc, #216]	; (8010f3c <xTaskIncrementTick+0x158>)
 8010e62:	f04f 32ff 	mov.w	r2, #4294967295
 8010e66:	601a      	str	r2, [r3, #0]
					break;
 8010e68:	e03f      	b.n	8010eea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e6a:	4b31      	ldr	r3, [pc, #196]	; (8010f30 <xTaskIncrementTick+0x14c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d203      	bcs.n	8010e8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e82:	4a2e      	ldr	r2, [pc, #184]	; (8010f3c <xTaskIncrementTick+0x158>)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e88:	e02f      	b.n	8010eea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fe fe2e 	bl	800faf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d004      	beq.n	8010ea6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	3318      	adds	r3, #24
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fe fe25 	bl	800faf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eaa:	4b25      	ldr	r3, [pc, #148]	; (8010f40 <xTaskIncrementTick+0x15c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d903      	bls.n	8010eba <xTaskIncrementTick+0xd6>
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eb6:	4a22      	ldr	r2, [pc, #136]	; (8010f40 <xTaskIncrementTick+0x15c>)
 8010eb8:	6013      	str	r3, [r2, #0]
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4a1f      	ldr	r2, [pc, #124]	; (8010f44 <xTaskIncrementTick+0x160>)
 8010ec8:	441a      	add	r2, r3
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	3304      	adds	r3, #4
 8010ece:	4619      	mov	r1, r3
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	f7fe fdb0 	bl	800fa36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eda:	4b1b      	ldr	r3, [pc, #108]	; (8010f48 <xTaskIncrementTick+0x164>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d3b8      	bcc.n	8010e56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ee8:	e7b5      	b.n	8010e56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010eea:	4b17      	ldr	r3, [pc, #92]	; (8010f48 <xTaskIncrementTick+0x164>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef0:	4914      	ldr	r1, [pc, #80]	; (8010f44 <xTaskIncrementTick+0x160>)
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	4413      	add	r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	440b      	add	r3, r1
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d907      	bls.n	8010f12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010f02:	2301      	movs	r3, #1
 8010f04:	617b      	str	r3, [r7, #20]
 8010f06:	e004      	b.n	8010f12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010f08:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <xTaskIncrementTick+0x168>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	4a0f      	ldr	r2, [pc, #60]	; (8010f4c <xTaskIncrementTick+0x168>)
 8010f10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010f12:	4b0f      	ldr	r3, [pc, #60]	; (8010f50 <xTaskIncrementTick+0x16c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010f1e:	697b      	ldr	r3, [r7, #20]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3718      	adds	r7, #24
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	20000d5c 	.word	0x20000d5c
 8010f2c:	20000d38 	.word	0x20000d38
 8010f30:	20000cec 	.word	0x20000cec
 8010f34:	20000cf0 	.word	0x20000cf0
 8010f38:	20000d4c 	.word	0x20000d4c
 8010f3c:	20000d54 	.word	0x20000d54
 8010f40:	20000d3c 	.word	0x20000d3c
 8010f44:	20000864 	.word	0x20000864
 8010f48:	20000860 	.word	0x20000860
 8010f4c:	20000d44 	.word	0x20000d44
 8010f50:	20000d48 	.word	0x20000d48

08010f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f5a:	4b27      	ldr	r3, [pc, #156]	; (8010ff8 <vTaskSwitchContext+0xa4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d003      	beq.n	8010f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f62:	4b26      	ldr	r3, [pc, #152]	; (8010ffc <vTaskSwitchContext+0xa8>)
 8010f64:	2201      	movs	r2, #1
 8010f66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f68:	e040      	b.n	8010fec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010f6a:	4b24      	ldr	r3, [pc, #144]	; (8010ffc <vTaskSwitchContext+0xa8>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f70:	4b23      	ldr	r3, [pc, #140]	; (8011000 <vTaskSwitchContext+0xac>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	60fb      	str	r3, [r7, #12]
 8010f76:	e00f      	b.n	8010f98 <vTaskSwitchContext+0x44>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d109      	bne.n	8010f92 <vTaskSwitchContext+0x3e>
 8010f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f82:	f383 8811 	msr	BASEPRI, r3
 8010f86:	f3bf 8f6f 	isb	sy
 8010f8a:	f3bf 8f4f 	dsb	sy
 8010f8e:	607b      	str	r3, [r7, #4]
 8010f90:	e7fe      	b.n	8010f90 <vTaskSwitchContext+0x3c>
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	60fb      	str	r3, [r7, #12]
 8010f98:	491a      	ldr	r1, [pc, #104]	; (8011004 <vTaskSwitchContext+0xb0>)
 8010f9a:	68fa      	ldr	r2, [r7, #12]
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	4413      	add	r3, r2
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	440b      	add	r3, r1
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d0e5      	beq.n	8010f78 <vTaskSwitchContext+0x24>
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4413      	add	r3, r2
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	4a13      	ldr	r2, [pc, #76]	; (8011004 <vTaskSwitchContext+0xb0>)
 8010fb8:	4413      	add	r3, r2
 8010fba:	60bb      	str	r3, [r7, #8]
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	685a      	ldr	r2, [r3, #4]
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	605a      	str	r2, [r3, #4]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	685a      	ldr	r2, [r3, #4]
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	3308      	adds	r3, #8
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d104      	bne.n	8010fdc <vTaskSwitchContext+0x88>
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	685a      	ldr	r2, [r3, #4]
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	605a      	str	r2, [r3, #4]
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	4a09      	ldr	r2, [pc, #36]	; (8011008 <vTaskSwitchContext+0xb4>)
 8010fe4:	6013      	str	r3, [r2, #0]
 8010fe6:	4a06      	ldr	r2, [pc, #24]	; (8011000 <vTaskSwitchContext+0xac>)
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6013      	str	r3, [r2, #0]
}
 8010fec:	bf00      	nop
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	20000d5c 	.word	0x20000d5c
 8010ffc:	20000d48 	.word	0x20000d48
 8011000:	20000d3c 	.word	0x20000d3c
 8011004:	20000864 	.word	0x20000864
 8011008:	20000860 	.word	0x20000860

0801100c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d109      	bne.n	8011030 <vTaskPlaceOnEventList+0x24>
 801101c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011020:	f383 8811 	msr	BASEPRI, r3
 8011024:	f3bf 8f6f 	isb	sy
 8011028:	f3bf 8f4f 	dsb	sy
 801102c:	60fb      	str	r3, [r7, #12]
 801102e:	e7fe      	b.n	801102e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <vTaskPlaceOnEventList+0x44>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	3318      	adds	r3, #24
 8011036:	4619      	mov	r1, r3
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7fe fd20 	bl	800fa7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801103e:	2101      	movs	r1, #1
 8011040:	6838      	ldr	r0, [r7, #0]
 8011042:	f000 fa71 	bl	8011528 <prvAddCurrentTaskToDelayedList>
}
 8011046:	bf00      	nop
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	20000860 	.word	0x20000860

08011054 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d109      	bne.n	801107a <vTaskPlaceOnEventListRestricted+0x26>
 8011066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106a:	f383 8811 	msr	BASEPRI, r3
 801106e:	f3bf 8f6f 	isb	sy
 8011072:	f3bf 8f4f 	dsb	sy
 8011076:	617b      	str	r3, [r7, #20]
 8011078:	e7fe      	b.n	8011078 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801107a:	4b0a      	ldr	r3, [pc, #40]	; (80110a4 <vTaskPlaceOnEventListRestricted+0x50>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3318      	adds	r3, #24
 8011080:	4619      	mov	r1, r3
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f7fe fcd7 	bl	800fa36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801108e:	f04f 33ff 	mov.w	r3, #4294967295
 8011092:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011094:	6879      	ldr	r1, [r7, #4]
 8011096:	68b8      	ldr	r0, [r7, #8]
 8011098:	f000 fa46 	bl	8011528 <prvAddCurrentTaskToDelayedList>
	}
 801109c:	bf00      	nop
 801109e:	3718      	adds	r7, #24
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	20000860 	.word	0x20000860

080110a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d109      	bne.n	80110d2 <xTaskRemoveFromEventList+0x2a>
 80110be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c2:	f383 8811 	msr	BASEPRI, r3
 80110c6:	f3bf 8f6f 	isb	sy
 80110ca:	f3bf 8f4f 	dsb	sy
 80110ce:	60fb      	str	r3, [r7, #12]
 80110d0:	e7fe      	b.n	80110d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	3318      	adds	r3, #24
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fe fd0a 	bl	800faf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110dc:	4b1d      	ldr	r3, [pc, #116]	; (8011154 <xTaskRemoveFromEventList+0xac>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d11d      	bne.n	8011120 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	3304      	adds	r3, #4
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fe fd01 	bl	800faf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110f2:	4b19      	ldr	r3, [pc, #100]	; (8011158 <xTaskRemoveFromEventList+0xb0>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d903      	bls.n	8011102 <xTaskRemoveFromEventList+0x5a>
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fe:	4a16      	ldr	r2, [pc, #88]	; (8011158 <xTaskRemoveFromEventList+0xb0>)
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011106:	4613      	mov	r3, r2
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	4413      	add	r3, r2
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4a13      	ldr	r2, [pc, #76]	; (801115c <xTaskRemoveFromEventList+0xb4>)
 8011110:	441a      	add	r2, r3
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	3304      	adds	r3, #4
 8011116:	4619      	mov	r1, r3
 8011118:	4610      	mov	r0, r2
 801111a:	f7fe fc8c 	bl	800fa36 <vListInsertEnd>
 801111e:	e005      	b.n	801112c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	3318      	adds	r3, #24
 8011124:	4619      	mov	r1, r3
 8011126:	480e      	ldr	r0, [pc, #56]	; (8011160 <xTaskRemoveFromEventList+0xb8>)
 8011128:	f7fe fc85 	bl	800fa36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011130:	4b0c      	ldr	r3, [pc, #48]	; (8011164 <xTaskRemoveFromEventList+0xbc>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011136:	429a      	cmp	r2, r3
 8011138:	d905      	bls.n	8011146 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801113a:	2301      	movs	r3, #1
 801113c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801113e:	4b0a      	ldr	r3, [pc, #40]	; (8011168 <xTaskRemoveFromEventList+0xc0>)
 8011140:	2201      	movs	r2, #1
 8011142:	601a      	str	r2, [r3, #0]
 8011144:	e001      	b.n	801114a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011146:	2300      	movs	r3, #0
 8011148:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801114a:	697b      	ldr	r3, [r7, #20]
}
 801114c:	4618      	mov	r0, r3
 801114e:	3718      	adds	r7, #24
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	20000d5c 	.word	0x20000d5c
 8011158:	20000d3c 	.word	0x20000d3c
 801115c:	20000864 	.word	0x20000864
 8011160:	20000cf4 	.word	0x20000cf4
 8011164:	20000860 	.word	0x20000860
 8011168:	20000d48 	.word	0x20000d48

0801116c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011174:	4b06      	ldr	r3, [pc, #24]	; (8011190 <vTaskInternalSetTimeOutState+0x24>)
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801117c:	4b05      	ldr	r3, [pc, #20]	; (8011194 <vTaskInternalSetTimeOutState+0x28>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	605a      	str	r2, [r3, #4]
}
 8011184:	bf00      	nop
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr
 8011190:	20000d4c 	.word	0x20000d4c
 8011194:	20000d38 	.word	0x20000d38

08011198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b088      	sub	sp, #32
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d109      	bne.n	80111bc <xTaskCheckForTimeOut+0x24>
 80111a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ac:	f383 8811 	msr	BASEPRI, r3
 80111b0:	f3bf 8f6f 	isb	sy
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	613b      	str	r3, [r7, #16]
 80111ba:	e7fe      	b.n	80111ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d109      	bne.n	80111d6 <xTaskCheckForTimeOut+0x3e>
 80111c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c6:	f383 8811 	msr	BASEPRI, r3
 80111ca:	f3bf 8f6f 	isb	sy
 80111ce:	f3bf 8f4f 	dsb	sy
 80111d2:	60fb      	str	r3, [r7, #12]
 80111d4:	e7fe      	b.n	80111d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80111d6:	f000 ff21 	bl	801201c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80111da:	4b1d      	ldr	r3, [pc, #116]	; (8011250 <xTaskCheckForTimeOut+0xb8>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	69ba      	ldr	r2, [r7, #24]
 80111e6:	1ad3      	subs	r3, r2, r3
 80111e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f2:	d102      	bne.n	80111fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80111f4:	2300      	movs	r3, #0
 80111f6:	61fb      	str	r3, [r7, #28]
 80111f8:	e023      	b.n	8011242 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	4b15      	ldr	r3, [pc, #84]	; (8011254 <xTaskCheckForTimeOut+0xbc>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	429a      	cmp	r2, r3
 8011204:	d007      	beq.n	8011216 <xTaskCheckForTimeOut+0x7e>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	69ba      	ldr	r2, [r7, #24]
 801120c:	429a      	cmp	r2, r3
 801120e:	d302      	bcc.n	8011216 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011210:	2301      	movs	r3, #1
 8011212:	61fb      	str	r3, [r7, #28]
 8011214:	e015      	b.n	8011242 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	697a      	ldr	r2, [r7, #20]
 801121c:	429a      	cmp	r2, r3
 801121e:	d20b      	bcs.n	8011238 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	1ad2      	subs	r2, r2, r3
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7ff ff9d 	bl	801116c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011232:	2300      	movs	r3, #0
 8011234:	61fb      	str	r3, [r7, #28]
 8011236:	e004      	b.n	8011242 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	2200      	movs	r2, #0
 801123c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801123e:	2301      	movs	r3, #1
 8011240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011242:	f000 ff19 	bl	8012078 <vPortExitCritical>

	return xReturn;
 8011246:	69fb      	ldr	r3, [r7, #28]
}
 8011248:	4618      	mov	r0, r3
 801124a:	3720      	adds	r7, #32
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}
 8011250:	20000d38 	.word	0x20000d38
 8011254:	20000d4c 	.word	0x20000d4c

08011258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011258:	b480      	push	{r7}
 801125a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801125c:	4b03      	ldr	r3, [pc, #12]	; (801126c <vTaskMissedYield+0x14>)
 801125e:	2201      	movs	r2, #1
 8011260:	601a      	str	r2, [r3, #0]
}
 8011262:	bf00      	nop
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr
 801126c:	20000d48 	.word	0x20000d48

08011270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011278:	f000 f852 	bl	8011320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801127c:	4b06      	ldr	r3, [pc, #24]	; (8011298 <prvIdleTask+0x28>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b01      	cmp	r3, #1
 8011282:	d9f9      	bls.n	8011278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <prvIdleTask+0x2c>)
 8011286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801128a:	601a      	str	r2, [r3, #0]
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011294:	e7f0      	b.n	8011278 <prvIdleTask+0x8>
 8011296:	bf00      	nop
 8011298:	20000864 	.word	0x20000864
 801129c:	e000ed04 	.word	0xe000ed04

080112a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112a6:	2300      	movs	r3, #0
 80112a8:	607b      	str	r3, [r7, #4]
 80112aa:	e00c      	b.n	80112c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	4613      	mov	r3, r2
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	4413      	add	r3, r2
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	4a12      	ldr	r2, [pc, #72]	; (8011300 <prvInitialiseTaskLists+0x60>)
 80112b8:	4413      	add	r3, r2
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fe fb8e 	bl	800f9dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	3301      	adds	r3, #1
 80112c4:	607b      	str	r3, [r7, #4]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2b37      	cmp	r3, #55	; 0x37
 80112ca:	d9ef      	bls.n	80112ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112cc:	480d      	ldr	r0, [pc, #52]	; (8011304 <prvInitialiseTaskLists+0x64>)
 80112ce:	f7fe fb85 	bl	800f9dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112d2:	480d      	ldr	r0, [pc, #52]	; (8011308 <prvInitialiseTaskLists+0x68>)
 80112d4:	f7fe fb82 	bl	800f9dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112d8:	480c      	ldr	r0, [pc, #48]	; (801130c <prvInitialiseTaskLists+0x6c>)
 80112da:	f7fe fb7f 	bl	800f9dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112de:	480c      	ldr	r0, [pc, #48]	; (8011310 <prvInitialiseTaskLists+0x70>)
 80112e0:	f7fe fb7c 	bl	800f9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80112e4:	480b      	ldr	r0, [pc, #44]	; (8011314 <prvInitialiseTaskLists+0x74>)
 80112e6:	f7fe fb79 	bl	800f9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80112ea:	4b0b      	ldr	r3, [pc, #44]	; (8011318 <prvInitialiseTaskLists+0x78>)
 80112ec:	4a05      	ldr	r2, [pc, #20]	; (8011304 <prvInitialiseTaskLists+0x64>)
 80112ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80112f0:	4b0a      	ldr	r3, [pc, #40]	; (801131c <prvInitialiseTaskLists+0x7c>)
 80112f2:	4a05      	ldr	r2, [pc, #20]	; (8011308 <prvInitialiseTaskLists+0x68>)
 80112f4:	601a      	str	r2, [r3, #0]
}
 80112f6:	bf00      	nop
 80112f8:	3708      	adds	r7, #8
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	20000864 	.word	0x20000864
 8011304:	20000cc4 	.word	0x20000cc4
 8011308:	20000cd8 	.word	0x20000cd8
 801130c:	20000cf4 	.word	0x20000cf4
 8011310:	20000d08 	.word	0x20000d08
 8011314:	20000d20 	.word	0x20000d20
 8011318:	20000cec 	.word	0x20000cec
 801131c:	20000cf0 	.word	0x20000cf0

08011320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011326:	e019      	b.n	801135c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011328:	f000 fe78 	bl	801201c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801132c:	4b0f      	ldr	r3, [pc, #60]	; (801136c <prvCheckTasksWaitingTermination+0x4c>)
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	3304      	adds	r3, #4
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe fbd9 	bl	800faf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801133e:	4b0c      	ldr	r3, [pc, #48]	; (8011370 <prvCheckTasksWaitingTermination+0x50>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	3b01      	subs	r3, #1
 8011344:	4a0a      	ldr	r2, [pc, #40]	; (8011370 <prvCheckTasksWaitingTermination+0x50>)
 8011346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011348:	4b0a      	ldr	r3, [pc, #40]	; (8011374 <prvCheckTasksWaitingTermination+0x54>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	3b01      	subs	r3, #1
 801134e:	4a09      	ldr	r2, [pc, #36]	; (8011374 <prvCheckTasksWaitingTermination+0x54>)
 8011350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011352:	f000 fe91 	bl	8012078 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 f80e 	bl	8011378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801135c:	4b05      	ldr	r3, [pc, #20]	; (8011374 <prvCheckTasksWaitingTermination+0x54>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1e1      	bne.n	8011328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	20000d08 	.word	0x20000d08
 8011370:	20000d34 	.word	0x20000d34
 8011374:	20000d1c 	.word	0x20000d1c

08011378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011386:	2b00      	cmp	r3, #0
 8011388:	d108      	bne.n	801139c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801138e:	4618      	mov	r0, r3
 8011390:	f001 f820 	bl	80123d4 <vPortFree>
				vPortFree( pxTCB );
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f001 f81d 	bl	80123d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801139a:	e017      	b.n	80113cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d103      	bne.n	80113ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f001 f814 	bl	80123d4 <vPortFree>
	}
 80113ac:	e00e      	b.n	80113cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80113b4:	2b02      	cmp	r3, #2
 80113b6:	d009      	beq.n	80113cc <prvDeleteTCB+0x54>
 80113b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	60fb      	str	r3, [r7, #12]
 80113ca:	e7fe      	b.n	80113ca <prvDeleteTCB+0x52>
	}
 80113cc:	bf00      	nop
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113da:	4b0c      	ldr	r3, [pc, #48]	; (801140c <prvResetNextTaskUnblockTime+0x38>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d104      	bne.n	80113ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80113e4:	4b0a      	ldr	r3, [pc, #40]	; (8011410 <prvResetNextTaskUnblockTime+0x3c>)
 80113e6:	f04f 32ff 	mov.w	r2, #4294967295
 80113ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80113ec:	e008      	b.n	8011400 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ee:	4b07      	ldr	r3, [pc, #28]	; (801140c <prvResetNextTaskUnblockTime+0x38>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	4a04      	ldr	r2, [pc, #16]	; (8011410 <prvResetNextTaskUnblockTime+0x3c>)
 80113fe:	6013      	str	r3, [r2, #0]
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	20000cec 	.word	0x20000cec
 8011410:	20000d54 	.word	0x20000d54

08011414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011414:	b480      	push	{r7}
 8011416:	b083      	sub	sp, #12
 8011418:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801141a:	4b0b      	ldr	r3, [pc, #44]	; (8011448 <xTaskGetSchedulerState+0x34>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d102      	bne.n	8011428 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011422:	2301      	movs	r3, #1
 8011424:	607b      	str	r3, [r7, #4]
 8011426:	e008      	b.n	801143a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011428:	4b08      	ldr	r3, [pc, #32]	; (801144c <xTaskGetSchedulerState+0x38>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d102      	bne.n	8011436 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011430:	2302      	movs	r3, #2
 8011432:	607b      	str	r3, [r7, #4]
 8011434:	e001      	b.n	801143a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011436:	2300      	movs	r3, #0
 8011438:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801143a:	687b      	ldr	r3, [r7, #4]
	}
 801143c:	4618      	mov	r0, r3
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr
 8011448:	20000d40 	.word	0x20000d40
 801144c:	20000d5c 	.word	0x20000d5c

08011450 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801145c:	2300      	movs	r3, #0
 801145e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d054      	beq.n	8011510 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011466:	4b2d      	ldr	r3, [pc, #180]	; (801151c <xTaskPriorityDisinherit+0xcc>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	693a      	ldr	r2, [r7, #16]
 801146c:	429a      	cmp	r2, r3
 801146e:	d009      	beq.n	8011484 <xTaskPriorityDisinherit+0x34>
 8011470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	60fb      	str	r3, [r7, #12]
 8011482:	e7fe      	b.n	8011482 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011488:	2b00      	cmp	r3, #0
 801148a:	d109      	bne.n	80114a0 <xTaskPriorityDisinherit+0x50>
 801148c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011490:	f383 8811 	msr	BASEPRI, r3
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	f3bf 8f4f 	dsb	sy
 801149c:	60bb      	str	r3, [r7, #8]
 801149e:	e7fe      	b.n	801149e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114a4:	1e5a      	subs	r2, r3, #1
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d02c      	beq.n	8011510 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d128      	bne.n	8011510 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	3304      	adds	r3, #4
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fe fb14 	bl	800faf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e0:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <xTaskPriorityDisinherit+0xd0>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d903      	bls.n	80114f0 <xTaskPriorityDisinherit+0xa0>
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ec:	4a0c      	ldr	r2, [pc, #48]	; (8011520 <xTaskPriorityDisinherit+0xd0>)
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f4:	4613      	mov	r3, r2
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	4413      	add	r3, r2
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	4a09      	ldr	r2, [pc, #36]	; (8011524 <xTaskPriorityDisinherit+0xd4>)
 80114fe:	441a      	add	r2, r3
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	3304      	adds	r3, #4
 8011504:	4619      	mov	r1, r3
 8011506:	4610      	mov	r0, r2
 8011508:	f7fe fa95 	bl	800fa36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801150c:	2301      	movs	r3, #1
 801150e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011510:	697b      	ldr	r3, [r7, #20]
	}
 8011512:	4618      	mov	r0, r3
 8011514:	3718      	adds	r7, #24
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	20000860 	.word	0x20000860
 8011520:	20000d3c 	.word	0x20000d3c
 8011524:	20000864 	.word	0x20000864

08011528 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011532:	4b21      	ldr	r3, [pc, #132]	; (80115b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011538:	4b20      	ldr	r3, [pc, #128]	; (80115bc <prvAddCurrentTaskToDelayedList+0x94>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	3304      	adds	r3, #4
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe fad6 	bl	800faf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801154a:	d10a      	bne.n	8011562 <prvAddCurrentTaskToDelayedList+0x3a>
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d007      	beq.n	8011562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011552:	4b1a      	ldr	r3, [pc, #104]	; (80115bc <prvAddCurrentTaskToDelayedList+0x94>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	3304      	adds	r3, #4
 8011558:	4619      	mov	r1, r3
 801155a:	4819      	ldr	r0, [pc, #100]	; (80115c0 <prvAddCurrentTaskToDelayedList+0x98>)
 801155c:	f7fe fa6b 	bl	800fa36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011560:	e026      	b.n	80115b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4413      	add	r3, r2
 8011568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801156a:	4b14      	ldr	r3, [pc, #80]	; (80115bc <prvAddCurrentTaskToDelayedList+0x94>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011572:	68ba      	ldr	r2, [r7, #8]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	429a      	cmp	r2, r3
 8011578:	d209      	bcs.n	801158e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801157a:	4b12      	ldr	r3, [pc, #72]	; (80115c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	4b0f      	ldr	r3, [pc, #60]	; (80115bc <prvAddCurrentTaskToDelayedList+0x94>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	3304      	adds	r3, #4
 8011584:	4619      	mov	r1, r3
 8011586:	4610      	mov	r0, r2
 8011588:	f7fe fa79 	bl	800fa7e <vListInsert>
}
 801158c:	e010      	b.n	80115b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801158e:	4b0e      	ldr	r3, [pc, #56]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	4b0a      	ldr	r3, [pc, #40]	; (80115bc <prvAddCurrentTaskToDelayedList+0x94>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	3304      	adds	r3, #4
 8011598:	4619      	mov	r1, r3
 801159a:	4610      	mov	r0, r2
 801159c:	f7fe fa6f 	bl	800fa7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80115a0:	4b0a      	ldr	r3, [pc, #40]	; (80115cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d202      	bcs.n	80115b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80115aa:	4a08      	ldr	r2, [pc, #32]	; (80115cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	6013      	str	r3, [r2, #0]
}
 80115b0:	bf00      	nop
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	20000d38 	.word	0x20000d38
 80115bc:	20000860 	.word	0x20000860
 80115c0:	20000d20 	.word	0x20000d20
 80115c4:	20000cf0 	.word	0x20000cf0
 80115c8:	20000cec 	.word	0x20000cec
 80115cc:	20000d54 	.word	0x20000d54

080115d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08a      	sub	sp, #40	; 0x28
 80115d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80115da:	f000 fb97 	bl	8011d0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80115de:	4b1c      	ldr	r3, [pc, #112]	; (8011650 <xTimerCreateTimerTask+0x80>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d021      	beq.n	801162a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80115ea:	2300      	movs	r3, #0
 80115ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80115ee:	1d3a      	adds	r2, r7, #4
 80115f0:	f107 0108 	add.w	r1, r7, #8
 80115f4:	f107 030c 	add.w	r3, r7, #12
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fe f9d5 	bl	800f9a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80115fe:	6879      	ldr	r1, [r7, #4]
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	68fa      	ldr	r2, [r7, #12]
 8011604:	9202      	str	r2, [sp, #8]
 8011606:	9301      	str	r3, [sp, #4]
 8011608:	2302      	movs	r3, #2
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	2300      	movs	r3, #0
 801160e:	460a      	mov	r2, r1
 8011610:	4910      	ldr	r1, [pc, #64]	; (8011654 <xTimerCreateTimerTask+0x84>)
 8011612:	4811      	ldr	r0, [pc, #68]	; (8011658 <xTimerCreateTimerTask+0x88>)
 8011614:	f7ff f828 	bl	8010668 <xTaskCreateStatic>
 8011618:	4602      	mov	r2, r0
 801161a:	4b10      	ldr	r3, [pc, #64]	; (801165c <xTimerCreateTimerTask+0x8c>)
 801161c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801161e:	4b0f      	ldr	r3, [pc, #60]	; (801165c <xTimerCreateTimerTask+0x8c>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d001      	beq.n	801162a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011626:	2301      	movs	r3, #1
 8011628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d109      	bne.n	8011644 <xTimerCreateTimerTask+0x74>
 8011630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	613b      	str	r3, [r7, #16]
 8011642:	e7fe      	b.n	8011642 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8011644:	697b      	ldr	r3, [r7, #20]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3718      	adds	r7, #24
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	20000d90 	.word	0x20000d90
 8011654:	080135c4 	.word	0x080135c4
 8011658:	080118c1 	.word	0x080118c1
 801165c:	20000d94 	.word	0x20000d94

08011660 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011660:	b580      	push	{r7, lr}
 8011662:	b088      	sub	sp, #32
 8011664:	af02      	add	r7, sp, #8
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	607a      	str	r2, [r7, #4]
 801166c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801166e:	202c      	movs	r0, #44	; 0x2c
 8011670:	f000 fdee 	bl	8012250 <pvPortMalloc>
 8011674:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00d      	beq.n	8011698 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2200      	movs	r2, #0
 8011680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	6a3b      	ldr	r3, [r7, #32]
 801168a:	9300      	str	r3, [sp, #0]
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	68b9      	ldr	r1, [r7, #8]
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 f841 	bl	801171a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011698:	697b      	ldr	r3, [r7, #20]
	}
 801169a:	4618      	mov	r0, r3
 801169c:	3718      	adds	r7, #24
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}

080116a2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80116a2:	b580      	push	{r7, lr}
 80116a4:	b08a      	sub	sp, #40	; 0x28
 80116a6:	af02      	add	r7, sp, #8
 80116a8:	60f8      	str	r0, [r7, #12]
 80116aa:	60b9      	str	r1, [r7, #8]
 80116ac:	607a      	str	r2, [r7, #4]
 80116ae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80116b0:	232c      	movs	r3, #44	; 0x2c
 80116b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	2b2c      	cmp	r3, #44	; 0x2c
 80116b8:	d009      	beq.n	80116ce <xTimerCreateStatic+0x2c>
 80116ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116be:	f383 8811 	msr	BASEPRI, r3
 80116c2:	f3bf 8f6f 	isb	sy
 80116c6:	f3bf 8f4f 	dsb	sy
 80116ca:	61bb      	str	r3, [r7, #24]
 80116cc:	e7fe      	b.n	80116cc <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80116ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80116d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d109      	bne.n	80116ea <xTimerCreateStatic+0x48>
 80116d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	617b      	str	r3, [r7, #20]
 80116e8:	e7fe      	b.n	80116e8 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00d      	beq.n	8011710 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	2202      	movs	r2, #2
 80116f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	9301      	str	r3, [sp, #4]
 8011700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	68b9      	ldr	r1, [r7, #8]
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f000 f805 	bl	801171a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011710:	69fb      	ldr	r3, [r7, #28]
	}
 8011712:	4618      	mov	r0, r3
 8011714:	3720      	adds	r7, #32
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d109      	bne.n	8011742 <prvInitialiseNewTimer+0x28>
 801172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	617b      	str	r3, [r7, #20]
 8011740:	e7fe      	b.n	8011740 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8011742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011744:	2b00      	cmp	r3, #0
 8011746:	d01e      	beq.n	8011786 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011748:	f000 fae0 	bl	8011d0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011760:	6a3a      	ldr	r2, [r7, #32]
 8011762:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	3304      	adds	r3, #4
 8011768:	4618      	mov	r0, r3
 801176a:	f7fe f957 	bl	800fa1c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d008      	beq.n	8011786 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801177a:	f043 0304 	orr.w	r3, r3, #4
 801177e:	b2da      	uxtb	r2, r3
 8011780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011786:	bf00      	nop
 8011788:	3718      	adds	r7, #24
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
	...

08011790 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	; 0x28
 8011794:	af00      	add	r7, sp, #0
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801179e:	2300      	movs	r3, #0
 80117a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d109      	bne.n	80117bc <xTimerGenericCommand+0x2c>
 80117a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	623b      	str	r3, [r7, #32]
 80117ba:	e7fe      	b.n	80117ba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80117bc:	4b19      	ldr	r3, [pc, #100]	; (8011824 <xTimerGenericCommand+0x94>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d02a      	beq.n	801181a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	2b05      	cmp	r3, #5
 80117d4:	dc18      	bgt.n	8011808 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80117d6:	f7ff fe1d 	bl	8011414 <xTaskGetSchedulerState>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b02      	cmp	r3, #2
 80117de:	d109      	bne.n	80117f4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80117e0:	4b10      	ldr	r3, [pc, #64]	; (8011824 <xTimerGenericCommand+0x94>)
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	f107 0110 	add.w	r1, r7, #16
 80117e8:	2300      	movs	r3, #0
 80117ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ec:	f7fe fae8 	bl	800fdc0 <xQueueGenericSend>
 80117f0:	6278      	str	r0, [r7, #36]	; 0x24
 80117f2:	e012      	b.n	801181a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80117f4:	4b0b      	ldr	r3, [pc, #44]	; (8011824 <xTimerGenericCommand+0x94>)
 80117f6:	6818      	ldr	r0, [r3, #0]
 80117f8:	f107 0110 	add.w	r1, r7, #16
 80117fc:	2300      	movs	r3, #0
 80117fe:	2200      	movs	r2, #0
 8011800:	f7fe fade 	bl	800fdc0 <xQueueGenericSend>
 8011804:	6278      	str	r0, [r7, #36]	; 0x24
 8011806:	e008      	b.n	801181a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011808:	4b06      	ldr	r3, [pc, #24]	; (8011824 <xTimerGenericCommand+0x94>)
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	f107 0110 	add.w	r1, r7, #16
 8011810:	2300      	movs	r3, #0
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	f7fe fbce 	bl	800ffb4 <xQueueGenericSendFromISR>
 8011818:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801181c:	4618      	mov	r0, r3
 801181e:	3728      	adds	r7, #40	; 0x28
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	20000d90 	.word	0x20000d90

08011828 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af02      	add	r7, sp, #8
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011832:	4b22      	ldr	r3, [pc, #136]	; (80118bc <prvProcessExpiredTimer+0x94>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	68db      	ldr	r3, [r3, #12]
 801183a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	3304      	adds	r3, #4
 8011840:	4618      	mov	r0, r3
 8011842:	f7fe f955 	bl	800faf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801184c:	f003 0304 	and.w	r3, r3, #4
 8011850:	2b00      	cmp	r3, #0
 8011852:	d021      	beq.n	8011898 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	699a      	ldr	r2, [r3, #24]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	18d1      	adds	r1, r2, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	683a      	ldr	r2, [r7, #0]
 8011860:	6978      	ldr	r0, [r7, #20]
 8011862:	f000 f8d1 	bl	8011a08 <prvInsertTimerInActiveList>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d01e      	beq.n	80118aa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801186c:	2300      	movs	r3, #0
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	2300      	movs	r3, #0
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	2100      	movs	r1, #0
 8011876:	6978      	ldr	r0, [r7, #20]
 8011878:	f7ff ff8a 	bl	8011790 <xTimerGenericCommand>
 801187c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d112      	bne.n	80118aa <prvProcessExpiredTimer+0x82>
 8011884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011888:	f383 8811 	msr	BASEPRI, r3
 801188c:	f3bf 8f6f 	isb	sy
 8011890:	f3bf 8f4f 	dsb	sy
 8011894:	60fb      	str	r3, [r7, #12]
 8011896:	e7fe      	b.n	8011896 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801189e:	f023 0301 	bic.w	r3, r3, #1
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	6a1b      	ldr	r3, [r3, #32]
 80118ae:	6978      	ldr	r0, [r7, #20]
 80118b0:	4798      	blx	r3
}
 80118b2:	bf00      	nop
 80118b4:	3718      	adds	r7, #24
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	20000d88 	.word	0x20000d88

080118c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118c8:	f107 0308 	add.w	r3, r7, #8
 80118cc:	4618      	mov	r0, r3
 80118ce:	f000 f857 	bl	8011980 <prvGetNextExpireTime>
 80118d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	4619      	mov	r1, r3
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f000 f803 	bl	80118e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80118de:	f000 f8d5 	bl	8011a8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118e2:	e7f1      	b.n	80118c8 <prvTimerTask+0x8>

080118e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80118ee:	f7ff f9bf 	bl	8010c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80118f2:	f107 0308 	add.w	r3, r7, #8
 80118f6:	4618      	mov	r0, r3
 80118f8:	f000 f866 	bl	80119c8 <prvSampleTimeNow>
 80118fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d130      	bne.n	8011966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10a      	bne.n	8011920 <prvProcessTimerOrBlockTask+0x3c>
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	429a      	cmp	r2, r3
 8011910:	d806      	bhi.n	8011920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011912:	f7ff f9bb 	bl	8010c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011916:	68f9      	ldr	r1, [r7, #12]
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff ff85 	bl	8011828 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801191e:	e024      	b.n	801196a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d008      	beq.n	8011938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011926:	4b13      	ldr	r3, [pc, #76]	; (8011974 <prvProcessTimerOrBlockTask+0x90>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d101      	bne.n	8011934 <prvProcessTimerOrBlockTask+0x50>
 8011930:	2301      	movs	r3, #1
 8011932:	e000      	b.n	8011936 <prvProcessTimerOrBlockTask+0x52>
 8011934:	2300      	movs	r3, #0
 8011936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011938:	4b0f      	ldr	r3, [pc, #60]	; (8011978 <prvProcessTimerOrBlockTask+0x94>)
 801193a:	6818      	ldr	r0, [r3, #0]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	683a      	ldr	r2, [r7, #0]
 8011944:	4619      	mov	r1, r3
 8011946:	f7fe fe5b 	bl	8010600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801194a:	f7ff f99f 	bl	8010c8c <xTaskResumeAll>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d10a      	bne.n	801196a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011954:	4b09      	ldr	r3, [pc, #36]	; (801197c <prvProcessTimerOrBlockTask+0x98>)
 8011956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801195a:	601a      	str	r2, [r3, #0]
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	f3bf 8f6f 	isb	sy
}
 8011964:	e001      	b.n	801196a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011966:	f7ff f991 	bl	8010c8c <xTaskResumeAll>
}
 801196a:	bf00      	nop
 801196c:	3710      	adds	r7, #16
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	20000d8c 	.word	0x20000d8c
 8011978:	20000d90 	.word	0x20000d90
 801197c:	e000ed04 	.word	0xe000ed04

08011980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011980:	b480      	push	{r7}
 8011982:	b085      	sub	sp, #20
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011988:	4b0e      	ldr	r3, [pc, #56]	; (80119c4 <prvGetNextExpireTime+0x44>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <prvGetNextExpireTime+0x16>
 8011992:	2201      	movs	r2, #1
 8011994:	e000      	b.n	8011998 <prvGetNextExpireTime+0x18>
 8011996:	2200      	movs	r2, #0
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80119a4:	4b07      	ldr	r3, [pc, #28]	; (80119c4 <prvGetNextExpireTime+0x44>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	60fb      	str	r3, [r7, #12]
 80119ae:	e001      	b.n	80119b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80119b0:	2300      	movs	r3, #0
 80119b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80119b4:	68fb      	ldr	r3, [r7, #12]
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	20000d88 	.word	0x20000d88

080119c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80119d0:	f7ff f9f8 	bl	8010dc4 <xTaskGetTickCount>
 80119d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80119d6:	4b0b      	ldr	r3, [pc, #44]	; (8011a04 <prvSampleTimeNow+0x3c>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d205      	bcs.n	80119ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80119e0:	f000 f930 	bl	8011c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2201      	movs	r2, #1
 80119e8:	601a      	str	r2, [r3, #0]
 80119ea:	e002      	b.n	80119f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80119f2:	4a04      	ldr	r2, [pc, #16]	; (8011a04 <prvSampleTimeNow+0x3c>)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80119f8:	68fb      	ldr	r3, [r7, #12]
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	20000d98 	.word	0x20000d98

08011a08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b086      	sub	sp, #24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
 8011a14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011a16:	2300      	movs	r3, #0
 8011a18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d812      	bhi.n	8011a54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	1ad2      	subs	r2, r2, r3
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	699b      	ldr	r3, [r3, #24]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d302      	bcc.n	8011a42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	e01b      	b.n	8011a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011a42:	4b10      	ldr	r3, [pc, #64]	; (8011a84 <prvInsertTimerInActiveList+0x7c>)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	3304      	adds	r3, #4
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	f7fe f816 	bl	800fa7e <vListInsert>
 8011a52:	e012      	b.n	8011a7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d206      	bcs.n	8011a6a <prvInsertTimerInActiveList+0x62>
 8011a5c:	68ba      	ldr	r2, [r7, #8]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d302      	bcc.n	8011a6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011a64:	2301      	movs	r3, #1
 8011a66:	617b      	str	r3, [r7, #20]
 8011a68:	e007      	b.n	8011a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a6a:	4b07      	ldr	r3, [pc, #28]	; (8011a88 <prvInsertTimerInActiveList+0x80>)
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3304      	adds	r3, #4
 8011a72:	4619      	mov	r1, r3
 8011a74:	4610      	mov	r0, r2
 8011a76:	f7fe f802 	bl	800fa7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011a7a:	697b      	ldr	r3, [r7, #20]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3718      	adds	r7, #24
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	20000d8c 	.word	0x20000d8c
 8011a88:	20000d88 	.word	0x20000d88

08011a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08e      	sub	sp, #56	; 0x38
 8011a90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a92:	e0c6      	b.n	8011c22 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	da17      	bge.n	8011aca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011a9a:	1d3b      	adds	r3, r7, #4
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d109      	bne.n	8011aba <prvProcessReceivedCommands+0x2e>
 8011aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aaa:	f383 8811 	msr	BASEPRI, r3
 8011aae:	f3bf 8f6f 	isb	sy
 8011ab2:	f3bf 8f4f 	dsb	sy
 8011ab6:	61fb      	str	r3, [r7, #28]
 8011ab8:	e7fe      	b.n	8011ab8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ac0:	6850      	ldr	r0, [r2, #4]
 8011ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ac4:	6892      	ldr	r2, [r2, #8]
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f2c0 80a7 	blt.w	8011c20 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad8:	695b      	ldr	r3, [r3, #20]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d004      	beq.n	8011ae8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae0:	3304      	adds	r3, #4
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fe f804 	bl	800faf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ae8:	463b      	mov	r3, r7
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ff ff6c 	bl	80119c8 <prvSampleTimeNow>
 8011af0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2b09      	cmp	r3, #9
 8011af6:	f200 8094 	bhi.w	8011c22 <prvProcessReceivedCommands+0x196>
 8011afa:	a201      	add	r2, pc, #4	; (adr r2, 8011b00 <prvProcessReceivedCommands+0x74>)
 8011afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b00:	08011b29 	.word	0x08011b29
 8011b04:	08011b29 	.word	0x08011b29
 8011b08:	08011b29 	.word	0x08011b29
 8011b0c:	08011b9b 	.word	0x08011b9b
 8011b10:	08011baf 	.word	0x08011baf
 8011b14:	08011bf7 	.word	0x08011bf7
 8011b18:	08011b29 	.word	0x08011b29
 8011b1c:	08011b29 	.word	0x08011b29
 8011b20:	08011b9b 	.word	0x08011b9b
 8011b24:	08011baf 	.word	0x08011baf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b2e:	f043 0301 	orr.w	r3, r3, #1
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011b3a:	68ba      	ldr	r2, [r7, #8]
 8011b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3e:	699b      	ldr	r3, [r3, #24]
 8011b40:	18d1      	adds	r1, r2, r3
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b48:	f7ff ff5e 	bl	8011a08 <prvInsertTimerInActiveList>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d067      	beq.n	8011c22 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b60:	f003 0304 	and.w	r3, r3, #4
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d05c      	beq.n	8011c22 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011b68:	68ba      	ldr	r2, [r7, #8]
 8011b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6c:	699b      	ldr	r3, [r3, #24]
 8011b6e:	441a      	add	r2, r3
 8011b70:	2300      	movs	r3, #0
 8011b72:	9300      	str	r3, [sp, #0]
 8011b74:	2300      	movs	r3, #0
 8011b76:	2100      	movs	r1, #0
 8011b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b7a:	f7ff fe09 	bl	8011790 <xTimerGenericCommand>
 8011b7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d14d      	bne.n	8011c22 <prvProcessReceivedCommands+0x196>
 8011b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	61bb      	str	r3, [r7, #24]
 8011b98:	e7fe      	b.n	8011b98 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ba0:	f023 0301 	bic.w	r3, r3, #1
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011bac:	e039      	b.n	8011c22 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bb4:	f043 0301 	orr.w	r3, r3, #1
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d109      	bne.n	8011be2 <prvProcessReceivedCommands+0x156>
 8011bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	617b      	str	r3, [r7, #20]
 8011be0:	e7fe      	b.n	8011be0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be4:	699a      	ldr	r2, [r3, #24]
 8011be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be8:	18d1      	adds	r1, r2, r3
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bf0:	f7ff ff0a 	bl	8011a08 <prvInsertTimerInActiveList>
					break;
 8011bf4:	e015      	b.n	8011c22 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bfc:	f003 0302 	and.w	r3, r3, #2
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d103      	bne.n	8011c0c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c06:	f000 fbe5 	bl	80123d4 <vPortFree>
 8011c0a:	e00a      	b.n	8011c22 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c12:	f023 0301 	bic.w	r3, r3, #1
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011c1e:	e000      	b.n	8011c22 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011c20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c22:	4b07      	ldr	r3, [pc, #28]	; (8011c40 <prvProcessReceivedCommands+0x1b4>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	1d39      	adds	r1, r7, #4
 8011c28:	2200      	movs	r2, #0
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fe fa56 	bl	80100dc <xQueueReceive>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f47f af2e 	bne.w	8011a94 <prvProcessReceivedCommands+0x8>
	}
}
 8011c38:	bf00      	nop
 8011c3a:	3730      	adds	r7, #48	; 0x30
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	20000d90 	.word	0x20000d90

08011c44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b088      	sub	sp, #32
 8011c48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c4a:	e047      	b.n	8011cdc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c4c:	4b2d      	ldr	r3, [pc, #180]	; (8011d04 <prvSwitchTimerLists+0xc0>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c56:	4b2b      	ldr	r3, [pc, #172]	; (8011d04 <prvSwitchTimerLists+0xc0>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fd ff43 	bl	800faf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	6a1b      	ldr	r3, [r3, #32]
 8011c6e:	68f8      	ldr	r0, [r7, #12]
 8011c70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c78:	f003 0304 	and.w	r3, r3, #4
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d02d      	beq.n	8011cdc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	693a      	ldr	r2, [r7, #16]
 8011c86:	4413      	add	r3, r2
 8011c88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011c8a:	68ba      	ldr	r2, [r7, #8]
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d90e      	bls.n	8011cb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	68fa      	ldr	r2, [r7, #12]
 8011c9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c9e:	4b19      	ldr	r3, [pc, #100]	; (8011d04 <prvSwitchTimerLists+0xc0>)
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	3304      	adds	r3, #4
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	4610      	mov	r0, r2
 8011caa:	f7fd fee8 	bl	800fa7e <vListInsert>
 8011cae:	e015      	b.n	8011cdc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	693a      	ldr	r2, [r7, #16]
 8011cb8:	2100      	movs	r1, #0
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f7ff fd68 	bl	8011790 <xTimerGenericCommand>
 8011cc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d109      	bne.n	8011cdc <prvSwitchTimerLists+0x98>
 8011cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ccc:	f383 8811 	msr	BASEPRI, r3
 8011cd0:	f3bf 8f6f 	isb	sy
 8011cd4:	f3bf 8f4f 	dsb	sy
 8011cd8:	603b      	str	r3, [r7, #0]
 8011cda:	e7fe      	b.n	8011cda <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011cdc:	4b09      	ldr	r3, [pc, #36]	; (8011d04 <prvSwitchTimerLists+0xc0>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1b2      	bne.n	8011c4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011ce6:	4b07      	ldr	r3, [pc, #28]	; (8011d04 <prvSwitchTimerLists+0xc0>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011cec:	4b06      	ldr	r3, [pc, #24]	; (8011d08 <prvSwitchTimerLists+0xc4>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4a04      	ldr	r2, [pc, #16]	; (8011d04 <prvSwitchTimerLists+0xc0>)
 8011cf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011cf4:	4a04      	ldr	r2, [pc, #16]	; (8011d08 <prvSwitchTimerLists+0xc4>)
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	6013      	str	r3, [r2, #0]
}
 8011cfa:	bf00      	nop
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20000d88 	.word	0x20000d88
 8011d08:	20000d8c 	.word	0x20000d8c

08011d0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011d12:	f000 f983 	bl	801201c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011d16:	4b15      	ldr	r3, [pc, #84]	; (8011d6c <prvCheckForValidListAndQueue+0x60>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d120      	bne.n	8011d60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011d1e:	4814      	ldr	r0, [pc, #80]	; (8011d70 <prvCheckForValidListAndQueue+0x64>)
 8011d20:	f7fd fe5c 	bl	800f9dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011d24:	4813      	ldr	r0, [pc, #76]	; (8011d74 <prvCheckForValidListAndQueue+0x68>)
 8011d26:	f7fd fe59 	bl	800f9dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011d2a:	4b13      	ldr	r3, [pc, #76]	; (8011d78 <prvCheckForValidListAndQueue+0x6c>)
 8011d2c:	4a10      	ldr	r2, [pc, #64]	; (8011d70 <prvCheckForValidListAndQueue+0x64>)
 8011d2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011d30:	4b12      	ldr	r3, [pc, #72]	; (8011d7c <prvCheckForValidListAndQueue+0x70>)
 8011d32:	4a10      	ldr	r2, [pc, #64]	; (8011d74 <prvCheckForValidListAndQueue+0x68>)
 8011d34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011d36:	2300      	movs	r3, #0
 8011d38:	9300      	str	r3, [sp, #0]
 8011d3a:	4b11      	ldr	r3, [pc, #68]	; (8011d80 <prvCheckForValidListAndQueue+0x74>)
 8011d3c:	4a11      	ldr	r2, [pc, #68]	; (8011d84 <prvCheckForValidListAndQueue+0x78>)
 8011d3e:	2110      	movs	r1, #16
 8011d40:	200a      	movs	r0, #10
 8011d42:	f7fd ff67 	bl	800fc14 <xQueueGenericCreateStatic>
 8011d46:	4602      	mov	r2, r0
 8011d48:	4b08      	ldr	r3, [pc, #32]	; (8011d6c <prvCheckForValidListAndQueue+0x60>)
 8011d4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011d4c:	4b07      	ldr	r3, [pc, #28]	; (8011d6c <prvCheckForValidListAndQueue+0x60>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d005      	beq.n	8011d60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011d54:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <prvCheckForValidListAndQueue+0x60>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	490b      	ldr	r1, [pc, #44]	; (8011d88 <prvCheckForValidListAndQueue+0x7c>)
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fe fc28 	bl	80105b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d60:	f000 f98a 	bl	8012078 <vPortExitCritical>
}
 8011d64:	bf00      	nop
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	20000d90 	.word	0x20000d90
 8011d70:	20000d60 	.word	0x20000d60
 8011d74:	20000d74 	.word	0x20000d74
 8011d78:	20000d88 	.word	0x20000d88
 8011d7c:	20000d8c 	.word	0x20000d8c
 8011d80:	20000e3c 	.word	0x20000e3c
 8011d84:	20000d9c 	.word	0x20000d9c
 8011d88:	080135cc 	.word	0x080135cc

08011d8c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d109      	bne.n	8011db2 <pvTimerGetTimerID+0x26>
 8011d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da2:	f383 8811 	msr	BASEPRI, r3
 8011da6:	f3bf 8f6f 	isb	sy
 8011daa:	f3bf 8f4f 	dsb	sy
 8011dae:	60fb      	str	r3, [r7, #12]
 8011db0:	e7fe      	b.n	8011db0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8011db2:	f000 f933 	bl	801201c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	69db      	ldr	r3, [r3, #28]
 8011dba:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011dbc:	f000 f95c 	bl	8012078 <vPortExitCritical>

	return pvReturn;
 8011dc0:	693b      	ldr	r3, [r7, #16]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3718      	adds	r7, #24
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
	...

08011dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3b04      	subs	r3, #4
 8011ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	3b04      	subs	r3, #4
 8011dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	f023 0201 	bic.w	r2, r3, #1
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	3b04      	subs	r3, #4
 8011dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011dfc:	4a0c      	ldr	r2, [pc, #48]	; (8011e30 <pxPortInitialiseStack+0x64>)
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	3b14      	subs	r3, #20
 8011e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	3b04      	subs	r3, #4
 8011e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f06f 0202 	mvn.w	r2, #2
 8011e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	3b20      	subs	r3, #32
 8011e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e22:	68fb      	ldr	r3, [r7, #12]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	08011e35 	.word	0x08011e35

08011e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e34:	b480      	push	{r7}
 8011e36:	b085      	sub	sp, #20
 8011e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e3e:	4b11      	ldr	r3, [pc, #68]	; (8011e84 <prvTaskExitError+0x50>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e46:	d009      	beq.n	8011e5c <prvTaskExitError+0x28>
 8011e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4c:	f383 8811 	msr	BASEPRI, r3
 8011e50:	f3bf 8f6f 	isb	sy
 8011e54:	f3bf 8f4f 	dsb	sy
 8011e58:	60fb      	str	r3, [r7, #12]
 8011e5a:	e7fe      	b.n	8011e5a <prvTaskExitError+0x26>
 8011e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e60:	f383 8811 	msr	BASEPRI, r3
 8011e64:	f3bf 8f6f 	isb	sy
 8011e68:	f3bf 8f4f 	dsb	sy
 8011e6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e6e:	bf00      	nop
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0fc      	beq.n	8011e70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e76:	bf00      	nop
 8011e78:	3714      	adds	r7, #20
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr
 8011e82:	bf00      	nop
 8011e84:	2000009c 	.word	0x2000009c
	...

08011e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e90:	4b07      	ldr	r3, [pc, #28]	; (8011eb0 <pxCurrentTCBConst2>)
 8011e92:	6819      	ldr	r1, [r3, #0]
 8011e94:	6808      	ldr	r0, [r1, #0]
 8011e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9a:	f380 8809 	msr	PSP, r0
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f04f 0000 	mov.w	r0, #0
 8011ea6:	f380 8811 	msr	BASEPRI, r0
 8011eaa:	4770      	bx	lr
 8011eac:	f3af 8000 	nop.w

08011eb0 <pxCurrentTCBConst2>:
 8011eb0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011eb4:	bf00      	nop
 8011eb6:	bf00      	nop

08011eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011eb8:	4808      	ldr	r0, [pc, #32]	; (8011edc <prvPortStartFirstTask+0x24>)
 8011eba:	6800      	ldr	r0, [r0, #0]
 8011ebc:	6800      	ldr	r0, [r0, #0]
 8011ebe:	f380 8808 	msr	MSP, r0
 8011ec2:	f04f 0000 	mov.w	r0, #0
 8011ec6:	f380 8814 	msr	CONTROL, r0
 8011eca:	b662      	cpsie	i
 8011ecc:	b661      	cpsie	f
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	f3bf 8f6f 	isb	sy
 8011ed6:	df00      	svc	0
 8011ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eda:	bf00      	nop
 8011edc:	e000ed08 	.word	0xe000ed08

08011ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ee6:	4b44      	ldr	r3, [pc, #272]	; (8011ff8 <xPortStartScheduler+0x118>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4a44      	ldr	r2, [pc, #272]	; (8011ffc <xPortStartScheduler+0x11c>)
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d109      	bne.n	8011f04 <xPortStartScheduler+0x24>
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	f383 8811 	msr	BASEPRI, r3
 8011ef8:	f3bf 8f6f 	isb	sy
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	613b      	str	r3, [r7, #16]
 8011f02:	e7fe      	b.n	8011f02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011f04:	4b3c      	ldr	r3, [pc, #240]	; (8011ff8 <xPortStartScheduler+0x118>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a3d      	ldr	r2, [pc, #244]	; (8012000 <xPortStartScheduler+0x120>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d109      	bne.n	8011f22 <xPortStartScheduler+0x42>
 8011f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f12:	f383 8811 	msr	BASEPRI, r3
 8011f16:	f3bf 8f6f 	isb	sy
 8011f1a:	f3bf 8f4f 	dsb	sy
 8011f1e:	60fb      	str	r3, [r7, #12]
 8011f20:	e7fe      	b.n	8011f20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f22:	4b38      	ldr	r3, [pc, #224]	; (8012004 <xPortStartScheduler+0x124>)
 8011f24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	22ff      	movs	r2, #255	; 0xff
 8011f32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f3c:	78fb      	ldrb	r3, [r7, #3]
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	4b30      	ldr	r3, [pc, #192]	; (8012008 <xPortStartScheduler+0x128>)
 8011f48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f4a:	4b30      	ldr	r3, [pc, #192]	; (801200c <xPortStartScheduler+0x12c>)
 8011f4c:	2207      	movs	r2, #7
 8011f4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f50:	e009      	b.n	8011f66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011f52:	4b2e      	ldr	r3, [pc, #184]	; (801200c <xPortStartScheduler+0x12c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3b01      	subs	r3, #1
 8011f58:	4a2c      	ldr	r2, [pc, #176]	; (801200c <xPortStartScheduler+0x12c>)
 8011f5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f5c:	78fb      	ldrb	r3, [r7, #3]
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	005b      	lsls	r3, r3, #1
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f66:	78fb      	ldrb	r3, [r7, #3]
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f6e:	2b80      	cmp	r3, #128	; 0x80
 8011f70:	d0ef      	beq.n	8011f52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f72:	4b26      	ldr	r3, [pc, #152]	; (801200c <xPortStartScheduler+0x12c>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f1c3 0307 	rsb	r3, r3, #7
 8011f7a:	2b04      	cmp	r3, #4
 8011f7c:	d009      	beq.n	8011f92 <xPortStartScheduler+0xb2>
 8011f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f82:	f383 8811 	msr	BASEPRI, r3
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	60bb      	str	r3, [r7, #8]
 8011f90:	e7fe      	b.n	8011f90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f92:	4b1e      	ldr	r3, [pc, #120]	; (801200c <xPortStartScheduler+0x12c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	021b      	lsls	r3, r3, #8
 8011f98:	4a1c      	ldr	r2, [pc, #112]	; (801200c <xPortStartScheduler+0x12c>)
 8011f9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f9c:	4b1b      	ldr	r3, [pc, #108]	; (801200c <xPortStartScheduler+0x12c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011fa4:	4a19      	ldr	r2, [pc, #100]	; (801200c <xPortStartScheduler+0x12c>)
 8011fa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011fb0:	4b17      	ldr	r3, [pc, #92]	; (8012010 <xPortStartScheduler+0x130>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a16      	ldr	r2, [pc, #88]	; (8012010 <xPortStartScheduler+0x130>)
 8011fb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011fba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011fbc:	4b14      	ldr	r3, [pc, #80]	; (8012010 <xPortStartScheduler+0x130>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a13      	ldr	r2, [pc, #76]	; (8012010 <xPortStartScheduler+0x130>)
 8011fc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011fc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011fc8:	f000 f8d6 	bl	8012178 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011fcc:	4b11      	ldr	r3, [pc, #68]	; (8012014 <xPortStartScheduler+0x134>)
 8011fce:	2200      	movs	r2, #0
 8011fd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011fd2:	f000 f8f5 	bl	80121c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011fd6:	4b10      	ldr	r3, [pc, #64]	; (8012018 <xPortStartScheduler+0x138>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4a0f      	ldr	r2, [pc, #60]	; (8012018 <xPortStartScheduler+0x138>)
 8011fdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011fe0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011fe2:	f7ff ff69 	bl	8011eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011fe6:	f7fe ffb5 	bl	8010f54 <vTaskSwitchContext>
	prvTaskExitError();
 8011fea:	f7ff ff23 	bl	8011e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011fee:	2300      	movs	r3, #0
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3718      	adds	r7, #24
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	e000ed00 	.word	0xe000ed00
 8011ffc:	410fc271 	.word	0x410fc271
 8012000:	410fc270 	.word	0x410fc270
 8012004:	e000e400 	.word	0xe000e400
 8012008:	20000e8c 	.word	0x20000e8c
 801200c:	20000e90 	.word	0x20000e90
 8012010:	e000ed20 	.word	0xe000ed20
 8012014:	2000009c 	.word	0x2000009c
 8012018:	e000ef34 	.word	0xe000ef34

0801201c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012026:	f383 8811 	msr	BASEPRI, r3
 801202a:	f3bf 8f6f 	isb	sy
 801202e:	f3bf 8f4f 	dsb	sy
 8012032:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012034:	4b0e      	ldr	r3, [pc, #56]	; (8012070 <vPortEnterCritical+0x54>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	3301      	adds	r3, #1
 801203a:	4a0d      	ldr	r2, [pc, #52]	; (8012070 <vPortEnterCritical+0x54>)
 801203c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801203e:	4b0c      	ldr	r3, [pc, #48]	; (8012070 <vPortEnterCritical+0x54>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2b01      	cmp	r3, #1
 8012044:	d10e      	bne.n	8012064 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012046:	4b0b      	ldr	r3, [pc, #44]	; (8012074 <vPortEnterCritical+0x58>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	2b00      	cmp	r3, #0
 801204e:	d009      	beq.n	8012064 <vPortEnterCritical+0x48>
 8012050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012054:	f383 8811 	msr	BASEPRI, r3
 8012058:	f3bf 8f6f 	isb	sy
 801205c:	f3bf 8f4f 	dsb	sy
 8012060:	603b      	str	r3, [r7, #0]
 8012062:	e7fe      	b.n	8012062 <vPortEnterCritical+0x46>
	}
}
 8012064:	bf00      	nop
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	2000009c 	.word	0x2000009c
 8012074:	e000ed04 	.word	0xe000ed04

08012078 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801207e:	4b11      	ldr	r3, [pc, #68]	; (80120c4 <vPortExitCritical+0x4c>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d109      	bne.n	801209a <vPortExitCritical+0x22>
 8012086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208a:	f383 8811 	msr	BASEPRI, r3
 801208e:	f3bf 8f6f 	isb	sy
 8012092:	f3bf 8f4f 	dsb	sy
 8012096:	607b      	str	r3, [r7, #4]
 8012098:	e7fe      	b.n	8012098 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801209a:	4b0a      	ldr	r3, [pc, #40]	; (80120c4 <vPortExitCritical+0x4c>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	3b01      	subs	r3, #1
 80120a0:	4a08      	ldr	r2, [pc, #32]	; (80120c4 <vPortExitCritical+0x4c>)
 80120a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80120a4:	4b07      	ldr	r3, [pc, #28]	; (80120c4 <vPortExitCritical+0x4c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d104      	bne.n	80120b6 <vPortExitCritical+0x3e>
 80120ac:	2300      	movs	r3, #0
 80120ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	2000009c 	.word	0x2000009c
	...

080120d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120d0:	f3ef 8009 	mrs	r0, PSP
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	4b15      	ldr	r3, [pc, #84]	; (8012130 <pxCurrentTCBConst>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	f01e 0f10 	tst.w	lr, #16
 80120e0:	bf08      	it	eq
 80120e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80120e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ea:	6010      	str	r0, [r2, #0]
 80120ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80120f4:	f380 8811 	msr	BASEPRI, r0
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f7fe ff28 	bl	8010f54 <vTaskSwitchContext>
 8012104:	f04f 0000 	mov.w	r0, #0
 8012108:	f380 8811 	msr	BASEPRI, r0
 801210c:	bc09      	pop	{r0, r3}
 801210e:	6819      	ldr	r1, [r3, #0]
 8012110:	6808      	ldr	r0, [r1, #0]
 8012112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012116:	f01e 0f10 	tst.w	lr, #16
 801211a:	bf08      	it	eq
 801211c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012120:	f380 8809 	msr	PSP, r0
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w

08012130 <pxCurrentTCBConst>:
 8012130:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012134:	bf00      	nop
 8012136:	bf00      	nop

08012138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012150:	f7fe fe48 	bl	8010de4 <xTaskIncrementTick>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d003      	beq.n	8012162 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801215a:	4b06      	ldr	r3, [pc, #24]	; (8012174 <SysTick_Handler+0x3c>)
 801215c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	2300      	movs	r3, #0
 8012164:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801216c:	bf00      	nop
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	e000ed04 	.word	0xe000ed04

08012178 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012178:	b480      	push	{r7}
 801217a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801217c:	4b0b      	ldr	r3, [pc, #44]	; (80121ac <vPortSetupTimerInterrupt+0x34>)
 801217e:	2200      	movs	r2, #0
 8012180:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012182:	4b0b      	ldr	r3, [pc, #44]	; (80121b0 <vPortSetupTimerInterrupt+0x38>)
 8012184:	2200      	movs	r2, #0
 8012186:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012188:	4b0a      	ldr	r3, [pc, #40]	; (80121b4 <vPortSetupTimerInterrupt+0x3c>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4a0a      	ldr	r2, [pc, #40]	; (80121b8 <vPortSetupTimerInterrupt+0x40>)
 801218e:	fba2 2303 	umull	r2, r3, r2, r3
 8012192:	099b      	lsrs	r3, r3, #6
 8012194:	4a09      	ldr	r2, [pc, #36]	; (80121bc <vPortSetupTimerInterrupt+0x44>)
 8012196:	3b01      	subs	r3, #1
 8012198:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801219a:	4b04      	ldr	r3, [pc, #16]	; (80121ac <vPortSetupTimerInterrupt+0x34>)
 801219c:	2207      	movs	r2, #7
 801219e:	601a      	str	r2, [r3, #0]
}
 80121a0:	bf00      	nop
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr
 80121aa:	bf00      	nop
 80121ac:	e000e010 	.word	0xe000e010
 80121b0:	e000e018 	.word	0xe000e018
 80121b4:	20000018 	.word	0x20000018
 80121b8:	10624dd3 	.word	0x10624dd3
 80121bc:	e000e014 	.word	0xe000e014

080121c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80121d0 <vPortEnableVFP+0x10>
 80121c4:	6801      	ldr	r1, [r0, #0]
 80121c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80121ca:	6001      	str	r1, [r0, #0]
 80121cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80121ce:	bf00      	nop
 80121d0:	e000ed88 	.word	0xe000ed88

080121d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80121d4:	b480      	push	{r7}
 80121d6:	b085      	sub	sp, #20
 80121d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80121da:	f3ef 8305 	mrs	r3, IPSR
 80121de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b0f      	cmp	r3, #15
 80121e4:	d913      	bls.n	801220e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80121e6:	4a16      	ldr	r2, [pc, #88]	; (8012240 <vPortValidateInterruptPriority+0x6c>)
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	4413      	add	r3, r2
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80121f0:	4b14      	ldr	r3, [pc, #80]	; (8012244 <vPortValidateInterruptPriority+0x70>)
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	7afa      	ldrb	r2, [r7, #11]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d209      	bcs.n	801220e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80121fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fe:	f383 8811 	msr	BASEPRI, r3
 8012202:	f3bf 8f6f 	isb	sy
 8012206:	f3bf 8f4f 	dsb	sy
 801220a:	607b      	str	r3, [r7, #4]
 801220c:	e7fe      	b.n	801220c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801220e:	4b0e      	ldr	r3, [pc, #56]	; (8012248 <vPortValidateInterruptPriority+0x74>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012216:	4b0d      	ldr	r3, [pc, #52]	; (801224c <vPortValidateInterruptPriority+0x78>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	429a      	cmp	r2, r3
 801221c:	d909      	bls.n	8012232 <vPortValidateInterruptPriority+0x5e>
 801221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012222:	f383 8811 	msr	BASEPRI, r3
 8012226:	f3bf 8f6f 	isb	sy
 801222a:	f3bf 8f4f 	dsb	sy
 801222e:	603b      	str	r3, [r7, #0]
 8012230:	e7fe      	b.n	8012230 <vPortValidateInterruptPriority+0x5c>
	}
 8012232:	bf00      	nop
 8012234:	3714      	adds	r7, #20
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	e000e3f0 	.word	0xe000e3f0
 8012244:	20000e8c 	.word	0x20000e8c
 8012248:	e000ed0c 	.word	0xe000ed0c
 801224c:	20000e90 	.word	0x20000e90

08012250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b08a      	sub	sp, #40	; 0x28
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012258:	2300      	movs	r3, #0
 801225a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801225c:	f7fe fd08 	bl	8010c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012260:	4b57      	ldr	r3, [pc, #348]	; (80123c0 <pvPortMalloc+0x170>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d101      	bne.n	801226c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012268:	f000 f90c 	bl	8012484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801226c:	4b55      	ldr	r3, [pc, #340]	; (80123c4 <pvPortMalloc+0x174>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4013      	ands	r3, r2
 8012274:	2b00      	cmp	r3, #0
 8012276:	f040 808c 	bne.w	8012392 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d01c      	beq.n	80122ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8012280:	2208      	movs	r2, #8
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4413      	add	r3, r2
 8012286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f003 0307 	and.w	r3, r3, #7
 801228e:	2b00      	cmp	r3, #0
 8012290:	d013      	beq.n	80122ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f023 0307 	bic.w	r3, r3, #7
 8012298:	3308      	adds	r3, #8
 801229a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f003 0307 	and.w	r3, r3, #7
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d009      	beq.n	80122ba <pvPortMalloc+0x6a>
 80122a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122aa:	f383 8811 	msr	BASEPRI, r3
 80122ae:	f3bf 8f6f 	isb	sy
 80122b2:	f3bf 8f4f 	dsb	sy
 80122b6:	617b      	str	r3, [r7, #20]
 80122b8:	e7fe      	b.n	80122b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d068      	beq.n	8012392 <pvPortMalloc+0x142>
 80122c0:	4b41      	ldr	r3, [pc, #260]	; (80123c8 <pvPortMalloc+0x178>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d863      	bhi.n	8012392 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122ca:	4b40      	ldr	r3, [pc, #256]	; (80123cc <pvPortMalloc+0x17c>)
 80122cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122ce:	4b3f      	ldr	r3, [pc, #252]	; (80123cc <pvPortMalloc+0x17c>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122d4:	e004      	b.n	80122e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80122d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d903      	bls.n	80122f2 <pvPortMalloc+0xa2>
 80122ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d1f1      	bne.n	80122d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122f2:	4b33      	ldr	r3, [pc, #204]	; (80123c0 <pvPortMalloc+0x170>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d04a      	beq.n	8012392 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122fc:	6a3b      	ldr	r3, [r7, #32]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2208      	movs	r2, #8
 8012302:	4413      	add	r3, r2
 8012304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	6a3b      	ldr	r3, [r7, #32]
 801230c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012310:	685a      	ldr	r2, [r3, #4]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	1ad2      	subs	r2, r2, r3
 8012316:	2308      	movs	r3, #8
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	429a      	cmp	r2, r3
 801231c:	d91e      	bls.n	801235c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	4413      	add	r3, r2
 8012324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	f003 0307 	and.w	r3, r3, #7
 801232c:	2b00      	cmp	r3, #0
 801232e:	d009      	beq.n	8012344 <pvPortMalloc+0xf4>
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	f383 8811 	msr	BASEPRI, r3
 8012338:	f3bf 8f6f 	isb	sy
 801233c:	f3bf 8f4f 	dsb	sy
 8012340:	613b      	str	r3, [r7, #16]
 8012342:	e7fe      	b.n	8012342 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012346:	685a      	ldr	r2, [r3, #4]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	1ad2      	subs	r2, r2, r3
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012356:	69b8      	ldr	r0, [r7, #24]
 8012358:	f000 f8f6 	bl	8012548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801235c:	4b1a      	ldr	r3, [pc, #104]	; (80123c8 <pvPortMalloc+0x178>)
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	1ad3      	subs	r3, r2, r3
 8012366:	4a18      	ldr	r2, [pc, #96]	; (80123c8 <pvPortMalloc+0x178>)
 8012368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801236a:	4b17      	ldr	r3, [pc, #92]	; (80123c8 <pvPortMalloc+0x178>)
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	4b18      	ldr	r3, [pc, #96]	; (80123d0 <pvPortMalloc+0x180>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	429a      	cmp	r2, r3
 8012374:	d203      	bcs.n	801237e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012376:	4b14      	ldr	r3, [pc, #80]	; (80123c8 <pvPortMalloc+0x178>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4a15      	ldr	r2, [pc, #84]	; (80123d0 <pvPortMalloc+0x180>)
 801237c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	4b10      	ldr	r3, [pc, #64]	; (80123c4 <pvPortMalloc+0x174>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	431a      	orrs	r2, r3
 8012388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238e:	2200      	movs	r2, #0
 8012390:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012392:	f7fe fc7b 	bl	8010c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	f003 0307 	and.w	r3, r3, #7
 801239c:	2b00      	cmp	r3, #0
 801239e:	d009      	beq.n	80123b4 <pvPortMalloc+0x164>
 80123a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a4:	f383 8811 	msr	BASEPRI, r3
 80123a8:	f3bf 8f6f 	isb	sy
 80123ac:	f3bf 8f4f 	dsb	sy
 80123b0:	60fb      	str	r3, [r7, #12]
 80123b2:	e7fe      	b.n	80123b2 <pvPortMalloc+0x162>
	return pvReturn;
 80123b4:	69fb      	ldr	r3, [r7, #28]
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3728      	adds	r7, #40	; 0x28
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	20004a9c 	.word	0x20004a9c
 80123c4:	20004aa8 	.word	0x20004aa8
 80123c8:	20004aa0 	.word	0x20004aa0
 80123cc:	20004a94 	.word	0x20004a94
 80123d0:	20004aa4 	.word	0x20004aa4

080123d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b086      	sub	sp, #24
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d046      	beq.n	8012474 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80123e6:	2308      	movs	r3, #8
 80123e8:	425b      	negs	r3, r3
 80123ea:	697a      	ldr	r2, [r7, #20]
 80123ec:	4413      	add	r3, r2
 80123ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	685a      	ldr	r2, [r3, #4]
 80123f8:	4b20      	ldr	r3, [pc, #128]	; (801247c <vPortFree+0xa8>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	4013      	ands	r3, r2
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d109      	bne.n	8012416 <vPortFree+0x42>
 8012402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012406:	f383 8811 	msr	BASEPRI, r3
 801240a:	f3bf 8f6f 	isb	sy
 801240e:	f3bf 8f4f 	dsb	sy
 8012412:	60fb      	str	r3, [r7, #12]
 8012414:	e7fe      	b.n	8012414 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d009      	beq.n	8012432 <vPortFree+0x5e>
 801241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	60bb      	str	r3, [r7, #8]
 8012430:	e7fe      	b.n	8012430 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	685a      	ldr	r2, [r3, #4]
 8012436:	4b11      	ldr	r3, [pc, #68]	; (801247c <vPortFree+0xa8>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4013      	ands	r3, r2
 801243c:	2b00      	cmp	r3, #0
 801243e:	d019      	beq.n	8012474 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d115      	bne.n	8012474 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	685a      	ldr	r2, [r3, #4]
 801244c:	4b0b      	ldr	r3, [pc, #44]	; (801247c <vPortFree+0xa8>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	43db      	mvns	r3, r3
 8012452:	401a      	ands	r2, r3
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012458:	f7fe fc0a 	bl	8010c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	685a      	ldr	r2, [r3, #4]
 8012460:	4b07      	ldr	r3, [pc, #28]	; (8012480 <vPortFree+0xac>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4413      	add	r3, r2
 8012466:	4a06      	ldr	r2, [pc, #24]	; (8012480 <vPortFree+0xac>)
 8012468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801246a:	6938      	ldr	r0, [r7, #16]
 801246c:	f000 f86c 	bl	8012548 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012470:	f7fe fc0c 	bl	8010c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012474:	bf00      	nop
 8012476:	3718      	adds	r7, #24
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	20004aa8 	.word	0x20004aa8
 8012480:	20004aa0 	.word	0x20004aa0

08012484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801248a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801248e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012490:	4b27      	ldr	r3, [pc, #156]	; (8012530 <prvHeapInit+0xac>)
 8012492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f003 0307 	and.w	r3, r3, #7
 801249a:	2b00      	cmp	r3, #0
 801249c:	d00c      	beq.n	80124b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3307      	adds	r3, #7
 80124a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f023 0307 	bic.w	r3, r3, #7
 80124aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80124ac:	68ba      	ldr	r2, [r7, #8]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	4a1f      	ldr	r2, [pc, #124]	; (8012530 <prvHeapInit+0xac>)
 80124b4:	4413      	add	r3, r2
 80124b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80124bc:	4a1d      	ldr	r2, [pc, #116]	; (8012534 <prvHeapInit+0xb0>)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80124c2:	4b1c      	ldr	r3, [pc, #112]	; (8012534 <prvHeapInit+0xb0>)
 80124c4:	2200      	movs	r2, #0
 80124c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	4413      	add	r3, r2
 80124ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80124d0:	2208      	movs	r2, #8
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	1a9b      	subs	r3, r3, r2
 80124d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f023 0307 	bic.w	r3, r3, #7
 80124de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	4a15      	ldr	r2, [pc, #84]	; (8012538 <prvHeapInit+0xb4>)
 80124e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80124e6:	4b14      	ldr	r3, [pc, #80]	; (8012538 <prvHeapInit+0xb4>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	2200      	movs	r2, #0
 80124ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80124ee:	4b12      	ldr	r3, [pc, #72]	; (8012538 <prvHeapInit+0xb4>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2200      	movs	r2, #0
 80124f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	1ad2      	subs	r2, r2, r3
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012504:	4b0c      	ldr	r3, [pc, #48]	; (8012538 <prvHeapInit+0xb4>)
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	4a0a      	ldr	r2, [pc, #40]	; (801253c <prvHeapInit+0xb8>)
 8012512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	4a09      	ldr	r2, [pc, #36]	; (8012540 <prvHeapInit+0xbc>)
 801251a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <prvHeapInit+0xc0>)
 801251e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012522:	601a      	str	r2, [r3, #0]
}
 8012524:	bf00      	nop
 8012526:	3714      	adds	r7, #20
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr
 8012530:	20000e94 	.word	0x20000e94
 8012534:	20004a94 	.word	0x20004a94
 8012538:	20004a9c 	.word	0x20004a9c
 801253c:	20004aa4 	.word	0x20004aa4
 8012540:	20004aa0 	.word	0x20004aa0
 8012544:	20004aa8 	.word	0x20004aa8

08012548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012550:	4b28      	ldr	r3, [pc, #160]	; (80125f4 <prvInsertBlockIntoFreeList+0xac>)
 8012552:	60fb      	str	r3, [r7, #12]
 8012554:	e002      	b.n	801255c <prvInsertBlockIntoFreeList+0x14>
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	60fb      	str	r3, [r7, #12]
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	429a      	cmp	r2, r3
 8012564:	d8f7      	bhi.n	8012556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	68ba      	ldr	r2, [r7, #8]
 8012570:	4413      	add	r3, r2
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	429a      	cmp	r2, r3
 8012576:	d108      	bne.n	801258a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	685a      	ldr	r2, [r3, #4]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	441a      	add	r2, r3
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	68ba      	ldr	r2, [r7, #8]
 8012594:	441a      	add	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	429a      	cmp	r2, r3
 801259c:	d118      	bne.n	80125d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	4b15      	ldr	r3, [pc, #84]	; (80125f8 <prvInsertBlockIntoFreeList+0xb0>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d00d      	beq.n	80125c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	685a      	ldr	r2, [r3, #4]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	441a      	add	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	e008      	b.n	80125d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80125c6:	4b0c      	ldr	r3, [pc, #48]	; (80125f8 <prvInsertBlockIntoFreeList+0xb0>)
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	601a      	str	r2, [r3, #0]
 80125ce:	e003      	b.n	80125d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80125d8:	68fa      	ldr	r2, [r7, #12]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d002      	beq.n	80125e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125e6:	bf00      	nop
 80125e8:	3714      	adds	r7, #20
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	20004a94 	.word	0x20004a94
 80125f8:	20004a9c 	.word	0x20004a9c

080125fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012600:	2201      	movs	r2, #1
 8012602:	490e      	ldr	r1, [pc, #56]	; (801263c <MX_USB_HOST_Init+0x40>)
 8012604:	480e      	ldr	r0, [pc, #56]	; (8012640 <MX_USB_HOST_Init+0x44>)
 8012606:	f7fb f865 	bl	800d6d4 <USBH_Init>
 801260a:	4603      	mov	r3, r0
 801260c:	2b00      	cmp	r3, #0
 801260e:	d001      	beq.n	8012614 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012610:	f7ef fa36 	bl	8001a80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012614:	490b      	ldr	r1, [pc, #44]	; (8012644 <MX_USB_HOST_Init+0x48>)
 8012616:	480a      	ldr	r0, [pc, #40]	; (8012640 <MX_USB_HOST_Init+0x44>)
 8012618:	f7fb f90c 	bl	800d834 <USBH_RegisterClass>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d001      	beq.n	8012626 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012622:	f7ef fa2d 	bl	8001a80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012626:	4806      	ldr	r0, [pc, #24]	; (8012640 <MX_USB_HOST_Init+0x44>)
 8012628:	f7fb f990 	bl	800d94c <USBH_Start>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012632:	f7ef fa25 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012636:	bf00      	nop
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop
 801263c:	08012649 	.word	0x08012649
 8012640:	20005428 	.word	0x20005428
 8012644:	2000007c 	.word	0x2000007c

08012648 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	460b      	mov	r3, r1
 8012652:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012654:	78fb      	ldrb	r3, [r7, #3]
 8012656:	3b01      	subs	r3, #1
 8012658:	2b04      	cmp	r3, #4
 801265a:	d819      	bhi.n	8012690 <USBH_UserProcess+0x48>
 801265c:	a201      	add	r2, pc, #4	; (adr r2, 8012664 <USBH_UserProcess+0x1c>)
 801265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012662:	bf00      	nop
 8012664:	08012691 	.word	0x08012691
 8012668:	08012681 	.word	0x08012681
 801266c:	08012691 	.word	0x08012691
 8012670:	08012689 	.word	0x08012689
 8012674:	08012679 	.word	0x08012679
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012678:	4b09      	ldr	r3, [pc, #36]	; (80126a0 <USBH_UserProcess+0x58>)
 801267a:	2203      	movs	r2, #3
 801267c:	701a      	strb	r2, [r3, #0]
  break;
 801267e:	e008      	b.n	8012692 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012680:	4b07      	ldr	r3, [pc, #28]	; (80126a0 <USBH_UserProcess+0x58>)
 8012682:	2202      	movs	r2, #2
 8012684:	701a      	strb	r2, [r3, #0]
  break;
 8012686:	e004      	b.n	8012692 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012688:	4b05      	ldr	r3, [pc, #20]	; (80126a0 <USBH_UserProcess+0x58>)
 801268a:	2201      	movs	r2, #1
 801268c:	701a      	strb	r2, [r3, #0]
  break;
 801268e:	e000      	b.n	8012692 <USBH_UserProcess+0x4a>

  default:
  break;
 8012690:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012692:	bf00      	nop
 8012694:	370c      	adds	r7, #12
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	20004aac 	.word	0x20004aac

080126a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b08a      	sub	sp, #40	; 0x28
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126ac:	f107 0314 	add.w	r3, r7, #20
 80126b0:	2200      	movs	r2, #0
 80126b2:	601a      	str	r2, [r3, #0]
 80126b4:	605a      	str	r2, [r3, #4]
 80126b6:	609a      	str	r2, [r3, #8]
 80126b8:	60da      	str	r2, [r3, #12]
 80126ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80126c4:	d147      	bne.n	8012756 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80126c6:	2300      	movs	r3, #0
 80126c8:	613b      	str	r3, [r7, #16]
 80126ca:	4b25      	ldr	r3, [pc, #148]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 80126cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ce:	4a24      	ldr	r2, [pc, #144]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 80126d0:	f043 0301 	orr.w	r3, r3, #1
 80126d4:	6313      	str	r3, [r2, #48]	; 0x30
 80126d6:	4b22      	ldr	r3, [pc, #136]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 80126d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126da:	f003 0301 	and.w	r3, r3, #1
 80126de:	613b      	str	r3, [r7, #16]
 80126e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80126e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80126e8:	2300      	movs	r3, #0
 80126ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126ec:	2300      	movs	r3, #0
 80126ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80126f0:	f107 0314 	add.w	r3, r7, #20
 80126f4:	4619      	mov	r1, r3
 80126f6:	481b      	ldr	r0, [pc, #108]	; (8012764 <HAL_HCD_MspInit+0xc0>)
 80126f8:	f7f2 fdf2 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80126fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012702:	2302      	movs	r3, #2
 8012704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012706:	2300      	movs	r3, #0
 8012708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801270a:	2303      	movs	r3, #3
 801270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801270e:	230a      	movs	r3, #10
 8012710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012712:	f107 0314 	add.w	r3, r7, #20
 8012716:	4619      	mov	r1, r3
 8012718:	4812      	ldr	r0, [pc, #72]	; (8012764 <HAL_HCD_MspInit+0xc0>)
 801271a:	f7f2 fde1 	bl	80052e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801271e:	4b10      	ldr	r3, [pc, #64]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 8012720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012722:	4a0f      	ldr	r2, [pc, #60]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 8012724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012728:	6353      	str	r3, [r2, #52]	; 0x34
 801272a:	2300      	movs	r3, #0
 801272c:	60fb      	str	r3, [r7, #12]
 801272e:	4b0c      	ldr	r3, [pc, #48]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 8012730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012732:	4a0b      	ldr	r2, [pc, #44]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 8012734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012738:	6453      	str	r3, [r2, #68]	; 0x44
 801273a:	4b09      	ldr	r3, [pc, #36]	; (8012760 <HAL_HCD_MspInit+0xbc>)
 801273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012742:	60fb      	str	r3, [r7, #12]
 8012744:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012746:	2200      	movs	r2, #0
 8012748:	2100      	movs	r1, #0
 801274a:	2043      	movs	r0, #67	; 0x43
 801274c:	f7f1 ff12 	bl	8004574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012750:	2043      	movs	r0, #67	; 0x43
 8012752:	f7f1 ff2b 	bl	80045ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012756:	bf00      	nop
 8012758:	3728      	adds	r7, #40	; 0x28
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	40023800 	.word	0x40023800
 8012764:	40020000 	.word	0x40020000

08012768 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012776:	4618      	mov	r0, r3
 8012778:	f7fb fd95 	bl	800e2a6 <USBH_LL_IncTimer>
}
 801277c:	bf00      	nop
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012792:	4618      	mov	r0, r3
 8012794:	f7fb fdd9 	bl	800e34a <USBH_LL_Connect>
}
 8012798:	bf00      	nop
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}

080127a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fb fdee 	bl	800e390 <USBH_LL_Disconnect>
}
 80127b4:	bf00      	nop
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	460b      	mov	r3, r1
 80127c6:	70fb      	strb	r3, [r7, #3]
 80127c8:	4613      	mov	r3, r2
 80127ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fb fe25 	bl	800e422 <USBH_LL_NotifyURBChange>
#endif
}
 80127d8:	bf00      	nop
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7fb fd83 	bl	800e2fa <USBH_LL_PortEnabled>
}
 80127f4:	bf00      	nop
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801280a:	4618      	mov	r0, r3
 801280c:	f7fb fd8f 	bl	800e32e <USBH_LL_PortDisabled>
}
 8012810:	bf00      	nop
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012826:	2b01      	cmp	r3, #1
 8012828:	d12a      	bne.n	8012880 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801282a:	4a18      	ldr	r2, [pc, #96]	; (801288c <USBH_LL_Init+0x74>)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4a15      	ldr	r2, [pc, #84]	; (801288c <USBH_LL_Init+0x74>)
 8012836:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801283a:	4b14      	ldr	r3, [pc, #80]	; (801288c <USBH_LL_Init+0x74>)
 801283c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012840:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8012842:	4b12      	ldr	r3, [pc, #72]	; (801288c <USBH_LL_Init+0x74>)
 8012844:	220c      	movs	r2, #12
 8012846:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012848:	4b10      	ldr	r3, [pc, #64]	; (801288c <USBH_LL_Init+0x74>)
 801284a:	2201      	movs	r2, #1
 801284c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801284e:	4b0f      	ldr	r3, [pc, #60]	; (801288c <USBH_LL_Init+0x74>)
 8012850:	2200      	movs	r2, #0
 8012852:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012854:	4b0d      	ldr	r3, [pc, #52]	; (801288c <USBH_LL_Init+0x74>)
 8012856:	2202      	movs	r2, #2
 8012858:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801285a:	4b0c      	ldr	r3, [pc, #48]	; (801288c <USBH_LL_Init+0x74>)
 801285c:	2200      	movs	r2, #0
 801285e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012860:	480a      	ldr	r0, [pc, #40]	; (801288c <USBH_LL_Init+0x74>)
 8012862:	f7f2 fee8 	bl	8005636 <HAL_HCD_Init>
 8012866:	4603      	mov	r3, r0
 8012868:	2b00      	cmp	r3, #0
 801286a:	d001      	beq.n	8012870 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801286c:	f7ef f908 	bl	8001a80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012870:	4806      	ldr	r0, [pc, #24]	; (801288c <USBH_LL_Init+0x74>)
 8012872:	f7f3 faeb 	bl	8005e4c <HAL_HCD_GetCurrentFrame>
 8012876:	4603      	mov	r3, r0
 8012878:	4619      	mov	r1, r3
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7fb fd04 	bl	800e288 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3708      	adds	r7, #8
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	2000580c 	.word	0x2000580c

08012890 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f3 fa58 	bl	8005d5c <HAL_HCD_Start>
 80128ac:	4603      	mov	r3, r0
 80128ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 f95c 	bl	8012b70 <USBH_Get_USB_Status>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3710      	adds	r7, #16
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b084      	sub	sp, #16
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128ce:	2300      	movs	r3, #0
 80128d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80128d2:	2300      	movs	r3, #0
 80128d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128dc:	4618      	mov	r0, r3
 80128de:	f7f3 fa60 	bl	8005da2 <HAL_HCD_Stop>
 80128e2:	4603      	mov	r3, r0
 80128e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80128e6:	7bfb      	ldrb	r3, [r7, #15]
 80128e8:	4618      	mov	r0, r3
 80128ea:	f000 f941 	bl	8012b70 <USBH_Get_USB_Status>
 80128ee:	4603      	mov	r3, r0
 80128f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012904:	2301      	movs	r3, #1
 8012906:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801290e:	4618      	mov	r0, r3
 8012910:	f7f3 faaa 	bl	8005e68 <HAL_HCD_GetCurrentSpeed>
 8012914:	4603      	mov	r3, r0
 8012916:	2b01      	cmp	r3, #1
 8012918:	d007      	beq.n	801292a <USBH_LL_GetSpeed+0x2e>
 801291a:	2b01      	cmp	r3, #1
 801291c:	d302      	bcc.n	8012924 <USBH_LL_GetSpeed+0x28>
 801291e:	2b02      	cmp	r3, #2
 8012920:	d006      	beq.n	8012930 <USBH_LL_GetSpeed+0x34>
 8012922:	e008      	b.n	8012936 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012924:	2300      	movs	r3, #0
 8012926:	73fb      	strb	r3, [r7, #15]
    break;
 8012928:	e008      	b.n	801293c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801292a:	2301      	movs	r3, #1
 801292c:	73fb      	strb	r3, [r7, #15]
    break;
 801292e:	e005      	b.n	801293c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012930:	2302      	movs	r3, #2
 8012932:	73fb      	strb	r3, [r7, #15]
    break;
 8012934:	e002      	b.n	801293c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8012936:	2301      	movs	r3, #1
 8012938:	73fb      	strb	r3, [r7, #15]
    break;
 801293a:	bf00      	nop
  }
  return  speed;
 801293c:	7bfb      	ldrb	r3, [r7, #15]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012946:	b580      	push	{r7, lr}
 8012948:	b084      	sub	sp, #16
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801295c:	4618      	mov	r0, r3
 801295e:	f7f3 fa3d 	bl	8005ddc <HAL_HCD_ResetPort>
 8012962:	4603      	mov	r3, r0
 8012964:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	4618      	mov	r0, r3
 801296a:	f000 f901 	bl	8012b70 <USBH_Get_USB_Status>
 801296e:	4603      	mov	r3, r0
 8012970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012972:	7bbb      	ldrb	r3, [r7, #14]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	460b      	mov	r3, r1
 8012986:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801298e:	78fa      	ldrb	r2, [r7, #3]
 8012990:	4611      	mov	r1, r2
 8012992:	4618      	mov	r0, r3
 8012994:	f7f3 fa45 	bl	8005e22 <HAL_HCD_HC_GetXferCount>
 8012998:	4603      	mov	r3, r0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80129a2:	b590      	push	{r4, r7, lr}
 80129a4:	b089      	sub	sp, #36	; 0x24
 80129a6:	af04      	add	r7, sp, #16
 80129a8:	6078      	str	r0, [r7, #4]
 80129aa:	4608      	mov	r0, r1
 80129ac:	4611      	mov	r1, r2
 80129ae:	461a      	mov	r2, r3
 80129b0:	4603      	mov	r3, r0
 80129b2:	70fb      	strb	r3, [r7, #3]
 80129b4:	460b      	mov	r3, r1
 80129b6:	70bb      	strb	r3, [r7, #2]
 80129b8:	4613      	mov	r3, r2
 80129ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129bc:	2300      	movs	r3, #0
 80129be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129c0:	2300      	movs	r3, #0
 80129c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80129ca:	787c      	ldrb	r4, [r7, #1]
 80129cc:	78ba      	ldrb	r2, [r7, #2]
 80129ce:	78f9      	ldrb	r1, [r7, #3]
 80129d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80129d2:	9302      	str	r3, [sp, #8]
 80129d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80129d8:	9301      	str	r3, [sp, #4]
 80129da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80129de:	9300      	str	r3, [sp, #0]
 80129e0:	4623      	mov	r3, r4
 80129e2:	f7f2 fe8a 	bl	80056fa <HAL_HCD_HC_Init>
 80129e6:	4603      	mov	r3, r0
 80129e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80129ea:	7bfb      	ldrb	r3, [r7, #15]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f000 f8bf 	bl	8012b70 <USBH_Get_USB_Status>
 80129f2:	4603      	mov	r3, r0
 80129f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3714      	adds	r7, #20
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd90      	pop	{r4, r7, pc}

08012a00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	460b      	mov	r3, r1
 8012a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a10:	2300      	movs	r3, #0
 8012a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a1a:	78fa      	ldrb	r2, [r7, #3]
 8012a1c:	4611      	mov	r1, r2
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7f2 ff03 	bl	800582a <HAL_HCD_HC_Halt>
 8012a24:	4603      	mov	r3, r0
 8012a26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a28:	7bfb      	ldrb	r3, [r7, #15]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f000 f8a0 	bl	8012b70 <USBH_Get_USB_Status>
 8012a30:	4603      	mov	r3, r0
 8012a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3710      	adds	r7, #16
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012a3e:	b590      	push	{r4, r7, lr}
 8012a40:	b089      	sub	sp, #36	; 0x24
 8012a42:	af04      	add	r7, sp, #16
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	4608      	mov	r0, r1
 8012a48:	4611      	mov	r1, r2
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	70fb      	strb	r3, [r7, #3]
 8012a50:	460b      	mov	r3, r1
 8012a52:	70bb      	strb	r3, [r7, #2]
 8012a54:	4613      	mov	r3, r2
 8012a56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012a66:	787c      	ldrb	r4, [r7, #1]
 8012a68:	78ba      	ldrb	r2, [r7, #2]
 8012a6a:	78f9      	ldrb	r1, [r7, #3]
 8012a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a70:	9303      	str	r3, [sp, #12]
 8012a72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012a74:	9302      	str	r3, [sp, #8]
 8012a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a78:	9301      	str	r3, [sp, #4]
 8012a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	4623      	mov	r3, r4
 8012a82:	f7f2 fef5 	bl	8005870 <HAL_HCD_HC_SubmitRequest>
 8012a86:	4603      	mov	r3, r0
 8012a88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012a8a:	7bfb      	ldrb	r3, [r7, #15]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f000 f86f 	bl	8012b70 <USBH_Get_USB_Status>
 8012a92:	4603      	mov	r3, r0
 8012a94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a96:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3714      	adds	r7, #20
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd90      	pop	{r4, r7, pc}

08012aa0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012ab2:	78fa      	ldrb	r2, [r7, #3]
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7f3 f99e 	bl	8005df8 <HAL_HCD_HC_GetURBState>
 8012abc:	4603      	mov	r3, r0
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3708      	adds	r7, #8
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b082      	sub	sp, #8
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	460b      	mov	r3, r1
 8012ad0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d103      	bne.n	8012ae4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012adc:	78fb      	ldrb	r3, [r7, #3]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f000 f872 	bl	8012bc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012ae4:	20c8      	movs	r0, #200	; 0xc8
 8012ae6:	f7f1 f9f9 	bl	8003edc <HAL_Delay>
  return USBH_OK;
 8012aea:	2300      	movs	r3, #0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	460b      	mov	r3, r1
 8012afe:	70fb      	strb	r3, [r7, #3]
 8012b00:	4613      	mov	r3, r2
 8012b02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012b0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012b0c:	78fa      	ldrb	r2, [r7, #3]
 8012b0e:	68f9      	ldr	r1, [r7, #12]
 8012b10:	4613      	mov	r3, r2
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	4413      	add	r3, r2
 8012b16:	00db      	lsls	r3, r3, #3
 8012b18:	440b      	add	r3, r1
 8012b1a:	333b      	adds	r3, #59	; 0x3b
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00a      	beq.n	8012b38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012b22:	78fa      	ldrb	r2, [r7, #3]
 8012b24:	68f9      	ldr	r1, [r7, #12]
 8012b26:	4613      	mov	r3, r2
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	4413      	add	r3, r2
 8012b2c:	00db      	lsls	r3, r3, #3
 8012b2e:	440b      	add	r3, r1
 8012b30:	3350      	adds	r3, #80	; 0x50
 8012b32:	78ba      	ldrb	r2, [r7, #2]
 8012b34:	701a      	strb	r2, [r3, #0]
 8012b36:	e009      	b.n	8012b4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012b38:	78fa      	ldrb	r2, [r7, #3]
 8012b3a:	68f9      	ldr	r1, [r7, #12]
 8012b3c:	4613      	mov	r3, r2
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	4413      	add	r3, r2
 8012b42:	00db      	lsls	r3, r3, #3
 8012b44:	440b      	add	r3, r1
 8012b46:	3351      	adds	r3, #81	; 0x51
 8012b48:	78ba      	ldrb	r2, [r7, #2]
 8012b4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012b4c:	2300      	movs	r3, #0
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3714      	adds	r7, #20
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr

08012b5a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012b5a:	b580      	push	{r7, lr}
 8012b5c:	b082      	sub	sp, #8
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7f1 f9ba 	bl	8003edc <HAL_Delay>
}
 8012b68:	bf00      	nop
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b085      	sub	sp, #20
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	4603      	mov	r3, r0
 8012b78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012b7e:	79fb      	ldrb	r3, [r7, #7]
 8012b80:	2b03      	cmp	r3, #3
 8012b82:	d817      	bhi.n	8012bb4 <USBH_Get_USB_Status+0x44>
 8012b84:	a201      	add	r2, pc, #4	; (adr r2, 8012b8c <USBH_Get_USB_Status+0x1c>)
 8012b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b8a:	bf00      	nop
 8012b8c:	08012b9d 	.word	0x08012b9d
 8012b90:	08012ba3 	.word	0x08012ba3
 8012b94:	08012ba9 	.word	0x08012ba9
 8012b98:	08012baf 	.word	0x08012baf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8012ba0:	e00b      	b.n	8012bba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8012ba6:	e008      	b.n	8012bba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	73fb      	strb	r3, [r7, #15]
    break;
 8012bac:	e005      	b.n	8012bba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012bae:	2302      	movs	r3, #2
 8012bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8012bb2:	e002      	b.n	8012bba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012bb4:	2302      	movs	r3, #2
 8012bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8012bb8:	bf00      	nop
  }
  return usb_status;
 8012bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3714      	adds	r7, #20
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr

08012bc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	4603      	mov	r3, r0
 8012bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012bd2:	79fb      	ldrb	r3, [r7, #7]
 8012bd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012bd6:	79fb      	ldrb	r3, [r7, #7]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d102      	bne.n	8012be2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012bdc:	2301      	movs	r3, #1
 8012bde:	73fb      	strb	r3, [r7, #15]
 8012be0:	e001      	b.n	8012be6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012be2:	2300      	movs	r3, #0
 8012be4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8012be6:	7bfb      	ldrb	r3, [r7, #15]
 8012be8:	461a      	mov	r2, r3
 8012bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012bee:	4803      	ldr	r0, [pc, #12]	; (8012bfc <MX_DriverVbusFS+0x34>)
 8012bf0:	f7f2 fd08 	bl	8005604 <HAL_GPIO_WritePin>
}
 8012bf4:	bf00      	nop
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	40021800 	.word	0x40021800

08012c00 <__errno>:
 8012c00:	4b01      	ldr	r3, [pc, #4]	; (8012c08 <__errno+0x8>)
 8012c02:	6818      	ldr	r0, [r3, #0]
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	200000a0 	.word	0x200000a0

08012c0c <__libc_init_array>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	4e0d      	ldr	r6, [pc, #52]	; (8012c44 <__libc_init_array+0x38>)
 8012c10:	4c0d      	ldr	r4, [pc, #52]	; (8012c48 <__libc_init_array+0x3c>)
 8012c12:	1ba4      	subs	r4, r4, r6
 8012c14:	10a4      	asrs	r4, r4, #2
 8012c16:	2500      	movs	r5, #0
 8012c18:	42a5      	cmp	r5, r4
 8012c1a:	d109      	bne.n	8012c30 <__libc_init_array+0x24>
 8012c1c:	4e0b      	ldr	r6, [pc, #44]	; (8012c4c <__libc_init_array+0x40>)
 8012c1e:	4c0c      	ldr	r4, [pc, #48]	; (8012c50 <__libc_init_array+0x44>)
 8012c20:	f000 fc38 	bl	8013494 <_init>
 8012c24:	1ba4      	subs	r4, r4, r6
 8012c26:	10a4      	asrs	r4, r4, #2
 8012c28:	2500      	movs	r5, #0
 8012c2a:	42a5      	cmp	r5, r4
 8012c2c:	d105      	bne.n	8012c3a <__libc_init_array+0x2e>
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}
 8012c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012c34:	4798      	blx	r3
 8012c36:	3501      	adds	r5, #1
 8012c38:	e7ee      	b.n	8012c18 <__libc_init_array+0xc>
 8012c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012c3e:	4798      	blx	r3
 8012c40:	3501      	adds	r5, #1
 8012c42:	e7f2      	b.n	8012c2a <__libc_init_array+0x1e>
 8012c44:	08016234 	.word	0x08016234
 8012c48:	08016234 	.word	0x08016234
 8012c4c:	08016234 	.word	0x08016234
 8012c50:	08016238 	.word	0x08016238

08012c54 <malloc>:
 8012c54:	4b02      	ldr	r3, [pc, #8]	; (8012c60 <malloc+0xc>)
 8012c56:	4601      	mov	r1, r0
 8012c58:	6818      	ldr	r0, [r3, #0]
 8012c5a:	f000 b86d 	b.w	8012d38 <_malloc_r>
 8012c5e:	bf00      	nop
 8012c60:	200000a0 	.word	0x200000a0

08012c64 <free>:
 8012c64:	4b02      	ldr	r3, [pc, #8]	; (8012c70 <free+0xc>)
 8012c66:	4601      	mov	r1, r0
 8012c68:	6818      	ldr	r0, [r3, #0]
 8012c6a:	f000 b817 	b.w	8012c9c <_free_r>
 8012c6e:	bf00      	nop
 8012c70:	200000a0 	.word	0x200000a0

08012c74 <memcpy>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	1e43      	subs	r3, r0, #1
 8012c78:	440a      	add	r2, r1
 8012c7a:	4291      	cmp	r1, r2
 8012c7c:	d100      	bne.n	8012c80 <memcpy+0xc>
 8012c7e:	bd10      	pop	{r4, pc}
 8012c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c88:	e7f7      	b.n	8012c7a <memcpy+0x6>

08012c8a <memset>:
 8012c8a:	4402      	add	r2, r0
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d100      	bne.n	8012c94 <memset+0xa>
 8012c92:	4770      	bx	lr
 8012c94:	f803 1b01 	strb.w	r1, [r3], #1
 8012c98:	e7f9      	b.n	8012c8e <memset+0x4>
	...

08012c9c <_free_r>:
 8012c9c:	b538      	push	{r3, r4, r5, lr}
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	2900      	cmp	r1, #0
 8012ca2:	d045      	beq.n	8012d30 <_free_r+0x94>
 8012ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ca8:	1f0c      	subs	r4, r1, #4
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	bfb8      	it	lt
 8012cae:	18e4      	addlt	r4, r4, r3
 8012cb0:	f000 f8cc 	bl	8012e4c <__malloc_lock>
 8012cb4:	4a1f      	ldr	r2, [pc, #124]	; (8012d34 <_free_r+0x98>)
 8012cb6:	6813      	ldr	r3, [r2, #0]
 8012cb8:	4610      	mov	r0, r2
 8012cba:	b933      	cbnz	r3, 8012cca <_free_r+0x2e>
 8012cbc:	6063      	str	r3, [r4, #4]
 8012cbe:	6014      	str	r4, [r2, #0]
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cc6:	f000 b8c2 	b.w	8012e4e <__malloc_unlock>
 8012cca:	42a3      	cmp	r3, r4
 8012ccc:	d90c      	bls.n	8012ce8 <_free_r+0x4c>
 8012cce:	6821      	ldr	r1, [r4, #0]
 8012cd0:	1862      	adds	r2, r4, r1
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	bf04      	itt	eq
 8012cd6:	681a      	ldreq	r2, [r3, #0]
 8012cd8:	685b      	ldreq	r3, [r3, #4]
 8012cda:	6063      	str	r3, [r4, #4]
 8012cdc:	bf04      	itt	eq
 8012cde:	1852      	addeq	r2, r2, r1
 8012ce0:	6022      	streq	r2, [r4, #0]
 8012ce2:	6004      	str	r4, [r0, #0]
 8012ce4:	e7ec      	b.n	8012cc0 <_free_r+0x24>
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	685a      	ldr	r2, [r3, #4]
 8012cea:	b10a      	cbz	r2, 8012cf0 <_free_r+0x54>
 8012cec:	42a2      	cmp	r2, r4
 8012cee:	d9fa      	bls.n	8012ce6 <_free_r+0x4a>
 8012cf0:	6819      	ldr	r1, [r3, #0]
 8012cf2:	1858      	adds	r0, r3, r1
 8012cf4:	42a0      	cmp	r0, r4
 8012cf6:	d10b      	bne.n	8012d10 <_free_r+0x74>
 8012cf8:	6820      	ldr	r0, [r4, #0]
 8012cfa:	4401      	add	r1, r0
 8012cfc:	1858      	adds	r0, r3, r1
 8012cfe:	4282      	cmp	r2, r0
 8012d00:	6019      	str	r1, [r3, #0]
 8012d02:	d1dd      	bne.n	8012cc0 <_free_r+0x24>
 8012d04:	6810      	ldr	r0, [r2, #0]
 8012d06:	6852      	ldr	r2, [r2, #4]
 8012d08:	605a      	str	r2, [r3, #4]
 8012d0a:	4401      	add	r1, r0
 8012d0c:	6019      	str	r1, [r3, #0]
 8012d0e:	e7d7      	b.n	8012cc0 <_free_r+0x24>
 8012d10:	d902      	bls.n	8012d18 <_free_r+0x7c>
 8012d12:	230c      	movs	r3, #12
 8012d14:	602b      	str	r3, [r5, #0]
 8012d16:	e7d3      	b.n	8012cc0 <_free_r+0x24>
 8012d18:	6820      	ldr	r0, [r4, #0]
 8012d1a:	1821      	adds	r1, r4, r0
 8012d1c:	428a      	cmp	r2, r1
 8012d1e:	bf04      	itt	eq
 8012d20:	6811      	ldreq	r1, [r2, #0]
 8012d22:	6852      	ldreq	r2, [r2, #4]
 8012d24:	6062      	str	r2, [r4, #4]
 8012d26:	bf04      	itt	eq
 8012d28:	1809      	addeq	r1, r1, r0
 8012d2a:	6021      	streq	r1, [r4, #0]
 8012d2c:	605c      	str	r4, [r3, #4]
 8012d2e:	e7c7      	b.n	8012cc0 <_free_r+0x24>
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
 8012d32:	bf00      	nop
 8012d34:	20004ab0 	.word	0x20004ab0

08012d38 <_malloc_r>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	1ccd      	adds	r5, r1, #3
 8012d3c:	f025 0503 	bic.w	r5, r5, #3
 8012d40:	3508      	adds	r5, #8
 8012d42:	2d0c      	cmp	r5, #12
 8012d44:	bf38      	it	cc
 8012d46:	250c      	movcc	r5, #12
 8012d48:	2d00      	cmp	r5, #0
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	db01      	blt.n	8012d52 <_malloc_r+0x1a>
 8012d4e:	42a9      	cmp	r1, r5
 8012d50:	d903      	bls.n	8012d5a <_malloc_r+0x22>
 8012d52:	230c      	movs	r3, #12
 8012d54:	6033      	str	r3, [r6, #0]
 8012d56:	2000      	movs	r0, #0
 8012d58:	bd70      	pop	{r4, r5, r6, pc}
 8012d5a:	f000 f877 	bl	8012e4c <__malloc_lock>
 8012d5e:	4a21      	ldr	r2, [pc, #132]	; (8012de4 <_malloc_r+0xac>)
 8012d60:	6814      	ldr	r4, [r2, #0]
 8012d62:	4621      	mov	r1, r4
 8012d64:	b991      	cbnz	r1, 8012d8c <_malloc_r+0x54>
 8012d66:	4c20      	ldr	r4, [pc, #128]	; (8012de8 <_malloc_r+0xb0>)
 8012d68:	6823      	ldr	r3, [r4, #0]
 8012d6a:	b91b      	cbnz	r3, 8012d74 <_malloc_r+0x3c>
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	f000 f83d 	bl	8012dec <_sbrk_r>
 8012d72:	6020      	str	r0, [r4, #0]
 8012d74:	4629      	mov	r1, r5
 8012d76:	4630      	mov	r0, r6
 8012d78:	f000 f838 	bl	8012dec <_sbrk_r>
 8012d7c:	1c43      	adds	r3, r0, #1
 8012d7e:	d124      	bne.n	8012dca <_malloc_r+0x92>
 8012d80:	230c      	movs	r3, #12
 8012d82:	6033      	str	r3, [r6, #0]
 8012d84:	4630      	mov	r0, r6
 8012d86:	f000 f862 	bl	8012e4e <__malloc_unlock>
 8012d8a:	e7e4      	b.n	8012d56 <_malloc_r+0x1e>
 8012d8c:	680b      	ldr	r3, [r1, #0]
 8012d8e:	1b5b      	subs	r3, r3, r5
 8012d90:	d418      	bmi.n	8012dc4 <_malloc_r+0x8c>
 8012d92:	2b0b      	cmp	r3, #11
 8012d94:	d90f      	bls.n	8012db6 <_malloc_r+0x7e>
 8012d96:	600b      	str	r3, [r1, #0]
 8012d98:	50cd      	str	r5, [r1, r3]
 8012d9a:	18cc      	adds	r4, r1, r3
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f000 f856 	bl	8012e4e <__malloc_unlock>
 8012da2:	f104 000b 	add.w	r0, r4, #11
 8012da6:	1d23      	adds	r3, r4, #4
 8012da8:	f020 0007 	bic.w	r0, r0, #7
 8012dac:	1ac3      	subs	r3, r0, r3
 8012dae:	d0d3      	beq.n	8012d58 <_malloc_r+0x20>
 8012db0:	425a      	negs	r2, r3
 8012db2:	50e2      	str	r2, [r4, r3]
 8012db4:	e7d0      	b.n	8012d58 <_malloc_r+0x20>
 8012db6:	428c      	cmp	r4, r1
 8012db8:	684b      	ldr	r3, [r1, #4]
 8012dba:	bf16      	itet	ne
 8012dbc:	6063      	strne	r3, [r4, #4]
 8012dbe:	6013      	streq	r3, [r2, #0]
 8012dc0:	460c      	movne	r4, r1
 8012dc2:	e7eb      	b.n	8012d9c <_malloc_r+0x64>
 8012dc4:	460c      	mov	r4, r1
 8012dc6:	6849      	ldr	r1, [r1, #4]
 8012dc8:	e7cc      	b.n	8012d64 <_malloc_r+0x2c>
 8012dca:	1cc4      	adds	r4, r0, #3
 8012dcc:	f024 0403 	bic.w	r4, r4, #3
 8012dd0:	42a0      	cmp	r0, r4
 8012dd2:	d005      	beq.n	8012de0 <_malloc_r+0xa8>
 8012dd4:	1a21      	subs	r1, r4, r0
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f000 f808 	bl	8012dec <_sbrk_r>
 8012ddc:	3001      	adds	r0, #1
 8012dde:	d0cf      	beq.n	8012d80 <_malloc_r+0x48>
 8012de0:	6025      	str	r5, [r4, #0]
 8012de2:	e7db      	b.n	8012d9c <_malloc_r+0x64>
 8012de4:	20004ab0 	.word	0x20004ab0
 8012de8:	20004ab4 	.word	0x20004ab4

08012dec <_sbrk_r>:
 8012dec:	b538      	push	{r3, r4, r5, lr}
 8012dee:	4c06      	ldr	r4, [pc, #24]	; (8012e08 <_sbrk_r+0x1c>)
 8012df0:	2300      	movs	r3, #0
 8012df2:	4605      	mov	r5, r0
 8012df4:	4608      	mov	r0, r1
 8012df6:	6023      	str	r3, [r4, #0]
 8012df8:	f7ef fd2a 	bl	8002850 <_sbrk>
 8012dfc:	1c43      	adds	r3, r0, #1
 8012dfe:	d102      	bne.n	8012e06 <_sbrk_r+0x1a>
 8012e00:	6823      	ldr	r3, [r4, #0]
 8012e02:	b103      	cbz	r3, 8012e06 <_sbrk_r+0x1a>
 8012e04:	602b      	str	r3, [r5, #0]
 8012e06:	bd38      	pop	{r3, r4, r5, pc}
 8012e08:	20005ad0 	.word	0x20005ad0

08012e0c <siprintf>:
 8012e0c:	b40e      	push	{r1, r2, r3}
 8012e0e:	b500      	push	{lr}
 8012e10:	b09c      	sub	sp, #112	; 0x70
 8012e12:	ab1d      	add	r3, sp, #116	; 0x74
 8012e14:	9002      	str	r0, [sp, #8]
 8012e16:	9006      	str	r0, [sp, #24]
 8012e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012e1c:	4809      	ldr	r0, [pc, #36]	; (8012e44 <siprintf+0x38>)
 8012e1e:	9107      	str	r1, [sp, #28]
 8012e20:	9104      	str	r1, [sp, #16]
 8012e22:	4909      	ldr	r1, [pc, #36]	; (8012e48 <siprintf+0x3c>)
 8012e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e28:	9105      	str	r1, [sp, #20]
 8012e2a:	6800      	ldr	r0, [r0, #0]
 8012e2c:	9301      	str	r3, [sp, #4]
 8012e2e:	a902      	add	r1, sp, #8
 8012e30:	f000 f868 	bl	8012f04 <_svfiprintf_r>
 8012e34:	9b02      	ldr	r3, [sp, #8]
 8012e36:	2200      	movs	r2, #0
 8012e38:	701a      	strb	r2, [r3, #0]
 8012e3a:	b01c      	add	sp, #112	; 0x70
 8012e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e40:	b003      	add	sp, #12
 8012e42:	4770      	bx	lr
 8012e44:	200000a0 	.word	0x200000a0
 8012e48:	ffff0208 	.word	0xffff0208

08012e4c <__malloc_lock>:
 8012e4c:	4770      	bx	lr

08012e4e <__malloc_unlock>:
 8012e4e:	4770      	bx	lr

08012e50 <__ssputs_r>:
 8012e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e54:	688e      	ldr	r6, [r1, #8]
 8012e56:	429e      	cmp	r6, r3
 8012e58:	4682      	mov	sl, r0
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	4690      	mov	r8, r2
 8012e5e:	4699      	mov	r9, r3
 8012e60:	d837      	bhi.n	8012ed2 <__ssputs_r+0x82>
 8012e62:	898a      	ldrh	r2, [r1, #12]
 8012e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e68:	d031      	beq.n	8012ece <__ssputs_r+0x7e>
 8012e6a:	6825      	ldr	r5, [r4, #0]
 8012e6c:	6909      	ldr	r1, [r1, #16]
 8012e6e:	1a6f      	subs	r7, r5, r1
 8012e70:	6965      	ldr	r5, [r4, #20]
 8012e72:	2302      	movs	r3, #2
 8012e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e78:	fb95 f5f3 	sdiv	r5, r5, r3
 8012e7c:	f109 0301 	add.w	r3, r9, #1
 8012e80:	443b      	add	r3, r7
 8012e82:	429d      	cmp	r5, r3
 8012e84:	bf38      	it	cc
 8012e86:	461d      	movcc	r5, r3
 8012e88:	0553      	lsls	r3, r2, #21
 8012e8a:	d530      	bpl.n	8012eee <__ssputs_r+0x9e>
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	f7ff ff53 	bl	8012d38 <_malloc_r>
 8012e92:	4606      	mov	r6, r0
 8012e94:	b950      	cbnz	r0, 8012eac <__ssputs_r+0x5c>
 8012e96:	230c      	movs	r3, #12
 8012e98:	f8ca 3000 	str.w	r3, [sl]
 8012e9c:	89a3      	ldrh	r3, [r4, #12]
 8012e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ea2:	81a3      	strh	r3, [r4, #12]
 8012ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eac:	463a      	mov	r2, r7
 8012eae:	6921      	ldr	r1, [r4, #16]
 8012eb0:	f7ff fee0 	bl	8012c74 <memcpy>
 8012eb4:	89a3      	ldrh	r3, [r4, #12]
 8012eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ebe:	81a3      	strh	r3, [r4, #12]
 8012ec0:	6126      	str	r6, [r4, #16]
 8012ec2:	6165      	str	r5, [r4, #20]
 8012ec4:	443e      	add	r6, r7
 8012ec6:	1bed      	subs	r5, r5, r7
 8012ec8:	6026      	str	r6, [r4, #0]
 8012eca:	60a5      	str	r5, [r4, #8]
 8012ecc:	464e      	mov	r6, r9
 8012ece:	454e      	cmp	r6, r9
 8012ed0:	d900      	bls.n	8012ed4 <__ssputs_r+0x84>
 8012ed2:	464e      	mov	r6, r9
 8012ed4:	4632      	mov	r2, r6
 8012ed6:	4641      	mov	r1, r8
 8012ed8:	6820      	ldr	r0, [r4, #0]
 8012eda:	f000 fa93 	bl	8013404 <memmove>
 8012ede:	68a3      	ldr	r3, [r4, #8]
 8012ee0:	1b9b      	subs	r3, r3, r6
 8012ee2:	60a3      	str	r3, [r4, #8]
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	441e      	add	r6, r3
 8012ee8:	6026      	str	r6, [r4, #0]
 8012eea:	2000      	movs	r0, #0
 8012eec:	e7dc      	b.n	8012ea8 <__ssputs_r+0x58>
 8012eee:	462a      	mov	r2, r5
 8012ef0:	f000 faa1 	bl	8013436 <_realloc_r>
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d1e2      	bne.n	8012ec0 <__ssputs_r+0x70>
 8012efa:	6921      	ldr	r1, [r4, #16]
 8012efc:	4650      	mov	r0, sl
 8012efe:	f7ff fecd 	bl	8012c9c <_free_r>
 8012f02:	e7c8      	b.n	8012e96 <__ssputs_r+0x46>

08012f04 <_svfiprintf_r>:
 8012f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f08:	461d      	mov	r5, r3
 8012f0a:	898b      	ldrh	r3, [r1, #12]
 8012f0c:	061f      	lsls	r7, r3, #24
 8012f0e:	b09d      	sub	sp, #116	; 0x74
 8012f10:	4680      	mov	r8, r0
 8012f12:	460c      	mov	r4, r1
 8012f14:	4616      	mov	r6, r2
 8012f16:	d50f      	bpl.n	8012f38 <_svfiprintf_r+0x34>
 8012f18:	690b      	ldr	r3, [r1, #16]
 8012f1a:	b96b      	cbnz	r3, 8012f38 <_svfiprintf_r+0x34>
 8012f1c:	2140      	movs	r1, #64	; 0x40
 8012f1e:	f7ff ff0b 	bl	8012d38 <_malloc_r>
 8012f22:	6020      	str	r0, [r4, #0]
 8012f24:	6120      	str	r0, [r4, #16]
 8012f26:	b928      	cbnz	r0, 8012f34 <_svfiprintf_r+0x30>
 8012f28:	230c      	movs	r3, #12
 8012f2a:	f8c8 3000 	str.w	r3, [r8]
 8012f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f32:	e0c8      	b.n	80130c6 <_svfiprintf_r+0x1c2>
 8012f34:	2340      	movs	r3, #64	; 0x40
 8012f36:	6163      	str	r3, [r4, #20]
 8012f38:	2300      	movs	r3, #0
 8012f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f3c:	2320      	movs	r3, #32
 8012f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f42:	2330      	movs	r3, #48	; 0x30
 8012f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f48:	9503      	str	r5, [sp, #12]
 8012f4a:	f04f 0b01 	mov.w	fp, #1
 8012f4e:	4637      	mov	r7, r6
 8012f50:	463d      	mov	r5, r7
 8012f52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012f56:	b10b      	cbz	r3, 8012f5c <_svfiprintf_r+0x58>
 8012f58:	2b25      	cmp	r3, #37	; 0x25
 8012f5a:	d13e      	bne.n	8012fda <_svfiprintf_r+0xd6>
 8012f5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012f60:	d00b      	beq.n	8012f7a <_svfiprintf_r+0x76>
 8012f62:	4653      	mov	r3, sl
 8012f64:	4632      	mov	r2, r6
 8012f66:	4621      	mov	r1, r4
 8012f68:	4640      	mov	r0, r8
 8012f6a:	f7ff ff71 	bl	8012e50 <__ssputs_r>
 8012f6e:	3001      	adds	r0, #1
 8012f70:	f000 80a4 	beq.w	80130bc <_svfiprintf_r+0x1b8>
 8012f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f76:	4453      	add	r3, sl
 8012f78:	9309      	str	r3, [sp, #36]	; 0x24
 8012f7a:	783b      	ldrb	r3, [r7, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f000 809d 	beq.w	80130bc <_svfiprintf_r+0x1b8>
 8012f82:	2300      	movs	r3, #0
 8012f84:	f04f 32ff 	mov.w	r2, #4294967295
 8012f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	9307      	str	r3, [sp, #28]
 8012f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f94:	931a      	str	r3, [sp, #104]	; 0x68
 8012f96:	462f      	mov	r7, r5
 8012f98:	2205      	movs	r2, #5
 8012f9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012f9e:	4850      	ldr	r0, [pc, #320]	; (80130e0 <_svfiprintf_r+0x1dc>)
 8012fa0:	f7ed f93e 	bl	8000220 <memchr>
 8012fa4:	9b04      	ldr	r3, [sp, #16]
 8012fa6:	b9d0      	cbnz	r0, 8012fde <_svfiprintf_r+0xda>
 8012fa8:	06d9      	lsls	r1, r3, #27
 8012faa:	bf44      	itt	mi
 8012fac:	2220      	movmi	r2, #32
 8012fae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012fb2:	071a      	lsls	r2, r3, #28
 8012fb4:	bf44      	itt	mi
 8012fb6:	222b      	movmi	r2, #43	; 0x2b
 8012fb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012fbc:	782a      	ldrb	r2, [r5, #0]
 8012fbe:	2a2a      	cmp	r2, #42	; 0x2a
 8012fc0:	d015      	beq.n	8012fee <_svfiprintf_r+0xea>
 8012fc2:	9a07      	ldr	r2, [sp, #28]
 8012fc4:	462f      	mov	r7, r5
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	250a      	movs	r5, #10
 8012fca:	4639      	mov	r1, r7
 8012fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fd0:	3b30      	subs	r3, #48	; 0x30
 8012fd2:	2b09      	cmp	r3, #9
 8012fd4:	d94d      	bls.n	8013072 <_svfiprintf_r+0x16e>
 8012fd6:	b1b8      	cbz	r0, 8013008 <_svfiprintf_r+0x104>
 8012fd8:	e00f      	b.n	8012ffa <_svfiprintf_r+0xf6>
 8012fda:	462f      	mov	r7, r5
 8012fdc:	e7b8      	b.n	8012f50 <_svfiprintf_r+0x4c>
 8012fde:	4a40      	ldr	r2, [pc, #256]	; (80130e0 <_svfiprintf_r+0x1dc>)
 8012fe0:	1a80      	subs	r0, r0, r2
 8012fe2:	fa0b f000 	lsl.w	r0, fp, r0
 8012fe6:	4318      	orrs	r0, r3
 8012fe8:	9004      	str	r0, [sp, #16]
 8012fea:	463d      	mov	r5, r7
 8012fec:	e7d3      	b.n	8012f96 <_svfiprintf_r+0x92>
 8012fee:	9a03      	ldr	r2, [sp, #12]
 8012ff0:	1d11      	adds	r1, r2, #4
 8012ff2:	6812      	ldr	r2, [r2, #0]
 8012ff4:	9103      	str	r1, [sp, #12]
 8012ff6:	2a00      	cmp	r2, #0
 8012ff8:	db01      	blt.n	8012ffe <_svfiprintf_r+0xfa>
 8012ffa:	9207      	str	r2, [sp, #28]
 8012ffc:	e004      	b.n	8013008 <_svfiprintf_r+0x104>
 8012ffe:	4252      	negs	r2, r2
 8013000:	f043 0302 	orr.w	r3, r3, #2
 8013004:	9207      	str	r2, [sp, #28]
 8013006:	9304      	str	r3, [sp, #16]
 8013008:	783b      	ldrb	r3, [r7, #0]
 801300a:	2b2e      	cmp	r3, #46	; 0x2e
 801300c:	d10c      	bne.n	8013028 <_svfiprintf_r+0x124>
 801300e:	787b      	ldrb	r3, [r7, #1]
 8013010:	2b2a      	cmp	r3, #42	; 0x2a
 8013012:	d133      	bne.n	801307c <_svfiprintf_r+0x178>
 8013014:	9b03      	ldr	r3, [sp, #12]
 8013016:	1d1a      	adds	r2, r3, #4
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	9203      	str	r2, [sp, #12]
 801301c:	2b00      	cmp	r3, #0
 801301e:	bfb8      	it	lt
 8013020:	f04f 33ff 	movlt.w	r3, #4294967295
 8013024:	3702      	adds	r7, #2
 8013026:	9305      	str	r3, [sp, #20]
 8013028:	4d2e      	ldr	r5, [pc, #184]	; (80130e4 <_svfiprintf_r+0x1e0>)
 801302a:	7839      	ldrb	r1, [r7, #0]
 801302c:	2203      	movs	r2, #3
 801302e:	4628      	mov	r0, r5
 8013030:	f7ed f8f6 	bl	8000220 <memchr>
 8013034:	b138      	cbz	r0, 8013046 <_svfiprintf_r+0x142>
 8013036:	2340      	movs	r3, #64	; 0x40
 8013038:	1b40      	subs	r0, r0, r5
 801303a:	fa03 f000 	lsl.w	r0, r3, r0
 801303e:	9b04      	ldr	r3, [sp, #16]
 8013040:	4303      	orrs	r3, r0
 8013042:	3701      	adds	r7, #1
 8013044:	9304      	str	r3, [sp, #16]
 8013046:	7839      	ldrb	r1, [r7, #0]
 8013048:	4827      	ldr	r0, [pc, #156]	; (80130e8 <_svfiprintf_r+0x1e4>)
 801304a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801304e:	2206      	movs	r2, #6
 8013050:	1c7e      	adds	r6, r7, #1
 8013052:	f7ed f8e5 	bl	8000220 <memchr>
 8013056:	2800      	cmp	r0, #0
 8013058:	d038      	beq.n	80130cc <_svfiprintf_r+0x1c8>
 801305a:	4b24      	ldr	r3, [pc, #144]	; (80130ec <_svfiprintf_r+0x1e8>)
 801305c:	bb13      	cbnz	r3, 80130a4 <_svfiprintf_r+0x1a0>
 801305e:	9b03      	ldr	r3, [sp, #12]
 8013060:	3307      	adds	r3, #7
 8013062:	f023 0307 	bic.w	r3, r3, #7
 8013066:	3308      	adds	r3, #8
 8013068:	9303      	str	r3, [sp, #12]
 801306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801306c:	444b      	add	r3, r9
 801306e:	9309      	str	r3, [sp, #36]	; 0x24
 8013070:	e76d      	b.n	8012f4e <_svfiprintf_r+0x4a>
 8013072:	fb05 3202 	mla	r2, r5, r2, r3
 8013076:	2001      	movs	r0, #1
 8013078:	460f      	mov	r7, r1
 801307a:	e7a6      	b.n	8012fca <_svfiprintf_r+0xc6>
 801307c:	2300      	movs	r3, #0
 801307e:	3701      	adds	r7, #1
 8013080:	9305      	str	r3, [sp, #20]
 8013082:	4619      	mov	r1, r3
 8013084:	250a      	movs	r5, #10
 8013086:	4638      	mov	r0, r7
 8013088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801308c:	3a30      	subs	r2, #48	; 0x30
 801308e:	2a09      	cmp	r2, #9
 8013090:	d903      	bls.n	801309a <_svfiprintf_r+0x196>
 8013092:	2b00      	cmp	r3, #0
 8013094:	d0c8      	beq.n	8013028 <_svfiprintf_r+0x124>
 8013096:	9105      	str	r1, [sp, #20]
 8013098:	e7c6      	b.n	8013028 <_svfiprintf_r+0x124>
 801309a:	fb05 2101 	mla	r1, r5, r1, r2
 801309e:	2301      	movs	r3, #1
 80130a0:	4607      	mov	r7, r0
 80130a2:	e7f0      	b.n	8013086 <_svfiprintf_r+0x182>
 80130a4:	ab03      	add	r3, sp, #12
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	4622      	mov	r2, r4
 80130aa:	4b11      	ldr	r3, [pc, #68]	; (80130f0 <_svfiprintf_r+0x1ec>)
 80130ac:	a904      	add	r1, sp, #16
 80130ae:	4640      	mov	r0, r8
 80130b0:	f3af 8000 	nop.w
 80130b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80130b8:	4681      	mov	r9, r0
 80130ba:	d1d6      	bne.n	801306a <_svfiprintf_r+0x166>
 80130bc:	89a3      	ldrh	r3, [r4, #12]
 80130be:	065b      	lsls	r3, r3, #25
 80130c0:	f53f af35 	bmi.w	8012f2e <_svfiprintf_r+0x2a>
 80130c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130c6:	b01d      	add	sp, #116	; 0x74
 80130c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130cc:	ab03      	add	r3, sp, #12
 80130ce:	9300      	str	r3, [sp, #0]
 80130d0:	4622      	mov	r2, r4
 80130d2:	4b07      	ldr	r3, [pc, #28]	; (80130f0 <_svfiprintf_r+0x1ec>)
 80130d4:	a904      	add	r1, sp, #16
 80130d6:	4640      	mov	r0, r8
 80130d8:	f000 f882 	bl	80131e0 <_printf_i>
 80130dc:	e7ea      	b.n	80130b4 <_svfiprintf_r+0x1b0>
 80130de:	bf00      	nop
 80130e0:	080161f8 	.word	0x080161f8
 80130e4:	080161fe 	.word	0x080161fe
 80130e8:	08016202 	.word	0x08016202
 80130ec:	00000000 	.word	0x00000000
 80130f0:	08012e51 	.word	0x08012e51

080130f4 <_printf_common>:
 80130f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130f8:	4691      	mov	r9, r2
 80130fa:	461f      	mov	r7, r3
 80130fc:	688a      	ldr	r2, [r1, #8]
 80130fe:	690b      	ldr	r3, [r1, #16]
 8013100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013104:	4293      	cmp	r3, r2
 8013106:	bfb8      	it	lt
 8013108:	4613      	movlt	r3, r2
 801310a:	f8c9 3000 	str.w	r3, [r9]
 801310e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013112:	4606      	mov	r6, r0
 8013114:	460c      	mov	r4, r1
 8013116:	b112      	cbz	r2, 801311e <_printf_common+0x2a>
 8013118:	3301      	adds	r3, #1
 801311a:	f8c9 3000 	str.w	r3, [r9]
 801311e:	6823      	ldr	r3, [r4, #0]
 8013120:	0699      	lsls	r1, r3, #26
 8013122:	bf42      	ittt	mi
 8013124:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013128:	3302      	addmi	r3, #2
 801312a:	f8c9 3000 	strmi.w	r3, [r9]
 801312e:	6825      	ldr	r5, [r4, #0]
 8013130:	f015 0506 	ands.w	r5, r5, #6
 8013134:	d107      	bne.n	8013146 <_printf_common+0x52>
 8013136:	f104 0a19 	add.w	sl, r4, #25
 801313a:	68e3      	ldr	r3, [r4, #12]
 801313c:	f8d9 2000 	ldr.w	r2, [r9]
 8013140:	1a9b      	subs	r3, r3, r2
 8013142:	42ab      	cmp	r3, r5
 8013144:	dc28      	bgt.n	8013198 <_printf_common+0xa4>
 8013146:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801314a:	6822      	ldr	r2, [r4, #0]
 801314c:	3300      	adds	r3, #0
 801314e:	bf18      	it	ne
 8013150:	2301      	movne	r3, #1
 8013152:	0692      	lsls	r2, r2, #26
 8013154:	d42d      	bmi.n	80131b2 <_printf_common+0xbe>
 8013156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801315a:	4639      	mov	r1, r7
 801315c:	4630      	mov	r0, r6
 801315e:	47c0      	blx	r8
 8013160:	3001      	adds	r0, #1
 8013162:	d020      	beq.n	80131a6 <_printf_common+0xb2>
 8013164:	6823      	ldr	r3, [r4, #0]
 8013166:	68e5      	ldr	r5, [r4, #12]
 8013168:	f8d9 2000 	ldr.w	r2, [r9]
 801316c:	f003 0306 	and.w	r3, r3, #6
 8013170:	2b04      	cmp	r3, #4
 8013172:	bf08      	it	eq
 8013174:	1aad      	subeq	r5, r5, r2
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	6922      	ldr	r2, [r4, #16]
 801317a:	bf0c      	ite	eq
 801317c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013180:	2500      	movne	r5, #0
 8013182:	4293      	cmp	r3, r2
 8013184:	bfc4      	itt	gt
 8013186:	1a9b      	subgt	r3, r3, r2
 8013188:	18ed      	addgt	r5, r5, r3
 801318a:	f04f 0900 	mov.w	r9, #0
 801318e:	341a      	adds	r4, #26
 8013190:	454d      	cmp	r5, r9
 8013192:	d11a      	bne.n	80131ca <_printf_common+0xd6>
 8013194:	2000      	movs	r0, #0
 8013196:	e008      	b.n	80131aa <_printf_common+0xb6>
 8013198:	2301      	movs	r3, #1
 801319a:	4652      	mov	r2, sl
 801319c:	4639      	mov	r1, r7
 801319e:	4630      	mov	r0, r6
 80131a0:	47c0      	blx	r8
 80131a2:	3001      	adds	r0, #1
 80131a4:	d103      	bne.n	80131ae <_printf_common+0xba>
 80131a6:	f04f 30ff 	mov.w	r0, #4294967295
 80131aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ae:	3501      	adds	r5, #1
 80131b0:	e7c3      	b.n	801313a <_printf_common+0x46>
 80131b2:	18e1      	adds	r1, r4, r3
 80131b4:	1c5a      	adds	r2, r3, #1
 80131b6:	2030      	movs	r0, #48	; 0x30
 80131b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80131bc:	4422      	add	r2, r4
 80131be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80131c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131c6:	3302      	adds	r3, #2
 80131c8:	e7c5      	b.n	8013156 <_printf_common+0x62>
 80131ca:	2301      	movs	r3, #1
 80131cc:	4622      	mov	r2, r4
 80131ce:	4639      	mov	r1, r7
 80131d0:	4630      	mov	r0, r6
 80131d2:	47c0      	blx	r8
 80131d4:	3001      	adds	r0, #1
 80131d6:	d0e6      	beq.n	80131a6 <_printf_common+0xb2>
 80131d8:	f109 0901 	add.w	r9, r9, #1
 80131dc:	e7d8      	b.n	8013190 <_printf_common+0x9c>
	...

080131e0 <_printf_i>:
 80131e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80131e8:	460c      	mov	r4, r1
 80131ea:	7e09      	ldrb	r1, [r1, #24]
 80131ec:	b085      	sub	sp, #20
 80131ee:	296e      	cmp	r1, #110	; 0x6e
 80131f0:	4617      	mov	r7, r2
 80131f2:	4606      	mov	r6, r0
 80131f4:	4698      	mov	r8, r3
 80131f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131f8:	f000 80b3 	beq.w	8013362 <_printf_i+0x182>
 80131fc:	d822      	bhi.n	8013244 <_printf_i+0x64>
 80131fe:	2963      	cmp	r1, #99	; 0x63
 8013200:	d036      	beq.n	8013270 <_printf_i+0x90>
 8013202:	d80a      	bhi.n	801321a <_printf_i+0x3a>
 8013204:	2900      	cmp	r1, #0
 8013206:	f000 80b9 	beq.w	801337c <_printf_i+0x19c>
 801320a:	2958      	cmp	r1, #88	; 0x58
 801320c:	f000 8083 	beq.w	8013316 <_printf_i+0x136>
 8013210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013214:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013218:	e032      	b.n	8013280 <_printf_i+0xa0>
 801321a:	2964      	cmp	r1, #100	; 0x64
 801321c:	d001      	beq.n	8013222 <_printf_i+0x42>
 801321e:	2969      	cmp	r1, #105	; 0x69
 8013220:	d1f6      	bne.n	8013210 <_printf_i+0x30>
 8013222:	6820      	ldr	r0, [r4, #0]
 8013224:	6813      	ldr	r3, [r2, #0]
 8013226:	0605      	lsls	r5, r0, #24
 8013228:	f103 0104 	add.w	r1, r3, #4
 801322c:	d52a      	bpl.n	8013284 <_printf_i+0xa4>
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	6011      	str	r1, [r2, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	da03      	bge.n	801323e <_printf_i+0x5e>
 8013236:	222d      	movs	r2, #45	; 0x2d
 8013238:	425b      	negs	r3, r3
 801323a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801323e:	486f      	ldr	r0, [pc, #444]	; (80133fc <_printf_i+0x21c>)
 8013240:	220a      	movs	r2, #10
 8013242:	e039      	b.n	80132b8 <_printf_i+0xd8>
 8013244:	2973      	cmp	r1, #115	; 0x73
 8013246:	f000 809d 	beq.w	8013384 <_printf_i+0x1a4>
 801324a:	d808      	bhi.n	801325e <_printf_i+0x7e>
 801324c:	296f      	cmp	r1, #111	; 0x6f
 801324e:	d020      	beq.n	8013292 <_printf_i+0xb2>
 8013250:	2970      	cmp	r1, #112	; 0x70
 8013252:	d1dd      	bne.n	8013210 <_printf_i+0x30>
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	f043 0320 	orr.w	r3, r3, #32
 801325a:	6023      	str	r3, [r4, #0]
 801325c:	e003      	b.n	8013266 <_printf_i+0x86>
 801325e:	2975      	cmp	r1, #117	; 0x75
 8013260:	d017      	beq.n	8013292 <_printf_i+0xb2>
 8013262:	2978      	cmp	r1, #120	; 0x78
 8013264:	d1d4      	bne.n	8013210 <_printf_i+0x30>
 8013266:	2378      	movs	r3, #120	; 0x78
 8013268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801326c:	4864      	ldr	r0, [pc, #400]	; (8013400 <_printf_i+0x220>)
 801326e:	e055      	b.n	801331c <_printf_i+0x13c>
 8013270:	6813      	ldr	r3, [r2, #0]
 8013272:	1d19      	adds	r1, r3, #4
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	6011      	str	r1, [r2, #0]
 8013278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801327c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013280:	2301      	movs	r3, #1
 8013282:	e08c      	b.n	801339e <_printf_i+0x1be>
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	6011      	str	r1, [r2, #0]
 8013288:	f010 0f40 	tst.w	r0, #64	; 0x40
 801328c:	bf18      	it	ne
 801328e:	b21b      	sxthne	r3, r3
 8013290:	e7cf      	b.n	8013232 <_printf_i+0x52>
 8013292:	6813      	ldr	r3, [r2, #0]
 8013294:	6825      	ldr	r5, [r4, #0]
 8013296:	1d18      	adds	r0, r3, #4
 8013298:	6010      	str	r0, [r2, #0]
 801329a:	0628      	lsls	r0, r5, #24
 801329c:	d501      	bpl.n	80132a2 <_printf_i+0xc2>
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	e002      	b.n	80132a8 <_printf_i+0xc8>
 80132a2:	0668      	lsls	r0, r5, #25
 80132a4:	d5fb      	bpl.n	801329e <_printf_i+0xbe>
 80132a6:	881b      	ldrh	r3, [r3, #0]
 80132a8:	4854      	ldr	r0, [pc, #336]	; (80133fc <_printf_i+0x21c>)
 80132aa:	296f      	cmp	r1, #111	; 0x6f
 80132ac:	bf14      	ite	ne
 80132ae:	220a      	movne	r2, #10
 80132b0:	2208      	moveq	r2, #8
 80132b2:	2100      	movs	r1, #0
 80132b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80132b8:	6865      	ldr	r5, [r4, #4]
 80132ba:	60a5      	str	r5, [r4, #8]
 80132bc:	2d00      	cmp	r5, #0
 80132be:	f2c0 8095 	blt.w	80133ec <_printf_i+0x20c>
 80132c2:	6821      	ldr	r1, [r4, #0]
 80132c4:	f021 0104 	bic.w	r1, r1, #4
 80132c8:	6021      	str	r1, [r4, #0]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d13d      	bne.n	801334a <_printf_i+0x16a>
 80132ce:	2d00      	cmp	r5, #0
 80132d0:	f040 808e 	bne.w	80133f0 <_printf_i+0x210>
 80132d4:	4665      	mov	r5, ip
 80132d6:	2a08      	cmp	r2, #8
 80132d8:	d10b      	bne.n	80132f2 <_printf_i+0x112>
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	07db      	lsls	r3, r3, #31
 80132de:	d508      	bpl.n	80132f2 <_printf_i+0x112>
 80132e0:	6923      	ldr	r3, [r4, #16]
 80132e2:	6862      	ldr	r2, [r4, #4]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	bfde      	ittt	le
 80132e8:	2330      	movle	r3, #48	; 0x30
 80132ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80132ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80132f2:	ebac 0305 	sub.w	r3, ip, r5
 80132f6:	6123      	str	r3, [r4, #16]
 80132f8:	f8cd 8000 	str.w	r8, [sp]
 80132fc:	463b      	mov	r3, r7
 80132fe:	aa03      	add	r2, sp, #12
 8013300:	4621      	mov	r1, r4
 8013302:	4630      	mov	r0, r6
 8013304:	f7ff fef6 	bl	80130f4 <_printf_common>
 8013308:	3001      	adds	r0, #1
 801330a:	d14d      	bne.n	80133a8 <_printf_i+0x1c8>
 801330c:	f04f 30ff 	mov.w	r0, #4294967295
 8013310:	b005      	add	sp, #20
 8013312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013316:	4839      	ldr	r0, [pc, #228]	; (80133fc <_printf_i+0x21c>)
 8013318:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801331c:	6813      	ldr	r3, [r2, #0]
 801331e:	6821      	ldr	r1, [r4, #0]
 8013320:	1d1d      	adds	r5, r3, #4
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	6015      	str	r5, [r2, #0]
 8013326:	060a      	lsls	r2, r1, #24
 8013328:	d50b      	bpl.n	8013342 <_printf_i+0x162>
 801332a:	07ca      	lsls	r2, r1, #31
 801332c:	bf44      	itt	mi
 801332e:	f041 0120 	orrmi.w	r1, r1, #32
 8013332:	6021      	strmi	r1, [r4, #0]
 8013334:	b91b      	cbnz	r3, 801333e <_printf_i+0x15e>
 8013336:	6822      	ldr	r2, [r4, #0]
 8013338:	f022 0220 	bic.w	r2, r2, #32
 801333c:	6022      	str	r2, [r4, #0]
 801333e:	2210      	movs	r2, #16
 8013340:	e7b7      	b.n	80132b2 <_printf_i+0xd2>
 8013342:	064d      	lsls	r5, r1, #25
 8013344:	bf48      	it	mi
 8013346:	b29b      	uxthmi	r3, r3
 8013348:	e7ef      	b.n	801332a <_printf_i+0x14a>
 801334a:	4665      	mov	r5, ip
 801334c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013350:	fb02 3311 	mls	r3, r2, r1, r3
 8013354:	5cc3      	ldrb	r3, [r0, r3]
 8013356:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801335a:	460b      	mov	r3, r1
 801335c:	2900      	cmp	r1, #0
 801335e:	d1f5      	bne.n	801334c <_printf_i+0x16c>
 8013360:	e7b9      	b.n	80132d6 <_printf_i+0xf6>
 8013362:	6813      	ldr	r3, [r2, #0]
 8013364:	6825      	ldr	r5, [r4, #0]
 8013366:	6961      	ldr	r1, [r4, #20]
 8013368:	1d18      	adds	r0, r3, #4
 801336a:	6010      	str	r0, [r2, #0]
 801336c:	0628      	lsls	r0, r5, #24
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	d501      	bpl.n	8013376 <_printf_i+0x196>
 8013372:	6019      	str	r1, [r3, #0]
 8013374:	e002      	b.n	801337c <_printf_i+0x19c>
 8013376:	066a      	lsls	r2, r5, #25
 8013378:	d5fb      	bpl.n	8013372 <_printf_i+0x192>
 801337a:	8019      	strh	r1, [r3, #0]
 801337c:	2300      	movs	r3, #0
 801337e:	6123      	str	r3, [r4, #16]
 8013380:	4665      	mov	r5, ip
 8013382:	e7b9      	b.n	80132f8 <_printf_i+0x118>
 8013384:	6813      	ldr	r3, [r2, #0]
 8013386:	1d19      	adds	r1, r3, #4
 8013388:	6011      	str	r1, [r2, #0]
 801338a:	681d      	ldr	r5, [r3, #0]
 801338c:	6862      	ldr	r2, [r4, #4]
 801338e:	2100      	movs	r1, #0
 8013390:	4628      	mov	r0, r5
 8013392:	f7ec ff45 	bl	8000220 <memchr>
 8013396:	b108      	cbz	r0, 801339c <_printf_i+0x1bc>
 8013398:	1b40      	subs	r0, r0, r5
 801339a:	6060      	str	r0, [r4, #4]
 801339c:	6863      	ldr	r3, [r4, #4]
 801339e:	6123      	str	r3, [r4, #16]
 80133a0:	2300      	movs	r3, #0
 80133a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133a6:	e7a7      	b.n	80132f8 <_printf_i+0x118>
 80133a8:	6923      	ldr	r3, [r4, #16]
 80133aa:	462a      	mov	r2, r5
 80133ac:	4639      	mov	r1, r7
 80133ae:	4630      	mov	r0, r6
 80133b0:	47c0      	blx	r8
 80133b2:	3001      	adds	r0, #1
 80133b4:	d0aa      	beq.n	801330c <_printf_i+0x12c>
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	079b      	lsls	r3, r3, #30
 80133ba:	d413      	bmi.n	80133e4 <_printf_i+0x204>
 80133bc:	68e0      	ldr	r0, [r4, #12]
 80133be:	9b03      	ldr	r3, [sp, #12]
 80133c0:	4298      	cmp	r0, r3
 80133c2:	bfb8      	it	lt
 80133c4:	4618      	movlt	r0, r3
 80133c6:	e7a3      	b.n	8013310 <_printf_i+0x130>
 80133c8:	2301      	movs	r3, #1
 80133ca:	464a      	mov	r2, r9
 80133cc:	4639      	mov	r1, r7
 80133ce:	4630      	mov	r0, r6
 80133d0:	47c0      	blx	r8
 80133d2:	3001      	adds	r0, #1
 80133d4:	d09a      	beq.n	801330c <_printf_i+0x12c>
 80133d6:	3501      	adds	r5, #1
 80133d8:	68e3      	ldr	r3, [r4, #12]
 80133da:	9a03      	ldr	r2, [sp, #12]
 80133dc:	1a9b      	subs	r3, r3, r2
 80133de:	42ab      	cmp	r3, r5
 80133e0:	dcf2      	bgt.n	80133c8 <_printf_i+0x1e8>
 80133e2:	e7eb      	b.n	80133bc <_printf_i+0x1dc>
 80133e4:	2500      	movs	r5, #0
 80133e6:	f104 0919 	add.w	r9, r4, #25
 80133ea:	e7f5      	b.n	80133d8 <_printf_i+0x1f8>
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1ac      	bne.n	801334a <_printf_i+0x16a>
 80133f0:	7803      	ldrb	r3, [r0, #0]
 80133f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133fa:	e76c      	b.n	80132d6 <_printf_i+0xf6>
 80133fc:	08016209 	.word	0x08016209
 8013400:	0801621a 	.word	0x0801621a

08013404 <memmove>:
 8013404:	4288      	cmp	r0, r1
 8013406:	b510      	push	{r4, lr}
 8013408:	eb01 0302 	add.w	r3, r1, r2
 801340c:	d807      	bhi.n	801341e <memmove+0x1a>
 801340e:	1e42      	subs	r2, r0, #1
 8013410:	4299      	cmp	r1, r3
 8013412:	d00a      	beq.n	801342a <memmove+0x26>
 8013414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013418:	f802 4f01 	strb.w	r4, [r2, #1]!
 801341c:	e7f8      	b.n	8013410 <memmove+0xc>
 801341e:	4283      	cmp	r3, r0
 8013420:	d9f5      	bls.n	801340e <memmove+0xa>
 8013422:	1881      	adds	r1, r0, r2
 8013424:	1ad2      	subs	r2, r2, r3
 8013426:	42d3      	cmn	r3, r2
 8013428:	d100      	bne.n	801342c <memmove+0x28>
 801342a:	bd10      	pop	{r4, pc}
 801342c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013430:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013434:	e7f7      	b.n	8013426 <memmove+0x22>

08013436 <_realloc_r>:
 8013436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013438:	4607      	mov	r7, r0
 801343a:	4614      	mov	r4, r2
 801343c:	460e      	mov	r6, r1
 801343e:	b921      	cbnz	r1, 801344a <_realloc_r+0x14>
 8013440:	4611      	mov	r1, r2
 8013442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013446:	f7ff bc77 	b.w	8012d38 <_malloc_r>
 801344a:	b922      	cbnz	r2, 8013456 <_realloc_r+0x20>
 801344c:	f7ff fc26 	bl	8012c9c <_free_r>
 8013450:	4625      	mov	r5, r4
 8013452:	4628      	mov	r0, r5
 8013454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013456:	f000 f814 	bl	8013482 <_malloc_usable_size_r>
 801345a:	42a0      	cmp	r0, r4
 801345c:	d20f      	bcs.n	801347e <_realloc_r+0x48>
 801345e:	4621      	mov	r1, r4
 8013460:	4638      	mov	r0, r7
 8013462:	f7ff fc69 	bl	8012d38 <_malloc_r>
 8013466:	4605      	mov	r5, r0
 8013468:	2800      	cmp	r0, #0
 801346a:	d0f2      	beq.n	8013452 <_realloc_r+0x1c>
 801346c:	4631      	mov	r1, r6
 801346e:	4622      	mov	r2, r4
 8013470:	f7ff fc00 	bl	8012c74 <memcpy>
 8013474:	4631      	mov	r1, r6
 8013476:	4638      	mov	r0, r7
 8013478:	f7ff fc10 	bl	8012c9c <_free_r>
 801347c:	e7e9      	b.n	8013452 <_realloc_r+0x1c>
 801347e:	4635      	mov	r5, r6
 8013480:	e7e7      	b.n	8013452 <_realloc_r+0x1c>

08013482 <_malloc_usable_size_r>:
 8013482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013486:	1f18      	subs	r0, r3, #4
 8013488:	2b00      	cmp	r3, #0
 801348a:	bfbc      	itt	lt
 801348c:	580b      	ldrlt	r3, [r1, r0]
 801348e:	18c0      	addlt	r0, r0, r3
 8013490:	4770      	bx	lr
	...

08013494 <_init>:
 8013494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013496:	bf00      	nop
 8013498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801349a:	bc08      	pop	{r3}
 801349c:	469e      	mov	lr, r3
 801349e:	4770      	bx	lr

080134a0 <_fini>:
 80134a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134a2:	bf00      	nop
 80134a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134a6:	bc08      	pop	{r3}
 80134a8:	469e      	mov	lr, r3
 80134aa:	4770      	bx	lr
